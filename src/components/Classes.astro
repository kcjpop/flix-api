---
import Card from './Card.astro'
import DefDetails from './DefDetails.astro'
import Doc from './Doc.astro'
import Instance from './Instance.astro'
import Source from './Source.astro'
import SourceGrid from './SourceGrid.astro'
import TypeConstraints from './TypeConstraints.astro'
import TypeParam from './TypeParam.astro'

const { classes = [], s } = Astro.props
---

<style>
  .instance-grid {
    margin-left: calc(var(--size-3) * -1);
    margin-right: calc(var(--size-3) * -1);
    padding: var(--size-2) var(--size-3);
    display: grid;
    align-items: center;
    gap: var(--size-2);
    grid-template-columns: 1fr 8ch;
  }

  .nowrap {
    @media (--small) {
      white-space: nowrap;
      overflow-x: scroll;
      overflow-y: hidden;
      padding-bottom: var(--size-2);
    }
  }
</style>

<h3 class="font-fluid-2">Classes</h3>

<div class="grid gap-3">
  {
    classes.map((c) => (
      <Card id={`c-${c.sym.name}`}>
        <SourceGrid>
          <div class="mobile-nowrap">
            <div class="font-semibold">
              class <span class="t-name">{c.sym.name}</span>
              [<TypeParam tparam={c.tparam} withKind />]
              <TypeConstraints tcs={c.superClasses} />
            </div>
          </div>

          <Source loc={c.loc} />
        </SourceGrid>

        <div class="mb-3">
          <Doc doc={c.doc} />
        </div>

        <DefDetails
          open
          summary="Signatures"
          classList={s.details}
          defs={c.sigs}
        />

        <DefDetails summary="Definitions" classList={s.details} defs={c.defs} />

        <details class={s.details}>
          <summary class="mb-3">Instances</summary>

          <div class="grid gap-2 stripped font-mono">
            {c.instances.map((inst) => (
              <div class="instance-grid">
                <Instance inst={inst} />
                <Source loc={inst.loc} />
              </div>
            ))}
          </div>
        </details>
      </Card>
    ))
  }
</div>
