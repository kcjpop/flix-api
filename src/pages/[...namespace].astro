---
import { getVersion, getNamespace, getNamespaces } from '../data.js'

import s from './namespace.module.css'

import AsideLinks from '../components/AsideLinks.astro'
import Classes from '../components/Classes.astro'
import Definitions from '../components/Definitions.astro'
import Enums from '../components/Enums.astro'
import TypeAliases from '../components/TypeAliases.astro'
import BaseLayout from '../layouts/Base.astro'

import IconArrowFromLeft from '../components/IconArrowFromLeft.astro'
import IconArrowFromRight from '../components/IconArrowFromRight.astro'
import IconClose from '../components/IconClose.astro'

export function getStaticPaths() {
  return getNamespaces().map((ns) => {
    return { params: { namespace: ns } }
  })
}

const { namespace } = Astro.params
const ns = getNamespace(namespace)

const linkMapper = (prefix) => (item) => ({
  link: `#${prefix}-${item.sym.name}`,
  name: item.sym.name,
})

const classes = ns.classes?.map(linkMapper('c'))
const enums = ns.enums?.map(linkMapper('e'))
const definitions = ns.defs?.map(linkMapper('d'))
const typeAliases = ns.typeAliases?.map(linkMapper('ta'))

const namespaces = getNamespaces().map((ns) => ({ link: `/${ns}`, name: ns }))
---

<BaseLayout>
  <title slot="title">{namespace}</title>

  <aside slot="left">
    <div class="aside aside--left" id="aside-left">
      <a title="Close" class="aside-btn-close aside-btn-close--left" href="#">
        <IconClose />
      </a>

      <AsideLinks name="Namespaces" items={namespaces} />
    </div>
  </aside>

  <aside slot="right">
    <div class="aside aside--right" id="aside-right">
      <a title="Close" class="aside-btn-close aside-btn-close--right" href="#">
        <IconClose />
      </a>

      <AsideLinks type="class" name="Classes" items={classes} />
      <AsideLinks type="enum" name="Enums" items={enums} />
      <AsideLinks type="type-alias" name="Type Aliases" items={typeAliases} />
      <AsideLinks type="def" name="Definitions" items={definitions} />
    </div>
  </aside>

  <div
    class="p-3 sticky"
    style="--top: 0; border-bottom: 1px solid var(--gray-2)"
  >
    <div class="mb-2 flex align-center justify-space-between">
      <a role="button" class={s.btnAside} href="#aside-left">
        <svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="24"
          width="24"
          xmlns="http://www.w3.org/2000/svg"
          ><path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z"></path>
        </svg> Namespaces
      </a>

      <a role="button" class={s.btnAside} href="#aside-right">
        Symbols
        <svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="24"
          width="24"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M10 3H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM9 9H5V5h4v4zm11-6h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm-1 6h-4V5h4v4zm-9 4H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1zm-1 6H5v-4h4v4zm8-6c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2-.897 2-2 2z"
          ></path>
        </svg>
      </a>
    </div>

    <div class="flex align-center justify-space-between">
      <h1 class="font-mono font-fluid-3">
        {namespace}
      </h1>
      <div class={s.version}>{getVersion()}</div>
    </div>
  </div>

  {
    ns.classes?.length > 0 && (
      <div class="px-3 grid gap-3 mb-3">
        <Classes classes={ns.classes} s={s} />
      </div>
    )
  }

  {
    ns.enums?.length > 0 && (
      <div class="px-3 grid gap-3 mb-3">
        <Enums enums={ns.enums} />
      </div>
    )
  }

  {
    ns.typeAliases?.length > 0 && (
      <div class="px-3 grid gap-3 mb-3">
        <TypeAliases tas={ns.typeAliases} />
      </div>
    )
  }

  {
    ns.defs?.length > 0 && (
      <div class="px-3 grid gap-3 mb-3">
        <Definitions defs={ns.defs} />
      </div>
    )
  }

  <script>
    function toggleOverflowHidden() {
      if (location.hash === '#aside-left' || location.hash === '#aside-right') {
        // Aside is visible, hide overflow on body
        document.body.classList.add('overflow-hidden')
      } else {
        document.body.classList.remove('overflow-hidden')
      }
    }

    window.addEventListener('load', toggleOverflowHidden)
    window.addEventListener('hashchange', toggleOverflowHidden)
  </script>
</BaseLayout>
