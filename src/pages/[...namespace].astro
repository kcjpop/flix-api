---
import { getNamespaces, getNamespace } from '../data.js'

import s from './namespace.module.css'

import BaseLayout from '../layouts/Base.astro'
import Doc from '../components/Doc.astro'
import TypeParam from '../components/TypeParam.astro'
import TypeConstraints from '../components/TypeConstraints.astro'
import Instance from '../components/Instance.astro'
import Source from '../components/Source.astro'
import Card from '../components/Card.astro'
import DefDetails from '../components/DefDetails.astro'
import AsideLinks from '../components/AsideLinks.astro'
import SourceGrid from '../components/SourceGrid.astro'

export function getStaticPaths() {
  return getNamespaces().map((ns) => {
    return { params: { namespace: ns } }
  })
}

const { namespace } = Astro.params
const ns = getNamespace(namespace)

const classes = ns.classes?.map((c) => ({
  link: `#c-${c.sym.name}`,
  name: c.sym.name,
}))

const definitions = ns.defs?.map((d) => ({
  link: `#d-${d.sym.name}`,
  name: d.sym.name,
}))

const namespaces = getNamespaces().map((ns) => ({
  link: `/${ns}`,
  name: ns,
}))
---

<BaseLayout>
  <aside slot="left">
    <div class="aside aside--left" id="aside-left">
      <a title="Close" class="aside-btn-close aside-btn-close--left" href="#"
        ><svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="1em"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z"
          ></path>
        </svg>
      </a>

      <AsideLinks name="Namespaces" items={namespaces} />
    </div>
  </aside>

  <aside slot="right">
    <div class="aside aside--right" id="aside-right">
      <a title="Close" class="aside-btn-close aside-btn-close--right" href="#"
        ><svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="1em"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="m16.192 6.344-4.243 4.242-4.242-4.242-1.414 1.414L10.535 12l-4.242 4.242 1.414 1.414 4.242-4.242 4.243 4.242 1.414-1.414L13.364 12l4.242-4.242z"
          ></path>
        </svg>
      </a>

      <AsideLinks type="class" name="Classes" items={classes} />
      <AsideLinks type="def" name="Definitions" items={definitions} />
    </div>
  </aside>

  <div
    class="p-3 sticky"
    style="--top: 0; border-bottom: 1px solid var(--gray-2)"
  >
    <div class="flex align-center justify-space-between">
      <a role="button" class={s.btnAside} href="#aside-left">
        <svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="1em"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M4 6h2v12H4zm4 7h8.586l-4.293 4.293 1.414 1.414L20.414 12l-6.707-6.707-1.414 1.414L16.586 11H8z"
          ></path>
        </svg>
      </a>

      <a role="button" class={s.btnAside} href="#aside-right"
        ><svg
          stroke="currentColor"
          fill="currentColor"
          stroke-width="0"
          viewBox="0 0 24 24"
          height="1em"
          width="1em"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M18 6h2v12h-2zm-2 5H7.414l4.293-4.293-1.414-1.414L3.586 12l6.707 6.707 1.414-1.414L7.414 13H16z"
          ></path>
        </svg>
      </a>
    </div>

    <h1>{namespace}</h1>
  </div>

  <div class="px-3 grid gap-3 mb-3">
    <h3>Classes</h3>

    <div class="grid gap-3">
      {
        ns.classes?.map((c) => (
          <Card id={`c-${c.sym.name}`}>
            <SourceGrid>
              <div>
                class <span class="t-name">{c.sym.name}</span>
                [<TypeParam tparam={c.tparam} withKind />]
                <TypeConstraints tcs={c.superClasses} />
              </div>

              <Source loc={c.loc} />
            </SourceGrid>

            <div class="pl-3 mb-3">
              <Doc doc={c.doc} />
            </div>

            <DefDetails
              open
              summary="Signatures"
              classList={s.details}
              defs={c.sigs}
            />

            <DefDetails
              summary="Definitions"
              classList={s.details}
              defs={c.defs}
            />

            <details class={s.details}>
              <summary class="mb-3">Instances</summary>

              <div class="grid gap-2 stripped">
                {c.instances.map((inst) => (
                  <SourceGrid>
                    <Instance inst={inst} />
                    <Source loc={inst.loc} />
                  </SourceGrid>
                ))}
              </div>
            </details>
          </Card>
        ))
      }
    </div>
  </div>

  <div class="px-3 grid gap-3 mb-3">
    <h3>Definitions</h3>

    <div class="grid gap-3">
      {
        ns.defs?.map((d) => (
          <Card id={`d-${d.sym.name}`}>
            <p class="font-mono">
              def <span class="t-name">{d.sym.name}</span>
            </p>

            <Doc doc={d.doc} />
          </Card>
        ))
      }
    </div>
  </div>

  <datalist id="js-current-ns-defs">
    {ns.defs?.map((d) => <option value={d.sym.name} />)}
  </datalist>

  <script>
    function toggleOverflowHidden() {
      if (location.hash === '#aside-left' || location.hash === '#aside-right') {
        // Aside is visible, hide overflow on body
        document.body.classList.add('overflow-hidden')
      } else {
        document.body.classList.remove('overflow-hidden')
      }
    }

    window.addEventListener('load', toggleOverflowHidden)
    window.addEventListener('hashchange', toggleOverflowHidden)
  </script>
</BaseLayout>
