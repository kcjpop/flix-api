{
  "version":"v0.34.0",
  "namespaces":["Prelude","Applicative","Array","Assert","Benchmark","BigDecimal","BigInt","Bool","Chain","Channel","Char","Choice","Comparison","Console","Day01","Day02","Day03","Day04","Day06","Day08","DelayList","DelayMap","Environment","File","Fixpoint","Fixpoint/Ast","Fixpoint/Tuple","Float32","Float64","Foldable","Functor","GetOpt","Graph","Hash","Int16","Int32","Int64","Int8","Iterator","List","Map","Monad","Monoid","MultiMap","MutDeque","MutList","MutMap","MutSet","Nec","Nel","Object","Option","Order","Random","RedBlackTree","Reflect","Result","Set","String","StringBuilder","System/StdErr","System/StdIn","System/StdOut","Thread","Time","Time/Duration","Time/Epoch","Time/Instant","Traversable","Utils","Validation"],
  "classes":{
    "Prelude":[{
      "sym":{
        "namespace":[],
        "name":"Add",
        "loc":{
          "name":"Add.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for addition."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Add",
            "loc":{
              "name":"Add.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"add",
          "loc":{
            "name":"Add.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Add",
            "loc":{
              "name":"Add.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Add.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":55,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Add.flix",
          "beginLine":59,
          "endLine":63
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Add",
            "loc":{
              "name":"Add.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":36,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Add",
          "loc":{
            "name":"Add.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Add",
            "loc":{
              "name":"Add.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":103,
          "endLine":108
        }
      }],
      "loc":{
        "name":"Add.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },
      "doc":["A type class for functors that support application, i.e. allow to:","","- Make an applicative value out of a normal value (embed it into a default context), e.g. embed `5` into `Some(5)`.","- Apply a function-type applicative to a matching argument-type applicative, resulting in an applicative of","the function's result type.","","The meaning of the application realized by the `ap` function is defined by the respective instance.","Conceptually this can be understood as applying functions \"contained\" in the first applicative to arguments","in the second applicative, where the possible quantity of functions/arguments depends on the type `m`.","For example, an `Option[a -> b]` can be `None`, or contain a function of type `a -> b`, and only in the","latter case a function is applied. A `List[a -> b]` is an applicative that contains a list of functions,","which are all to be applied to all arguments contained in the arguments list.","","A minimal implementation must define `point` and at least one of `ap` and `liftA2` (if `liftA2` is implemented,","`ap` can be defined based on `liftA2` as shown below). If both `ap` and `liftA2` are defined,","they must be equivalent to their default definitions:","`ap(f: m[a -> b & e], x: m[a]): m[b] \\ ef = liftA2(identity, f, x)`","`liftA2(f: a -> b -> c & e, x: m[a], y: m[b]): m[c] \\ ef = ap(Functor.map(f, x), y)`"],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"ap",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":46,
            "endLine":46
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"m[a -> b & ef \\ ef']"
        },{
          "name":"x",
          "tpe":"m[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":46,
          "endLine":53
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"point",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":41,
            "endLine":41
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"m[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":41,
          "endLine":46
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"liftA2",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":53,
            "endLine":53
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"t1",
          "kind":"Type"
        },{
          "name":"t2",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"r",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"t1 -> (t2 -> r & ef \\ ef')"
        },{
          "name":"x1",
          "tpe":"m[t1]"
        },{
          "name":"x2",
          "tpe":"m[t2]"
        }],
        "tpe":"m[r]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":53,
          "endLine":53
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"liftA3",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":60,
            "endLine":60
          }
        },
        "doc":["Lift a ternary function to work on `Applicative`s.","Instances can define more efficient implementations than the default implementation","(which is `Applicative.ap(Applicative.liftA2(f, x1, x2), x3)`)."],
        "mod":["public"],
        "tparams":[{
          "name":"t1",
          "kind":"Type"
        },{
          "name":"t2",
          "kind":"Type"
        },{
          "name":"t3",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"r",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"t1 -> (t2 -> (t3 -> r & ef \\ ef'))"
        },{
          "name":"x1",
          "tpe":"m[t1]"
        },{
          "name":"x2",
          "tpe":"m[t2]"
        },{
          "name":"x3",
          "tpe":"m[t3]"
        }],
        "tpe":"m[r]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":60,
          "endLine":60
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"liftA4",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":67,
            "endLine":67
          }
        },
        "doc":["Lift a 4-ary function to work on `Applicative`s.","Instances can define more efficient implementations than the default implementation","(which is `Applicative.ap(Applicative.liftA3(f, x1, x2, x3), x4)`)."],
        "mod":["public"],
        "tparams":[{
          "name":"t1",
          "kind":"Type"
        },{
          "name":"t2",
          "kind":"Type"
        },{
          "name":"t3",
          "kind":"Type"
        },{
          "name":"t4",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"r",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"t1 -> (t2 -> (t3 -> (t4 -> r & ef \\ ef')))"
        },{
          "name":"x1",
          "tpe":"m[t1]"
        },{
          "name":"x2",
          "tpe":"m[t2]"
        },{
          "name":"x3",
          "tpe":"m[t3]"
        },{
          "name":"x4",
          "tpe":"m[t4]"
        }],
        "tpe":"m[r]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":67,
          "endLine":67
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "name":"liftA5",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":74,
            "endLine":74
          }
        },
        "doc":["Lift a 5-ary function to work on `Applicative`s.","Instances can define more efficient implementations than the default implementation","(which is `Applicative.ap(Applicative.liftA3(f, x1, x2, x3), x4)`)."],
        "mod":["public"],
        "tparams":[{
          "name":"t1",
          "kind":"Type"
        },{
          "name":"t2",
          "kind":"Type"
        },{
          "name":"t3",
          "kind":"Type"
        },{
          "name":"t4",
          "kind":"Type"
        },{
          "name":"t5",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"r",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> r & ef \\ ef'))))"
        },{
          "name":"x1",
          "tpe":"m[t1]"
        },{
          "name":"x2",
          "tpe":"m[t2]"
        },{
          "name":"x3",
          "tpe":"m[t3]"
        },{
          "name":"x4",
          "tpe":"m[t4]"
        },{
          "name":"x5",
          "tpe":"m[t5]"
        }],
        "tpe":"m[r]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Applicative.flix",
          "beginLine":74,
          "endLine":74
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":48,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":89,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":40,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":67,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":69,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":57,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":68,
          "endLine":78
        }
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":37,
        "endLine":123
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseAnd",
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise and."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseAnd",
            "loc":{
              "name":"BitwiseAnd.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"and",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseAnd",
            "loc":{
              "name":"BitwiseAnd.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseAnd",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseAnd",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseAnd",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseAnd",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseAnd",
          "loc":{
            "name":"BitwiseAnd.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseAnd.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseAnd.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseNot",
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise not."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseNot",
            "loc":{
              "name":"BitwiseNot.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"not",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseNot",
            "loc":{
              "name":"BitwiseNot.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseNot",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseNot",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseNot",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseNot",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseNot",
          "loc":{
            "name":"BitwiseNot.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseNot.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseNot.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseOr",
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise or."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseOr",
            "loc":{
              "name":"BitwiseOr.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"or",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseOr",
            "loc":{
              "name":"BitwiseOr.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseOr",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseOr",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseOr",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseOr",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseOr",
          "loc":{
            "name":"BitwiseOr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseOr.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseOr.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseShl",
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise left shift."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseShl",
            "loc":{
              "name":"BitwiseShl.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"shl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"Int32"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseShl",
            "loc":{
              "name":"BitwiseShl.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseShl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShl",
          "loc":{
            "name":"BitwiseShl.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseShl.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseShl.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseShr",
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise right shift."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseShr",
            "loc":{
              "name":"BitwiseShr.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"shr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"Int32"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseShr",
            "loc":{
              "name":"BitwiseShr.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseShr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseShr",
          "loc":{
            "name":"BitwiseShr.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseShr.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseShr.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"BitwiseXor",
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for bitwise xor."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"BitwiseXor",
            "loc":{
              "name":"BitwiseXor.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"xor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"BitwiseXor",
            "loc":{
              "name":"BitwiseXor.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"BitwiseXor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseXor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseXor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseXor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"BitwiseXor",
          "loc":{
            "name":"BitwiseXor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"BitwiseXor.flix",
          "beginLine":43,
          "endLine":45
        }
      }],
      "loc":{
        "name":"BitwiseXor.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be boxed."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "sigs":[],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"box",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"Boxed",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":25,
          "endLine":29
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"unbox",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":34,
            "endLine":34
          }
        },
        "doc":["Unboxes the given `x`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"Boxed"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":34,
          "endLine":37
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":133,
          "endLine":140
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":142,
          "endLine":148
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":150,
          "endLine":156
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":158,
          "endLine":164
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":166,
          "endLine":172
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":174,
          "endLine":180
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":182,
          "endLine":188
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":190,
          "endLine":196
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":198,
          "endLine":204
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":206,
          "endLine":208
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":208,
          "endLine":210
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":210,
          "endLine":212
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":212,
          "endLine":212
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":214,
          "endLine":214
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":216,
          "endLine":216
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":218,
          "endLine":218
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":220,
          "endLine":220
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":222,
          "endLine":222
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":224,
          "endLine":224
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":226,
          "endLine":226
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":228,
          "endLine":228
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j, k)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":230,
          "endLine":230
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j, k, l)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"l"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":232,
          "endLine":232
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j, k, l, m)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"l"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":234,
          "endLine":234
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j, k, l, m, n)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"l"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"n"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":236,
          "endLine":236
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"c"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"d"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"f"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"g"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"h"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"i"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"j"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"l"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"n"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"o"
        }],
        "loc":{
          "name":"Boxable.flix",
          "beginLine":238,
          "endLine":238
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":74,
          "endLine":74
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"FileType",
        "tcs":[],
        "loc":{
          "name":"File.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"VarSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/VarSym.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":28,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":42,
          "endLine":42
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":30,
          "endLine":30
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":28,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Boxable",
            "loc":{
              "name":"Boxable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Boxable.flix",
        "beginLine":20,
        "endLine":39
      }
    },{
      "sym":{
        "namespace":[],
        "name":"CommutativeGroup",
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "doc":["A type class for types that form a commutative group (abelian group)","i.e. groups where the `combine` function is commutative.","","The default instances for number define the additive inverse in the real numbers."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "sigs":[],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":25,
          "endLine":27
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":29,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":33,
          "endLine":35
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":37,
          "endLine":39
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":41,
          "endLine":43
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":43,
          "endLine":43
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":45,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":47,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":49,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":51,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":53,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":55,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":57,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeGroup",
          "loc":{
            "name":"CommutativeGroup.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeGroup",
            "loc":{
              "name":"CommutativeGroup.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"CommutativeGroup.flix",
          "beginLine":59,
          "endLine":59
        }
      }],
      "loc":{
        "name":"CommutativeGroup.flix",
        "beginLine":23,
        "endLine":23
      }
    },{
      "sym":{
        "namespace":[],
        "name":"CommutativeMonoid",
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that form a commutative monoid."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "sigs":[],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"combine",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":30,
            "endLine":30
          }
        },
        "doc":["An associative & commutative binary operation on `a`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":30,
          "endLine":31
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"empty",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":25,
          "endLine":25
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":42,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":44,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":46,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":48,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":50,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":52,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":54,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":56,
          "endLine":58
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":58,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":60,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":62,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":64,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":66,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":68,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":70,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":72,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":74,
          "endLine":74
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":76,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":89,
          "endLine":89
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":76,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":151,
          "endLine":151
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Any",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":151,
          "endLine":154
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"All",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":167,
          "endLine":169
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeMonoid",
          "loc":{
            "name":"CommutativeMonoid.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":93,
          "endLine":93
        }
      }],
      "loc":{
        "name":"CommutativeMonoid.flix",
        "beginLine":20,
        "endLine":41
      }
    },{
      "sym":{
        "namespace":[],
        "name":"CommutativeSemiGroup",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that form a commutative semigroup."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "sigs":[],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"combine",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":25,
          "endLine":25
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":38,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":40,
          "endLine":42
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":42,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":44,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":46,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":48,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":50,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":52,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":54,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":56,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":58,
          "endLine":58
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":60,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":62,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":64,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":66,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":68,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":70,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":72,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":83,
          "endLine":83
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":70,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"CommutativeSemiGroup",
            "loc":{
              "name":"CommutativeSemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":145,
          "endLine":145
        }
      },{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":87,
          "endLine":87
        }
      }],
      "loc":{
        "name":"CommutativeSemiGroup.flix",
        "beginLine":20,
        "endLine":31
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Div",
        "loc":{
          "name":"Div.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for division."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Div",
            "loc":{
              "name":"Div.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"div",
          "loc":{
            "name":"Div.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Div",
            "loc":{
              "name":"Div.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Div.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":39,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":47,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":55,
          "endLine":61
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":63,
          "endLine":69
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":71,
          "endLine":77
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Div.flix",
          "beginLine":79,
          "endLine":83
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Div",
          "loc":{
            "name":"Div.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Div",
            "loc":{
              "name":"Div.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":124,
          "endLine":129
        }
      }],
      "loc":{
        "name":"Div.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":27,
          "endLine":32
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"neq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":32,
            "endLine":32
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":32,
          "endLine":32
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Shape",
        "tcs":[],
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":1,
          "endLine":1
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"GameResult",
        "tcs":[],
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":5,
          "endLine":5
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Boxed",
        "tcs":[],
        "loc":{
          "name":"Boxed.flix",
          "beginLine":35,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Chain[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Chain.flix",
          "beginLine":32,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"ViewLeft[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Chain.flix",
          "beginLine":116,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"ViewRight[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Chain.flix",
          "beginLine":124,
          "endLine":124
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Comparison",
        "tcs":[],
        "loc":{
          "name":"Comparison.flix",
          "beginLine":17,
          "endLine":17
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":24,
          "endLine":36
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"DelayMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":23,
          "endLine":26
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":24,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":55,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":59,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":64,
          "endLine":67
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":69,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":74,
          "endLine":77
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":79,
          "endLine":82
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":84,
          "endLine":87
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":89,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":94,
          "endLine":97
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":99,
          "endLine":102
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":104,
          "endLine":107
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Eq.flix",
          "beginLine":109,
          "endLine":112
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":114,
          "endLine":121
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":123,
          "endLine":130
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":132,
          "endLine":139
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":141,
          "endLine":148
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":150,
          "endLine":157
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":159,
          "endLine":166
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":168,
          "endLine":174
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":176,
          "endLine":183
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":185,
          "endLine":192
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":194,
          "endLine":201
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":203,
          "endLine":210
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":212,
          "endLine":219
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a14"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":221,
          "endLine":228
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a14"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a15"
        }],
        "loc":{
          "name":"Eq.flix",
          "beginLine":230,
          "endLine":237
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"FileType",
        "tcs":[],
        "loc":{
          "name":"File.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"PrecedenceEdge",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/PrecedenceGraph.flix",
          "beginLine":25,
          "endLine":25
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"VarSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/VarSym.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"RamSym[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamSym.flix",
          "beginLine":32,
          "endLine":39
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"RowVar",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RowVar.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"PredSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Shared/PredSym.flix",
          "beginLine":19,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Tuple[v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":27,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":39,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":28,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":43,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nec[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"ViewLeft[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":149,
          "endLine":149
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"ViewRight[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":157,
          "endLine":157
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":36,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":54,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":30,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Eq.flix",
        "beginLine":22,
        "endLine":53
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Exp",
        "loc":{
          "name":"Exp.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for exponentiation."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Exp",
            "loc":{
              "name":"Exp.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"b",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Exp",
            "loc":{
              "name":"Exp.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Exp.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Exp",
          "loc":{
            "name":"Exp.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Exp.flix",
          "beginLine":51,
          "endLine":53
        }
      }],
      "loc":{
        "name":"Exp.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for filtering container functors."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Filterable",
            "loc":{
              "name":"Filterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"filterMap",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Option[b] & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"m[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Filterable",
            "loc":{
              "name":"Filterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Filterable.flix",
          "beginLine":25,
          "endLine":30
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Filterable",
            "loc":{
              "name":"Filterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"filter",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":30,
            "endLine":30
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"m[a]"
        }],
        "tpe":"m[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Filterable",
            "loc":{
              "name":"Filterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Filterable.flix",
          "beginLine":30,
          "endLine":30
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":88,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":107,
          "endLine":110
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":107,
          "endLine":110
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":72,
          "endLine":75
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":130,
          "endLine":133
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":86,
          "endLine":89
        }
      }],
      "loc":{
        "name":"Filterable.flix",
        "beginLine":20,
        "endLine":32
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for data structures that can be folded."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldLeft",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":26,
            "endLine":26
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"b",
          "kind":"Type"
        },{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"b -> (a -> b & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":26,
          "endLine":32
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldRight",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":32,
            "endLine":32
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> b & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":32,
          "endLine":40
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldRightWithCont",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":40,
            "endLine":40
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":40,
          "endLine":45
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"count",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":45,
            "endLine":45
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":45,
          "endLine":46
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"dropWhile",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":313,
            "endLine":313
          }
        },
        "doc":["Returns `t` without the longest prefix that satisfies the predicate `f`.","","Returns an immutable list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":313,
          "endLine":318
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"enumerator",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":238,
            "endLine":238
          }
        },
        "doc":["Returns an iterator over `t` zipped with the indices of the elements."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Iterator[(a, Int32), r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":238,
          "endLine":239
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"exists",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":83,
            "endLine":83
          }
        },
        "doc":["Returns `true` if and only if at least one element in `t` satisfies the predicate `f`.","","Returns `false` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":83,
          "endLine":84
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"filter",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":331,
            "endLine":331
          }
        },
        "doc":["Returns an immutable list of all the elements in `t` that satisfy the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":331,
          "endLine":332
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"findLeft",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":115,
            "endLine":115
          }
        },
        "doc":["Optionally returns the first element of `t` that satisfies the predicate `f` when searching from left to right.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":115,
          "endLine":116
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"findRight",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":123,
            "endLine":123
          }
        },
        "doc":["Optionally returns the first element of `t` that satisfies the predicate `f` when searching from right to left.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":123,
          "endLine":124
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldLeftM",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":352,
            "endLine":352
          }
        },
        "doc":["A monadic version of `foldLeft`.","","Applies the monadic `f` to a start value `s` and all elements in `t` going","from left to right."],
        "mod":["public"],
        "tparams":[{
          "name":"b",
          "kind":"Type"
        },{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"m",
          "kind":"Type -> Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"b -> (a -> m[b] & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Monad",
            "loc":{
              "name":"Monad.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":352,
          "endLine":354
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldMap",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":129,
            "endLine":129
          }
        },
        "doc":["Returns the result of mapping each element and combining the results."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> b & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"b"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":129,
          "endLine":130
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldRightM",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":362,
            "endLine":362
          }
        },
        "doc":["A monadic version of `foldRight`.","","Applies the monadic `f` to a start value `s` and all elements in `t` going","from right to left."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"m",
          "kind":"Type -> Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> m[b] & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Monad",
            "loc":{
              "name":"Monad.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":362,
          "endLine":364
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"forAll",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":91,
            "endLine":91
          }
        },
        "doc":["Returns `true` if and only if all elements in `t` satisfy the predicate `f`.","","Returns `true` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":91,
          "endLine":92
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"forEach",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":337,
            "endLine":337
          }
        },
        "doc":["Applies `f` to each element in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Unit & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Unit",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":337,
          "endLine":338
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"forEachM",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":372,
            "endLine":372
          }
        },
        "doc":["A monadic version of `forEach`.","","Apply `f` to every value in `t`. `f` is applied for its monadic effect,","the answer it produces is discarded."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"m",
          "kind":"Type -> Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> m[b] & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"m[Unit]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Monad",
            "loc":{
              "name":"Monad.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":372,
          "endLine":374
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"head",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":99,
            "endLine":99
          }
        },
        "doc":["Optionally returns the first element of `t`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":99,
          "endLine":100
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"isEmpty",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":135,
            "endLine":135
          }
        },
        "doc":["Returns true if and only if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":135,
          "endLine":136
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"iterator",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":222,
            "endLine":222
          }
        },
        "doc":["Returns an iterator over `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Iterator[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":222,
          "endLine":233
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"join",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":380,
            "endLine":380
          }
        },
        "doc":["Returns the concatenation of the string representation","of each element in `t` with `sep` inserted between each element."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"sep",
          "tpe":"String"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"String",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":380,
          "endLine":381
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"joinWith",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":387,
            "endLine":387
          }
        },
        "doc":["Returns the concatenation of the string representation","of each element in `t` according to `f` with `sep` inserted between each element."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> String & ef \\ ef'"
        },{
          "name":"sep",
          "tpe":"String"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"String",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":387,
          "endLine":393
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"last",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":107,
            "endLine":107
          }
        },
        "doc":["Optionally returns the last element of `t`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":107,
          "endLine":108
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"maximum",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":165,
            "endLine":165
          }
        },
        "doc":["Optionally finds the largest element of `t` according to the `Order` on `a`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":165,
          "endLine":166
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"maximumBy",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":173,
            "endLine":173
          }
        },
        "doc":["Optionally finds the largest element of `t` according to the given comparator `cmp`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"cmp",
          "tpe":"a -> (a -> Comparison)"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":173,
          "endLine":174
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"memberOf",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":141,
            "endLine":141
          }
        },
        "doc":["Returns `true` if and only if the element `x` is in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":141,
          "endLine":142
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"minimum",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":149,
            "endLine":149
          }
        },
        "doc":["Optionally finds the smallest element of `t` according to the `Order` on `a`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":149,
          "endLine":150
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"minimumBy",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":157,
            "endLine":157
          }
        },
        "doc":["Optionally finds the smallest element of `t` according to the given comparator `cmp`.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"cmp",
          "tpe":"a -> (a -> Comparison)"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":157,
          "endLine":158
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"product",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":63,
            "endLine":63
          }
        },
        "doc":["Returns the product of all elements in `t`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"t",
          "tpe":"t[Int32]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":63,
          "endLine":67
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"productWith",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":72,
            "endLine":72
          }
        },
        "doc":["Returns the product of all elements in `t` according to the function `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Int32 & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":72,
          "endLine":76
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"reduceLeft",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":181,
            "endLine":181
          }
        },
        "doc":["Optionally applies `f` to all elements in `t` going from left to right until a single value is obtained.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (a -> a & ef \\ ef')"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":181,
          "endLine":182
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"reduceRight",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":189,
            "endLine":189
          }
        },
        "doc":["Optionally applies `f` to all elements in `t` going from right to left until a single value is obtained.","","Returns `None` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (a -> a & ef \\ ef')"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":189,
          "endLine":190
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"sum",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":51,
            "endLine":51
          }
        },
        "doc":["Returns the sum of all elements in `t`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"t",
          "tpe":"t[Int32]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":51,
          "endLine":52
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"sumWith",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":57,
            "endLine":57
          }
        },
        "doc":["Returns the sum of all elements in `t` according to the function `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Int32 & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":57,
          "endLine":58
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"takeWhile",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":325,
            "endLine":325
          }
        },
        "doc":["Returns the longest prefix of `t` that satisfies the predicate `f`.","","Returns an immutable list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":325,
          "endLine":326
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toArray",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":213,
            "endLine":213
          }
        },
        "doc":["Returns `t` as an array."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Array[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":213,
          "endLine":217
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toChain",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":195,
            "endLine":195
          }
        },
        "doc":["Returns `t` as a chain."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Chain[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":195,
          "endLine":196
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toDelayList",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":201,
            "endLine":201
          }
        },
        "doc":["Returns `t` as a `DelayList`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"DelayList[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":201,
          "endLine":202
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toDelayMap",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":285,
            "endLine":285
          }
        },
        "doc":["Returns `t` as a `DelayMap`"],
        "mod":["public"],
        "tparams":[{
          "name":"k",
          "kind":"Type"
        },{
          "name":"v",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[(k, v)]"
        }],
        "tpe":"DelayMap[k, v]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":285,
          "endLine":286
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toList",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":207,
            "endLine":207
          }
        },
        "doc":["Returns `t` as an immutable list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":207,
          "endLine":208
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMap",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":273,
            "endLine":273
          }
        },
        "doc":["Returns `t` as a map."],
        "mod":["public"],
        "tparams":[{
          "name":"k",
          "kind":"Type"
        },{
          "name":"v",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[(k, v)]"
        }],
        "tpe":"Map[k, v]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":273,
          "endLine":274
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMapWith",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":279,
            "endLine":279
          }
        },
        "doc":["Returns a map with elements of `s` as keys and `f` applied as values."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> b"
        },{
          "name":"s",
          "tpe":"t[a]"
        }],
        "tpe":"Map[a, b]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":279,
          "endLine":280
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMutDeque",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":244,
            "endLine":244
          }
        },
        "doc":["Returns `t` as a `MutDeque`."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"MutDeque[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":244,
          "endLine":247
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMutList",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":252,
            "endLine":252
          }
        },
        "doc":["Returns `t` as a mutable list."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"MutList[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":252,
          "endLine":254
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMutMap",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":291,
            "endLine":291
          }
        },
        "doc":["Returns `t` as a `MutMap`."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"k",
          "kind":"Type"
        },{
          "name":"v",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[(k, v)]"
        }],
        "tpe":"MutMap[k, v, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":291,
          "endLine":294
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toMutSet",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":265,
            "endLine":265
          }
        },
        "doc":["Returns the set `s` as a `MutSet`."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"MutSet[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":265,
          "endLine":268
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toNec",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":299,
            "endLine":299
          }
        },
        "doc":["Optionally returns `t` as a non empty chain."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[Nec[a]]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":299,
          "endLine":300
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toNel",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":305,
            "endLine":305
          }
        },
        "doc":["Optionally returns `t` as a non empty list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[Nel[a]]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":305,
          "endLine":306
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toSet",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":259,
            "endLine":259
          }
        },
        "doc":["Returns `t` as a set."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Set[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Foldable",
            "loc":{
              "name":"Foldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Foldable.flix",
          "beginLine":259,
          "endLine":260
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":68,
          "endLine":73
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":70,
          "endLine":75
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayMap[k]",
        "tcs":[],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":41,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":73,
          "endLine":85
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":87,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[],
        "loc":{
          "name":"Map.flix",
          "beginLine":53,
          "endLine":58
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k]",
        "tcs":[],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":53,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":85,
          "endLine":90
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":73,
          "endLine":78
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":100,
          "endLine":105
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":63,
          "endLine":69
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set",
        "tcs":[],
        "loc":{
          "name":"Set.flix",
          "beginLine":66,
          "endLine":71
        }
      }],
      "loc":{
        "name":"Foldable.flix",
        "beginLine":20,
        "endLine":395
      }
    },{
      "sym":{
        "namespace":[],
        "name":"FromString",
        "loc":{
          "name":"FromString.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be constructed from strings."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"FromString",
            "loc":{
              "name":"FromString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"fromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"String"
        }],
        "tpe":"Option[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"FromString",
            "loc":{
              "name":"FromString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"FromString.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":27,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":34,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":42,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":50,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":54,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":58,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":62,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":66,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":70,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":74,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":78,
          "endLine":80
        }
      },{
        "sym":{
          "namespace":[],
          "name":"FromString",
          "loc":{
            "name":"FromString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"FromString.flix",
          "beginLine":82,
          "endLine":84
        }
      }],
      "loc":{
        "name":"FromString.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be mapped over."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Functor",
            "loc":{
              "name":"Functor.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"map",
          "loc":{
            "name":"Functor.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> b & ef \\ ef'"
        },{
          "name":"x",
          "tpe":"m[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Functor",
            "loc":{
              "name":"Functor.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Functor.flix",
          "beginLine":24,
          "endLine":29
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":44,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":85,
          "endLine":87
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayMap[k]",
        "tcs":[],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":37,
          "endLine":39
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":34,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":63,
          "endLine":65
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[],
        "loc":{
          "name":"Map.flix",
          "beginLine":49,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":65,
          "endLine":67
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":53,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":64,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":59,
          "endLine":61
        }
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":20,
        "endLine":36
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Group",
        "loc":{
          "name":"Group.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":["A type class for types that form a group.","","The default instances for numbers define the additive inverse in the real numbers."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"inverse",
          "loc":{
            "name":"Group.flix",
            "beginLine":33,
            "endLine":33
          }
        },
        "doc":["Returns the inverse element of `x`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":33,
          "endLine":38
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"combine",
          "loc":{
            "name":"Group.flix",
            "beginLine":38,
            "endLine":38
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":38,
          "endLine":39
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"empty",
          "loc":{
            "name":"Group.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":27,
          "endLine":28
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"remove",
          "loc":{
            "name":"Group.flix",
            "beginLine":46,
            "endLine":46
          }
        },
        "doc":["Returns `y` removed from `x`.","","Equivalent to `Group.combine(x, Group.inverse(y))`"],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":46,
          "endLine":47
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":69,
          "endLine":71
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":73,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":78,
          "endLine":81
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":83,
          "endLine":86
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":88,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":93,
          "endLine":96
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":98,
          "endLine":101
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":103,
          "endLine":106
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Group.flix",
          "beginLine":108,
          "endLine":111
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":113,
          "endLine":117
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":119,
          "endLine":123
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":125,
          "endLine":129
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":131,
          "endLine":135
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":137,
          "endLine":141
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":143,
          "endLine":147
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":149,
          "endLine":153
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":155,
          "endLine":159
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Group",
          "loc":{
            "name":"Group.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Group",
            "loc":{
              "name":"Group.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Group.flix",
          "beginLine":161,
          "endLine":165
        }
      }],
      "loc":{
        "name":"Group.flix",
        "beginLine":22,
        "endLine":67
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be hashed."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":24,
          "endLine":27
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":29,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":33,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":40,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":46,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":52,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":58,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":64,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":70,
          "endLine":74
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":76,
          "endLine":80
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":82,
          "endLine":86
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":88,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Hash.flix",
          "beginLine":94,
          "endLine":98
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":100,
          "endLine":104
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":106,
          "endLine":110
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":112,
          "endLine":117
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":119,
          "endLine":125
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":127,
          "endLine":133
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":135,
          "endLine":141
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":143,
          "endLine":149
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":151,
          "endLine":158
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Hash.flix",
          "beginLine":160,
          "endLine":167
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":34,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":44,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":36,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":57,
          "endLine":59
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":30,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":57,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":29,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":41,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Hash",
          "loc":{
            "name":"Hash.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Hash",
            "loc":{
              "name":"Hash.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":25,
          "endLine":30
        }
      }],
      "loc":{
        "name":"Hash.flix",
        "beginLine":20,
        "endLine":27
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Iterable",
        "loc":{
          "name":"Iterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for mutable data structures that can be iterated."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Bool -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Iterable",
            "loc":{
              "name":"Iterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"iterator",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"r",
          "kind":"Bool"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a, r]"
        }],
        "tpe":"Iterator[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Iterable",
            "loc":{
              "name":"Iterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Iterable.flix",
          "beginLine":25,
          "endLine":30
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Iterable",
            "loc":{
              "name":"Iterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"enumerator",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":30,
            "endLine":30
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"r",
          "kind":"Bool"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a, r]"
        }],
        "tpe":"Iterator[(a, Int32), r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Iterable",
            "loc":{
              "name":"Iterable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Iterable.flix",
          "beginLine":30,
          "endLine":31
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Iterable",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Array",
        "tcs":[],
        "loc":{
          "name":"Array.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Iterable",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Iterator",
        "tcs":[],
        "loc":{
          "name":"Iterator.flix",
          "beginLine":29,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Iterable",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutDeque",
        "tcs":[],
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":42,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Iterable",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutList",
        "tcs":[],
        "loc":{
          "name":"MutList.flix",
          "beginLine":36,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Iterable",
          "loc":{
            "name":"Iterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutSet",
        "tcs":[],
        "loc":{
          "name":"MutSet.flix",
          "beginLine":30,
          "endLine":32
        }
      }],
      "loc":{
        "name":"Iterable.flix",
        "beginLine":20,
        "endLine":33
      }
    },{
      "sym":{
        "namespace":[],
        "name":"JoinLattice",
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "name":"leastUpperBound",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":28,
            "endLine":28
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":28,
          "endLine":34
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":56,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":48,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":52,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":56,
          "endLine":58
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":60,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":64,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":68,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":78,
          "endLine":88
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":90,
          "endLine":101
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":103,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":118,
          "endLine":132
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":134,
          "endLine":150
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":152,
          "endLine":169
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":171,
          "endLine":190
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":192,
          "endLine":212
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        },{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":99,
          "endLine":102
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":41,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"JoinLattice",
          "loc":{
            "name":"JoinLattice.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":58,
          "endLine":60
        }
      }],
      "loc":{
        "name":"JoinLattice.flix",
        "beginLine":23,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":[],
        "name":"LowerBound",
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for partially ordered types that have a lower bound."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"minValue",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Bool.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Char.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":48,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Float32.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Float64.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Int16.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Int32.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Int64.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Int8.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":55,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":59,
          "endLine":61
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":63,
          "endLine":65
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[],
        "loc":{
          "name":"Map.flix",
          "beginLine":91,
          "endLine":93
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":29,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"LowerBound",
          "loc":{
            "name":"LowerBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[],
        "loc":{
          "name":"Set.flix",
          "beginLine":50,
          "endLine":52
        }
      }],
      "loc":{
        "name":"LowerBound.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"MeetLattice",
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "name":"greatestLowerBound",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":29,
            "endLine":29
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":29,
          "endLine":35
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"JoinLattice",
            "loc":{
              "name":"JoinLattice.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":62,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":104,
          "endLine":107
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":49,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":53,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":57,
          "endLine":59
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":61,
          "endLine":63
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":65,
          "endLine":67
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":69,
          "endLine":77
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":79,
          "endLine":89
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":91,
          "endLine":102
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":104,
          "endLine":117
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":119,
          "endLine":133
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":135,
          "endLine":151
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":153,
          "endLine":170
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":172,
          "endLine":191
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":193,
          "endLine":213
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MeetLattice",
            "loc":{
              "name":"MeetLattice.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":49,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MeetLattice",
          "loc":{
            "name":"MeetLattice.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":62,
          "endLine":64
        }
      }],
      "loc":{
        "name":"MeetLattice.flix",
        "beginLine":24,
        "endLine":47
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Mod",
        "loc":{
          "name":"Mod.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for Euclidean modulo."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Mod",
            "loc":{
              "name":"Mod.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Mod",
            "loc":{
              "name":"Mod.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Mod.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Mod.flix",
          "beginLine":27,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Mod.flix",
          "beginLine":35,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Mod.flix",
          "beginLine":43,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Mod.flix",
          "beginLine":51,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mod",
          "loc":{
            "name":"Mod.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Mod.flix",
          "beginLine":59,
          "endLine":65
        }
      }],
      "loc":{
        "name":"Mod.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "doc":["A type class for applicatives that support monadic bind (`flatMap`), i.e., allow to apply a function","that takes a normal value and produces a monadic value to a monadic value. That is, the bind mechanism","supports extraction of monadic values, or, viewed differently, allows to combine (flatten) nested","monadic values (`flapMap` can be understood as a `Functor.map` followed by a `flatten`)."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Monad",
            "loc":{
              "name":"Monad.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "name":"flatMap",
          "loc":{
            "name":"Monad.flix",
            "beginLine":28,
            "endLine":28
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> m[b] & ef \\ ef'"
        },{
          "name":"x",
          "tpe":"m[a]"
        }],
        "tpe":"m[b]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monad",
            "loc":{
              "name":"Monad.flix",
              "beginLine":23,
              "endLine":23
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Monad.flix",
          "beginLine":28,
          "endLine":33
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":53,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":94,
          "endLine":96
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":50,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":72,
          "endLine":74
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":74,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":62,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":80,
          "endLine":82
        }
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":23,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":[],
        "name":"MonadZero",
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for Monads that have a zero element."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MonadZero",
            "loc":{
              "name":"MonadZero.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"empty",
          "loc":{
            "name":"MonadZero.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"t",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"m[t]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MonadZero",
            "loc":{
              "name":"MonadZero.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":25,
          "endLine":27
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"MonadZero",
          "loc":{
            "name":"MonadZero.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":57,
          "endLine":59
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZero",
          "loc":{
            "name":"MonadZero.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":98,
          "endLine":100
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZero",
          "loc":{
            "name":"MonadZero.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":76,
          "endLine":78
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZero",
          "loc":{
            "name":"MonadZero.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":84,
          "endLine":86
        }
      }],
      "loc":{
        "name":"MonadZero.flix",
        "beginLine":20,
        "endLine":27
      }
    },{
      "sym":{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":["A type class for zipping Monads, typically container monads like `List`.","","A minimal implementation must define `zipWith` and `zipWithA`."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"m",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"zipWith",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":28,
            "endLine":28
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"c",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> c & ef \\ ef')"
        },{
          "name":"ma",
          "tpe":"m[a]"
        },{
          "name":"mb",
          "tpe":"m[b]"
        }],
        "tpe":"m[c]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":28,
          "endLine":34
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"zipWithA",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":46,
            "endLine":46
          }
        },
        "doc":["Generalized version of `zipWith` where `f` zips an applicative functor across the","(monadic) containers `ma` and `mb`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"f",
          "kind":"Type -> Type"
        },{
          "name":"c",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> f[c] & ef \\ ef')"
        },{
          "name":"ma",
          "tpe":"m[a]"
        },{
          "name":"mb",
          "tpe":"m[b]"
        }],
        "tpe":"f[m[c]]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"m"
        },{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"f"
        }],
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":46,
          "endLine":46
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"unzip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":40,
            "endLine":40
          }
        },
        "doc":["Returns a pair of monads, the first containing the element (or elements) of the left part of `mx`","the second containing the element (or elements) of the right part of `mx`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"mx",
          "tpe":"m[(a, b)]"
        }],
        "tpe":"(m[a], m[b])",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":40,
          "endLine":40
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"zip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":34,
            "endLine":34
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"ma",
          "tpe":"m[a]"
        },{
          "name":"mb",
          "tpe":"m[b]"
        }],
        "tpe":"m[(a, b)]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"MonadZip",
            "loc":{
              "name":"MonadZip.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":34,
          "endLine":34
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":61,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":56,
          "endLine":71
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":80,
          "endLine":85
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":78,
          "endLine":83
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":66,
          "endLine":71
        }
      },{
        "sym":{
          "namespace":[],
          "name":"MonadZip",
          "loc":{
            "name":"MonadZip.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":88,
          "endLine":98
        }
      }],
      "loc":{
        "name":"MonadZip.flix",
        "beginLine":22,
        "endLine":48
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "doc":["A type class for Monoids, objects that support an associative binary","operation `combine` and neutral element `empty`."],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"empty",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":25,
          "endLine":30
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"combine",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":30,
            "endLine":30
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":30,
          "endLine":31
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Chain[a]",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":40,
          "endLine":42
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":118,
          "endLine":120
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"PrecedenceGraph",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/PrecedenceGraph.flix",
          "beginLine":30,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":30,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":118,
          "endLine":120
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":85,
          "endLine":87
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":50,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":54,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":58,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":62,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":66,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":70,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":74,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":78,
          "endLine":80
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":82,
          "endLine":84
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":86,
          "endLine":88
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":90,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":94,
          "endLine":96
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":98,
          "endLine":100
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":102,
          "endLine":104
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":106,
          "endLine":108
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":110,
          "endLine":112
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":114,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":118,
          "endLine":120
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Monoid.flix",
          "beginLine":122,
          "endLine":124
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":72,
          "endLine":74
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Option[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":147,
          "endLine":149
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Any",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":147,
          "endLine":149
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"All",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":163,
          "endLine":165
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":89,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Monoid",
            "loc":{
              "name":"Monoid.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":41,
          "endLine":43
        }
      }],
      "loc":{
        "name":"Monoid.flix",
        "beginLine":21,
        "endLine":39
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Mul",
        "loc":{
          "name":"Mul.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for multiplication."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Mul",
            "loc":{
              "name":"Mul.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Mul",
            "loc":{
              "name":"Mul.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Mul.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Mul",
            "loc":{
              "name":"Mul.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":117,
          "endLine":122
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Mul",
          "loc":{
            "name":"Mul.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Mul.flix",
          "beginLine":55,
          "endLine":57
        }
      }],
      "loc":{
        "name":"Mul.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Neg",
        "loc":{
          "name":"Neg.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for negation."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Neg",
            "loc":{
              "name":"Neg.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Neg",
            "loc":{
              "name":"Neg.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Neg.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Neg",
            "loc":{
              "name":"Neg.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":131,
          "endLine":133
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Neg",
          "loc":{
            "name":"Neg.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Neg.flix",
          "beginLine":55,
          "endLine":57
        }
      }],
      "loc":{
        "name":"Neg.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be allocated in a region."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"n",
        "kind":"Bool -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Newable",
            "loc":{
              "name":"Newable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"new",
          "loc":{
            "name":"Newable.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        }],
        "tpe":"n[r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Newable",
            "loc":{
              "name":"Newable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"n"
        }],
        "loc":{
          "name":"Newable.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Iterator[a]",
        "tcs":[],
        "loc":{
          "name":"Iterator.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutDeque[a]",
        "tcs":[],
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":34,
          "endLine":36
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutList[a]",
        "tcs":[],
        "loc":{
          "name":"MutList.flix",
          "beginLine":28,
          "endLine":30
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutMap[k, v]",
        "tcs":[],
        "loc":{
          "name":"MutMap.flix",
          "beginLine":26,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutSet[t]",
        "tcs":[],
        "loc":{
          "name":"MutSet.flix",
          "beginLine":22,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Newable",
          "loc":{
            "name":"Newable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"StringBuilder",
        "tcs":[],
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":22,
          "endLine":24
        }
      }],
      "loc":{
        "name":"Newable.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"compare",
          "loc":{
            "name":"Order.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Comparison",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":27,
          "endLine":32
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"greater",
          "loc":{
            "name":"Order.flix",
            "beginLine":49,
            "endLine":49
          }
        },
        "doc":["Returns `true` if and only if `x > y`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":49,
          "endLine":52
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"greaterEqual",
          "loc":{
            "name":"Order.flix",
            "beginLine":57,
            "endLine":57
          }
        },
        "doc":["Returns `true` if and only if `x >= y`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":57,
          "endLine":61
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"less",
          "loc":{
            "name":"Order.flix",
            "beginLine":32,
            "endLine":32
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":32,
          "endLine":35
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"lessEqual",
          "loc":{
            "name":"Order.flix",
            "beginLine":40,
            "endLine":40
          }
        },
        "doc":["Returns `true` if and only if `x <= y`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":40,
          "endLine":44
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"max",
          "loc":{
            "name":"Order.flix",
            "beginLine":74,
            "endLine":74
          }
        },
        "doc":["Returns the maximum of `x` and `y`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":74,
          "endLine":77
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"min",
          "loc":{
            "name":"Order.flix",
            "beginLine":66,
            "endLine":66
          }
        },
        "doc":["Returns the minimum of `x` and `y`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":66,
          "endLine":69
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Boxed",
        "tcs":[],
        "loc":{
          "name":"Boxed.flix",
          "beginLine":50,
          "endLine":63
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":38,
          "endLine":63
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"DelayMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":28,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":68,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"FileType",
        "tcs":[],
        "loc":{
          "name":"File.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"PrecedenceEdge",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/PrecedenceGraph.flix",
          "beginLine":25,
          "endLine":25
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"VarSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/VarSym.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"RamSym[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamSym.flix",
          "beginLine":41,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"RowVar",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RowVar.flix",
          "beginLine":32,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"PredSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Shared/PredSym.flix",
          "beginLine":19,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Tuple[v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":35,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":47,
          "endLine":61
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":33,
          "endLine":36
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":48,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nec[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":35,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":42,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":155,
          "endLine":159
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":161,
          "endLine":176
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":178,
          "endLine":196
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":198,
          "endLine":216
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":218,
          "endLine":236
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":238,
          "endLine":256
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":258,
          "endLine":276
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":278,
          "endLine":296
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":298,
          "endLine":316
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":318,
          "endLine":336
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":338,
          "endLine":356
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Order.flix",
          "beginLine":358,
          "endLine":364
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":366,
          "endLine":378
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":380,
          "endLine":393
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":395,
          "endLine":409
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":411,
          "endLine":426
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":428,
          "endLine":444
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":446,
          "endLine":463
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":465,
          "endLine":483
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":485,
          "endLine":504
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":506,
          "endLine":526
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":528,
          "endLine":548
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":550,
          "endLine":571
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":573,
          "endLine":595
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a14"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":597,
          "endLine":621
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a14"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a15"
        }],
        "loc":{
          "name":"Order.flix",
          "beginLine":623,
          "endLine":648
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":35,
          "endLine":39
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Order.flix",
        "beginLine":22,
        "endLine":129
      }
    },{
      "sym":{
        "namespace":[],
        "name":"PartialOrder",
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public","lawful"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"lessEqual",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":27,
          "endLine":33
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":42,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":95,
          "endLine":97
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":33,
          "endLine":39
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":41,
          "endLine":43
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":45,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":49,
          "endLine":51
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":53,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":57,
          "endLine":59
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":61,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":70,
          "endLine":79
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":81,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":93,
          "endLine":105
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":107,
          "endLine":120
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":122,
          "endLine":137
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":139,
          "endLine":155
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":157,
          "endLine":175
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"PartialOrder",
            "loc":{
              "name":"PartialOrder.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":177,
          "endLine":196
        }
      },{
        "sym":{
          "namespace":[],
          "name":"PartialOrder",
          "loc":{
            "name":"PartialOrder.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":54,
          "endLine":56
        }
      }],
      "loc":{
        "name":"PartialOrder.flix",
        "beginLine":22,
        "endLine":39
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Reducible",
        "loc":{
          "name":"Reducible.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "doc":["A type class for types that can be reduced to a summary value.","","`Reducible` is like a non-empty `Foldable` and may only be implemented on non-empty data structures."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduceLeftTo",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":29,
            "endLine":29
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"b",
          "kind":"Type"
        },{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef1",
          "kind":"Bool"
        },{
          "name":"ef1",
          "kind":"Effect"
        },{
          "name":"ef2",
          "kind":"Bool"
        },{
          "name":"ef2",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"b -> (a -> b & ef1 \\ ef1')"
        },{
          "name":"g",
          "tpe":"a -> b & ef2 \\ ef2'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef1 and ef2",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":29,
          "endLine":36
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduceRightTo",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":36,
            "endLine":36
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef1",
          "kind":"Bool"
        },{
          "name":"ef1",
          "kind":"Effect"
        },{
          "name":"ef2",
          "kind":"Bool"
        },{
          "name":"ef2",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> b & ef1 \\ ef1')"
        },{
          "name":"g",
          "tpe":"a -> b & ef2 \\ ef2'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef1 and ef2",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":36,
          "endLine":41
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"count",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":127,
            "endLine":127
          }
        },
        "doc":["Returns the number of elements in `t` that satisfy the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":127,
          "endLine":128
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"dropWhile",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":231,
            "endLine":231
          }
        },
        "doc":["Returns `t` as a list without the longest prefix that satisfies the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":231,
          "endLine":238
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"exists",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":163,
            "endLine":163
          }
        },
        "doc":["Returns `true` if and only if at least one element in `t` satisfies the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":163,
          "endLine":164
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"find",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":183,
            "endLine":183
          }
        },
        "doc":["Alias for `findLeft`.","","Optionally returns the first element of `t` that satisfies the predicate `f` when searching from left to right."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":183,
          "endLine":184
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"findLeft",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":189,
            "endLine":189
          }
        },
        "doc":["Optionally returns the first element of `t` that satisfies the predicate `f` when searching from left to right."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":189,
          "endLine":190
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"findRight",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":195,
            "endLine":195
          }
        },
        "doc":["Optionally returns the first element of `t` that satisfies the predicate `f` when searching from right to left."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Option[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":195,
          "endLine":196
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"fold",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":91,
            "endLine":91
          }
        },
        "doc":["Alias for `reduce`.","","Reduce `t` using the derived `SemiGroup` instance."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":91,
          "endLine":92
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"foldLeft",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":66,
            "endLine":66
          }
        },
        "doc":["Left-associative fold of a structure.","Applies `f` to a start value `s` and all elements in `t` going from left to right."],
        "mod":["public"],
        "tparams":[{
          "name":"b",
          "kind":"Type"
        },{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"b -> (a -> b & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":66,
          "endLine":67
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"foldRight",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":73,
            "endLine":73
          }
        },
        "doc":["Right-associative fold of a structure.","Applies `f` to a start value `s` and all elements in `t` going from right to left."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"b",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (b -> b & ef \\ ef')"
        },{
          "name":"s",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":73,
          "endLine":74
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"foldRightWithCont",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":82,
            "endLine":82
          }
        },
        "doc":["Right-associative fold of a structure.","Applies `f` to a start value `s` and all elements in `t` going from right to left.","","A `foldRightWithCont` allows early termination by not calling the continuation."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
        },{
          "name":"z",
          "tpe":"b"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":82,
          "endLine":84
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"forAll",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":169,
            "endLine":169
          }
        },
        "doc":["Returns `true` if and only if all elements in `t` satisfy the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":169,
          "endLine":170
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"forEach",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":175,
            "endLine":175
          }
        },
        "doc":["Applies `f` to each element in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Unit & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Unit",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":175,
          "endLine":176
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"head",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":97,
            "endLine":97
          }
        },
        "doc":["Returns the first element of `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":97,
          "endLine":98
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"init",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":109,
            "endLine":109
          }
        },
        "doc":["Returns `t` as a list without the last element."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":109,
          "endLine":110
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"intersperse",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":255,
            "endLine":255
          }
        },
        "doc":["Returns `t` as a list with `a` inserted between every two adjacent elements."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"a",
          "tpe":"a"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":255,
          "endLine":256
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"iterator",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":269,
            "endLine":269
          }
        },
        "doc":["Returns an iterator over `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Iterator[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":269,
          "endLine":270
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"last",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":103,
            "endLine":103
          }
        },
        "doc":["Returns the last element of `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":103,
          "endLine":104
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"length",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":133,
            "endLine":133
          }
        },
        "doc":["Returns the number of elements in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":133,
          "endLine":134
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"maximum",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":219,
            "endLine":219
          }
        },
        "doc":["Finds the largest element of `t` according to the `Order` on `a`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":219,
          "endLine":220
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"maximumBy",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":225,
            "endLine":225
          }
        },
        "doc":["Finds the largest element of `t` according to the given comparator `cmp`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"cmp",
          "tpe":"a -> (a -> Comparison)"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":225,
          "endLine":226
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"memberOf",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":201,
            "endLine":201
          }
        },
        "doc":["Returns `true` if and only if the element `a` is in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"a",
          "tpe":"a"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":201,
          "endLine":202
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"minimum",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":207,
            "endLine":207
          }
        },
        "doc":["Finds the smallest element of `t` according to the `Order` on `a`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":207,
          "endLine":208
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"minimumBy",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":213,
            "endLine":213
          }
        },
        "doc":["Finds the smallest element of `t` according to the given comparator `cmp`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"cmp",
          "tpe":"a -> (a -> Comparison)"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":213,
          "endLine":214
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"product",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":151,
            "endLine":151
          }
        },
        "doc":["Returns the product of all elements in `t`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"t",
          "tpe":"t[Int32]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":151,
          "endLine":152
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"productWith",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":157,
            "endLine":157
          }
        },
        "doc":["Returns the product of all elements in `t` according to the function `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Int32 & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":157,
          "endLine":158
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduce",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":53,
            "endLine":53
          }
        },
        "doc":["Reduce `t` using the derived `SemiGroup` instance."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":53,
          "endLine":54
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduceLeft",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":41,
            "endLine":41
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (a -> a & ef \\ ef')"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":41,
          "endLine":42
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduceMap",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":59,
            "endLine":59
          }
        },
        "doc":["Applies `f` to each element of `t` and combines them using the derived `SemiGroup` instance."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> b & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":59,
          "endLine":60
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reduceRight",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":47,
            "endLine":47
          }
        },
        "doc":["Right-associative reduction on `t` using `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> (a -> a & ef \\ ef')"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":47,
          "endLine":48
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"reverse",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":121,
            "endLine":121
          }
        },
        "doc":["Returns the reverse of `t` as a list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":121,
          "endLine":122
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"sum",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":139,
            "endLine":139
          }
        },
        "doc":["Returns the sum of all elements in `t`."],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"t",
          "tpe":"t[Int32]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":139,
          "endLine":140
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"sumWith",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":145,
            "endLine":145
          }
        },
        "doc":["Returns the sum of all elements in `t` according to the function `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Int32 & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":145,
          "endLine":146
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"tail",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":115,
            "endLine":115
          }
        },
        "doc":["Returns the tail of `t` as a list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":115,
          "endLine":116
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"takeWhile",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":243,
            "endLine":243
          }
        },
        "doc":["Returns the longest prefix of `t` as a list that satisfies the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":243,
          "endLine":250
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"toArray",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":261,
            "endLine":261
          }
        },
        "doc":["Returns `t` as an array."],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"r",
          "tpe":"Region[r]"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Array[a, r]",
        "eff":"r",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":261,
          "endLine":264
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"toList",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":275,
            "endLine":275
          }
        },
        "doc":["Returns `t` as a list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"List[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":275,
          "endLine":276
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"toMap",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":281,
            "endLine":281
          }
        },
        "doc":["Returns `t` as a map."],
        "mod":["public"],
        "tparams":[{
          "name":"k",
          "kind":"Type"
        },{
          "name":"v",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[(k, v)]"
        }],
        "tpe":"Map[k, v]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":281,
          "endLine":282
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"toNel",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":287,
            "endLine":287
          }
        },
        "doc":["Returns `t` as a non-empty list."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Nel[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":287,
          "endLine":288
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "name":"toSet",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":293,
            "endLine":293
          }
        },
        "doc":["Returns `t` as a set."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Set[a]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Reducible",
            "loc":{
              "name":"Reducible.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Reducible.flix",
          "beginLine":293,
          "endLine":294
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Reducible",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":105,
          "endLine":123
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Reducible",
          "loc":{
            "name":"Reducible.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":93,
          "endLine":111
        }
      }],
      "loc":{
        "name":"Reducible.flix",
        "beginLine":22,
        "endLine":296
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Rem",
        "loc":{
          "name":"Rem.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for remainder."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Rem",
            "loc":{
              "name":"Rem.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Rem",
            "loc":{
              "name":"Rem.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Rem.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Rem.flix",
          "beginLine":27,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Rem.flix",
          "beginLine":35,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Rem.flix",
          "beginLine":43,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Rem.flix",
          "beginLine":51,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Rem",
          "loc":{
            "name":"Rem.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Rem.flix",
          "beginLine":59,
          "endLine":65
        }
      }],
      "loc":{
        "name":"Rem.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that are allocated in a region."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Bool -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Scoped",
            "loc":{
              "name":"Scoped.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"regionOf",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"r",
          "kind":"Bool"
        }],
        "fparams":[{
          "name":"x",
          "tpe":"t[r]"
        }],
        "tpe":"Region[r]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Scoped",
            "loc":{
              "name":"Scoped.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Scoped.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Array[a]",
        "tcs":[],
        "loc":{
          "name":"Array.flix",
          "beginLine":17,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Iterator[a]",
        "tcs":[],
        "loc":{
          "name":"Iterator.flix",
          "beginLine":25,
          "endLine":27
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutDeque[a]",
        "tcs":[],
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":38,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutList[a]",
        "tcs":[],
        "loc":{
          "name":"MutList.flix",
          "beginLine":32,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutMap[k, v]",
        "tcs":[],
        "loc":{
          "name":"MutMap.flix",
          "beginLine":22,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MutSet[t]",
        "tcs":[],
        "loc":{
          "name":"MutSet.flix",
          "beginLine":26,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Scoped",
          "loc":{
            "name":"Scoped.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"StringBuilder",
        "tcs":[],
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":26,
          "endLine":28
        }
      }],
      "loc":{
        "name":"Scoped.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that form a semigroup."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"combine",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":24,
          "endLine":29
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"combineN",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":29,
            "endLine":29
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"n",
          "tpe":"Int32"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":29,
          "endLine":31
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain[a]",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":36,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":114,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"PrecedenceGraph",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/PrecedenceGraph.flix",
          "beginLine":34,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":23,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":114,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":79,
          "endLine":81
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":66,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec[a]",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":61,
          "endLine":63
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":113,
          "endLine":115
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":137,
          "endLine":143
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":42,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":46,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":50,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":54,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":58,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":62,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":66,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":70,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":74,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":78,
          "endLine":80
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":82,
          "endLine":86
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":88,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":94,
          "endLine":98
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":100,
          "endLine":104
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":106,
          "endLine":110
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":112,
          "endLine":116
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":118,
          "endLine":122
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":124,
          "endLine":128
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":130,
          "endLine":134
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Any",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":141,
          "endLine":145
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"All",
        "tcs":[],
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":157,
          "endLine":161
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":83,
          "endLine":85
        }
      },{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"SemiGroup",
            "loc":{
              "name":"SemiGroup.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":32,
          "endLine":39
        }
      }],
      "loc":{
        "name":"SemiGroup.flix",
        "beginLine":20,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be passed to `Channel.send`."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Boxed",
        "tcs":[],
        "loc":{
          "name":"Boxed.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Chain.flix",
          "beginLine":26,
          "endLine":26
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Comparison",
        "tcs":[],
        "loc":{
          "name":"Comparison.flix",
          "beginLine":17,
          "endLine":17
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":17,
          "endLine":17
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":19,
          "endLine":19
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":26,
          "endLine":26
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":26,
          "endLine":26
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":35,
          "endLine":35
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":22,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":24,
          "endLine":26
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":26,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":28,
          "endLine":30
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":30,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":32,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":34,
          "endLine":36
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":36,
          "endLine":38
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":38,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":40,
          "endLine":42
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":42,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":44,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":46,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":48,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":50,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":52,
          "endLine":52
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":54,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":56,
          "endLine":56
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":58,
          "endLine":58
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":60,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":62,
          "endLine":62
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":64,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":66,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":68,
          "endLine":68
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a14"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":70,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a14"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a15"
        }],
        "loc":{
          "name":"Sendable.flix",
          "beginLine":72,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Sendable",
            "loc":{
              "name":"Sendable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Sendable.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Sub",
        "loc":{
          "name":"Sub.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for subtraction."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Sub",
            "loc":{
              "name":"Sub.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"y",
          "tpe":"a"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sub",
            "loc":{
              "name":"Sub.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Sub.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Sub",
            "loc":{
              "name":"Sub.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":110,
          "endLine":115
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Sub",
          "loc":{
            "name":"Sub.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"Sub.flix",
          "beginLine":55,
          "endLine":57
        }
      }],
      "loc":{
        "name":"Sub.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for types that can be converted to strings."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"toString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        }],
        "tpe":"String",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Shape",
        "tcs":[],
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":1,
          "endLine":1
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"GameResult",
        "tcs":[],
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":5,
          "endLine":5
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Boxed",
        "tcs":[],
        "loc":{
          "name":"Boxed.flix",
          "beginLine":65,
          "endLine":77
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Chain.flix",
          "beginLine":95,
          "endLine":108
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Comparison",
        "tcs":[],
        "loc":{
          "name":"Comparison.flix",
          "beginLine":17,
          "endLine":17
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":65,
          "endLine":67
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":33,
          "endLine":35
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":30,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"FileType",
        "tcs":[],
        "loc":{
          "name":"File.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BodyPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/BodyPredicate.flix",
          "beginLine":52,
          "endLine":79
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BodyTerm[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/BodyTerm.flix",
          "beginLine":25,
          "endLine":31
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Constraint[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Constraint.flix",
          "beginLine":48,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Datalog[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Datalog.flix",
          "beginLine":61,
          "endLine":92
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"HeadPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/HeadPredicate.flix",
          "beginLine":42,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"HeadTerm[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/HeadTerm.flix",
          "beginLine":30,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"VarSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/VarSym.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BoolExp[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/BoolExp.flix",
          "beginLine":33,
          "endLine":47
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RamStmt[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamStmt.flix",
          "beginLine":32,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RamSym[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamSym.flix",
          "beginLine":83,
          "endLine":89
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RamTerm[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamTerm.flix",
          "beginLine":42,
          "endLine":55
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RelOp[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RelOp.flix",
          "beginLine":27,
          "endLine":44
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RowVar",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RowVar.flix",
          "beginLine":25,
          "endLine":30
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"PredSym",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Shared/PredSym.flix",
          "beginLine":23,
          "endLine":27
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"List.flix",
          "beginLine":30,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":38,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k, v]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"k"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"v"
        }],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":32,
          "endLine":34
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nec.flix",
          "beginLine":125,
          "endLine":138
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Nel.flix",
          "beginLine":26,
          "endLine":28
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option[t]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Result[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Set.flix",
          "beginLine":46,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":31,
          "endLine":36
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":38,
          "endLine":42
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":44,
          "endLine":48
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":50,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":56,
          "endLine":60
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":62,
          "endLine":66
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":68,
          "endLine":72
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":74,
          "endLine":78
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"String",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":80,
          "endLine":82
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigInt",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":84,
          "endLine":88
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"BigDecimal",
        "tcs":[],
        "loc":{
          "name":"ToString.flix",
          "beginLine":90,
          "endLine":94
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":96,
          "endLine":101
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":103,
          "endLine":108
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":110,
          "endLine":115
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":117,
          "endLine":122
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":124,
          "endLine":129
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":131,
          "endLine":136
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":138,
          "endLine":143
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":145,
          "endLine":150
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":152,
          "endLine":157
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":159,
          "endLine":164
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":166,
          "endLine":171
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":173,
          "endLine":178
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a14"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":180,
          "endLine":185
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a11"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a12"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a13"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a14"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a15"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":187,
          "endLine":192
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Array[a, r]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"ToString.flix",
          "beginLine":194,
          "endLine":204
        }
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Validation[t, e]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"ToString",
            "loc":{
              "name":"ToString.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"e"
        }],
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"ToString.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "doc":["A type class for data structures that can be traversed in left-to-right","order with an applicative functor."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Traversable",
            "loc":{
              "name":"Traversable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"traverse",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"m",
          "kind":"Type -> Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> m[b] & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"m[t[b]]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Traversable",
            "loc":{
              "name":"Traversable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Traversable.flix",
          "beginLine":27,
          "endLine":27
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Traversable",
            "loc":{
              "name":"Traversable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"sequence",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":32,
            "endLine":32
          }
        },
        "doc":["Returns the result of running all the actions in the data structure `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"m",
          "kind":"Type -> Type"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[m[a]]"
        }],
        "tpe":"m[t[a]]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Traversable",
            "loc":{
              "name":"Traversable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Traversable.flix",
          "beginLine":32,
          "endLine":33
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":83,
          "endLine":86
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":102,
          "endLine":105
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":93,
          "endLine":101
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":102,
          "endLine":105
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[],
        "loc":{
          "name":"Map.flix",
          "beginLine":67,
          "endLine":70
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":100,
          "endLine":103
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":88,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":111,
          "endLine":128
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":78,
          "endLine":84
        }
      }],
      "loc":{
        "name":"Traversable.flix",
        "beginLine":21,
        "endLine":47
      }
    },{
      "sym":{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for unordered data structures that can be folded."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"foldMap",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":28,
            "endLine":28
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> b & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"b",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"b"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":28,
          "endLine":28
        }
      }],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"count",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":77,
            "endLine":77
          }
        },
        "doc":["Returns the number of elements in `t` that satisfy the predicate `f`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":77,
          "endLine":78
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"exists",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":47,
            "endLine":47
          }
        },
        "doc":["Returns `true` if and only if at least one element in `t` satisfies the predicate `f`.","","Returns `false` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":47,
          "endLine":50
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"fold",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":33,
            "endLine":33
          }
        },
        "doc":["Returns the result of applying `CommutativeMonoid.combine` to all the elements in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"CommutativeMonoid",
            "loc":{
              "name":"CommutativeMonoid.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":33,
          "endLine":34
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"forAll",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":57,
            "endLine":57
          }
        },
        "doc":["Returns `true` if and only if all elements in `t` satisfy the predicate `f`.","","Returns `true` if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> Bool & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":57,
          "endLine":60
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"isEmpty",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":39,
            "endLine":39
          }
        },
        "doc":["Returns true if and only if `t` is empty."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":39,
          "endLine":40
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"memberOf",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":65,
            "endLine":65
          }
        },
        "doc":["Returns `true` if and only if the element `x` is in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"x",
          "tpe":"a"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Bool",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Eq",
            "loc":{
              "name":"Eq.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":65,
          "endLine":66
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"size",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":71,
            "endLine":71
          }
        },
        "doc":["Returns the number of elements in `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"Int32",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UnorderedFoldable",
            "loc":{
              "name":"UnorderedFoldable.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":71,
          "endLine":72
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":75,
          "endLine":81
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":77,
          "endLine":83
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Identity",
        "tcs":[],
        "loc":{
          "name":"Identity.flix",
          "beginLine":87,
          "endLine":91
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":94,
          "endLine":100
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[],
        "loc":{
          "name":"Map.flix",
          "beginLine":60,
          "endLine":65
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"MultiMap[k]",
        "tcs":[],
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":59,
          "endLine":64
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nec",
        "tcs":[],
        "loc":{
          "name":"Nec.flix",
          "beginLine":92,
          "endLine":98
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Nel",
        "tcs":[],
        "loc":{
          "name":"Nel.flix",
          "beginLine":80,
          "endLine":86
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":107,
          "endLine":109
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":71,
          "endLine":76
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UnorderedFoldable",
          "loc":{
            "name":"UnorderedFoldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Set",
        "tcs":[],
        "loc":{
          "name":"Set.flix",
          "beginLine":73,
          "endLine":81
        }
      }],
      "loc":{
        "name":"UnorderedFoldable.flix",
        "beginLine":20,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":[],
        "name":"UpperBound",
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "doc":["A type class for partially ordered types that have an upper bound."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"a",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "name":"maxValue",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"_unit",
          "tpe":"Unit"
        }],
        "tpe":"a",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":24,
          "endLine":25
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Bool",
        "tcs":[],
        "loc":{
          "name":"Bool.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Char",
        "tcs":[],
        "loc":{
          "name":"Char.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Down[a]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"LowerBound",
            "loc":{
              "name":"LowerBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a"
        }],
        "loc":{
          "name":"Down.flix",
          "beginLine":52,
          "endLine":54
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float32",
        "tcs":[],
        "loc":{
          "name":"Float32.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Float64",
        "tcs":[],
        "loc":{
          "name":"Float64.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int16",
        "tcs":[],
        "loc":{
          "name":"Int16.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int32",
        "tcs":[],
        "loc":{
          "name":"Int32.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int64",
        "tcs":[],
        "loc":{
          "name":"Int64.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Int8",
        "tcs":[],
        "loc":{
          "name":"Int8.flix",
          "beginLine":21,
          "endLine":23
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":27,
          "endLine":29
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":31,
          "endLine":33
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":35,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":39,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":43,
          "endLine":45
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":47,
          "endLine":49
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":51,
          "endLine":53
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":55,
          "endLine":57
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a1"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a2"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a3"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a4"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a5"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a6"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a7"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a8"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a9"
        },{
          "sym":{
            "namespace":[],
            "name":"UpperBound",
            "loc":{
              "name":"UpperBound.flix",
              "beginLine":20,
              "endLine":20
            }
          },
          "tpe":"a10"
        }],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":59,
          "endLine":61
        }
      },{
        "sym":{
          "namespace":[],
          "name":"UpperBound",
          "loc":{
            "name":"UpperBound.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "ann":[],
        "tpe":"Unit",
        "tcs":[],
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":63,
          "endLine":65
        }
      }],
      "loc":{
        "name":"UpperBound.flix",
        "beginLine":20,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "doc":["A type class for data structures that can be traversed in left-to-right","order with an applicative partial functor."],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type -> Type"
      },
      "superClasses":[{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"Filterable",
          "loc":{
            "name":"Filterable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "sigs":[],
      "defs":[{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Witherable",
            "loc":{
              "name":"Witherable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"sequenceWither",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":35,
            "endLine":35
          }
        },
        "doc":["Returns the result of running all the actions in the data structure `t`."],
        "mod":["public"],
        "tparams":[{
          "name":"m",
          "kind":"Type -> Type"
        },{
          "name":"a",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"t",
          "tpe":"t[m[Option[a]]]"
        }],
        "tpe":"m[t[a]]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Witherable",
            "loc":{
              "name":"Witherable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Witherable.flix",
          "beginLine":35,
          "endLine":36
        }
      },{
        "sym":{
          "classSym":{
            "namespace":[],
            "name":"Witherable",
            "loc":{
              "name":"Witherable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "name":"wither",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":27,
            "endLine":27
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[{
          "name":"a",
          "kind":"Type"
        },{
          "name":"ef",
          "kind":"Bool"
        },{
          "name":"ef",
          "kind":"Effect"
        },{
          "name":"m",
          "kind":"Type -> Type"
        },{
          "name":"b",
          "kind":"Type"
        }],
        "fparams":[{
          "name":"f",
          "tpe":"a -> m[Option[b]] & ef \\ ef'"
        },{
          "name":"t",
          "tpe":"t[a]"
        }],
        "tpe":"m[t[b]]",
        "eff":"ef",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Witherable",
            "loc":{
              "name":"Witherable.flix",
              "beginLine":21,
              "endLine":21
            }
          },
          "tpe":"t"
        },{
          "sym":{
            "namespace":[],
            "name":"Applicative",
            "loc":{
              "name":"Applicative.flix",
              "beginLine":37,
              "endLine":37
            }
          },
          "tpe":"m"
        }],
        "loc":{
          "name":"Witherable.flix",
          "beginLine":27,
          "endLine":30
        }
      }],
      "instances":[{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Chain",
        "tcs":[],
        "loc":{
          "name":"Chain.flix",
          "beginLine":93,
          "endLine":95
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"DelayList",
        "tcs":[],
        "loc":{
          "name":"DelayList.flix",
          "beginLine":112,
          "endLine":114
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"List",
        "tcs":[],
        "loc":{
          "name":"List.flix",
          "beginLine":112,
          "endLine":114
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Map[k]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"Map.flix",
          "beginLine":77,
          "endLine":77
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"Option",
        "tcs":[],
        "loc":{
          "name":"Option.flix",
          "beginLine":135,
          "endLine":137
        }
      },{
        "sym":{
          "namespace":[],
          "name":"Witherable",
          "loc":{
            "name":"Witherable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "ann":[],
        "tpe":"RedBlackTree[k]",
        "tcs":[{
          "sym":{
            "namespace":[],
            "name":"Order",
            "loc":{
              "name":"Order.flix",
              "beginLine":22,
              "endLine":22
            }
          },
          "tpe":"k"
        }],
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":91,
          "endLine":91
        }
      }],
      "loc":{
        "name":"Witherable.flix",
        "beginLine":21,
        "endLine":38
      }
    }],
    "Fixpoint":[{
      "sym":{
        "namespace":["Fixpoint"],
        "name":"PredSymsOf",
        "loc":{
          "name":"Fixpoint/PredSymsOf.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":["Fixpoint"],
            "name":"PredSymsOf",
            "loc":{
              "name":"Fixpoint/PredSymsOf.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "name":"predSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"t"
        }],
        "tpe":"Set[PredSym]",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":["Fixpoint"],
            "name":"PredSymsOf",
            "loc":{
              "name":"Fixpoint/PredSymsOf.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Fixpoint/PredSymsOf.flix",
          "beginLine":25,
          "endLine":26
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"PredSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"BodyPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/BodyPredicate.flix",
          "beginLine":36,
          "endLine":41
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"PredSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Constraint[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Constraint.flix",
          "beginLine":30,
          "endLine":37
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"PredSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Datalog[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Datalog.flix",
          "beginLine":34,
          "endLine":43
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"PredSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"HeadPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/HeadPredicate.flix",
          "beginLine":28,
          "endLine":32
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"PredSymsOf",
          "loc":{
            "name":"Fixpoint/PredSymsOf.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"RamSym[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamSym.flix",
          "beginLine":59,
          "endLine":65
        }
      }],
      "loc":{
        "name":"Fixpoint/PredSymsOf.flix",
        "beginLine":24,
        "endLine":26
      }
    },{
      "sym":{
        "namespace":["Fixpoint"],
        "name":"SubstitutePredSym",
        "loc":{
          "name":"Fixpoint/SubstitutePredSym.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "doc":[],
      "ann":[],
      "mod":["public"],
      "tparam":{
        "name":"t",
        "kind":"Type"
      },
      "superClasses":[],
      "sigs":[{
        "sym":{
          "classSym":{
            "namespace":["Fixpoint"],
            "name":"SubstitutePredSym",
            "loc":{
              "name":"Fixpoint/SubstitutePredSym.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "name":"substitute",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":25,
            "endLine":25
          }
        },
        "doc":[],
        "mod":["public"],
        "tparams":[],
        "fparams":[{
          "name":"x",
          "tpe":"t"
        },{
          "name":"s",
          "tpe":"Map[PredSym, PredSym]"
        }],
        "tpe":"t",
        "eff":"true",
        "tcs":[{
          "sym":{
            "namespace":["Fixpoint"],
            "name":"SubstitutePredSym",
            "loc":{
              "name":"Fixpoint/SubstitutePredSym.flix",
              "beginLine":24,
              "endLine":24
            }
          },
          "tpe":"t"
        }],
        "loc":{
          "name":"Fixpoint/SubstitutePredSym.flix",
          "beginLine":25,
          "endLine":26
        }
      }],
      "defs":[],
      "instances":[{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"SubstitutePredSym",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"BodyPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/BodyPredicate.flix",
          "beginLine":43,
          "endLine":50
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"SubstitutePredSym",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Constraint[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Constraint.flix",
          "beginLine":39,
          "endLine":46
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"SubstitutePredSym",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"Datalog[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/Datalog.flix",
          "beginLine":45,
          "endLine":59
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"SubstitutePredSym",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"HeadPredicate[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ast/HeadPredicate.flix",
          "beginLine":34,
          "endLine":40
        }
      },{
        "sym":{
          "namespace":["Fixpoint"],
          "name":"SubstitutePredSym",
          "loc":{
            "name":"Fixpoint/SubstitutePredSym.flix",
            "beginLine":24,
            "endLine":24
          }
        },
        "ann":[],
        "tpe":"RamSym[v]",
        "tcs":[],
        "loc":{
          "name":"Fixpoint/Ram/RamSym.flix",
          "beginLine":67,
          "endLine":81
        }
      }],
      "loc":{
        "name":"Fixpoint/SubstitutePredSym.flix",
        "beginLine":24,
        "endLine":26
      }
    }]
  },
  "enums":{
    "Random":[{
      "doc":["Represents a random number generator."],
      "ann":[],
      "sym":{
        "namespace":["Random"],
        "name":"Random",
        "loc":{
          "name":"Random.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Random",
        "tpe":"Random"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":90,
        "endLine":92
      }
    }],
    "Prelude":[{
      "doc":["Represents a boxed value."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Boxed",
        "loc":{
          "name":"Boxed.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"BoxedBool",
        "tpe":"Bool"
      },{
        "tag":"BoxedChar",
        "tpe":"Char"
      },{
        "tag":"BoxedInt8",
        "tpe":"Int8"
      },{
        "tag":"BoxedInt16",
        "tpe":"Int16"
      },{
        "tag":"BoxedInt32",
        "tpe":"Int32"
      },{
        "tag":"BoxedInt64",
        "tpe":"Int64"
      },{
        "tag":"BoxedFloat32",
        "tpe":"Float32"
      },{
        "tag":"BoxedFloat64",
        "tpe":"Float64"
      },{
        "tag":"BoxedObject",
        "tpe":"(Object, Object -> (Object -> Comparison))"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Boxed.flix",
        "beginLine":20,
        "endLine":33
      }
    },{
      "doc":["The Chain type.","","A chain is a list represented as an unbalanced binary tree.","It supports efficient append and \"snoc\" - appending elements at the tail","of the list.","","Note - the constructors `Empty`, `One` and `Chain` should not be used directly."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Chain",
        "loc":{
          "name":"Chain.flix",
          "beginLine":26,
          "endLine":26
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Empty",
        "tpe":"Unit"
      },{
        "tag":"One",
        "tpe":"t"
      },{
        "tag":"Chain",
        "tpe":"(Chain[t], Chain[t])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZero",
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":26,
        "endLine":30
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Choice",
        "loc":{
          "name":"Choice.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"_isAbsent",
        "kind":"Bool"
      },{
        "name":"_isPresent",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"Absent",
        "tpe":"Unit"
      },{
        "tag":"Present",
        "tpe":"a"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":20,
        "endLine":23
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Comparison",
        "loc":{
          "name":"Comparison.flix",
          "beginLine":17,
          "endLine":17
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"LessThan",
        "tpe":"Unit"
      },{
        "tag":"EqualTo",
        "tpe":"Unit"
      },{
        "tag":"GreaterThan",
        "tpe":"Unit"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Comparison.flix",
        "beginLine":17,
        "endLine":21
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"DelayList",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":17,
          "endLine":17
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"ENil",
        "tpe":"Unit"
      },{
        "tag":"ECons",
        "tpe":"(a, DelayList[a])"
      },{
        "tag":"LCons",
        "tpe":"(a, Lazy[DelayList[a]])"
      },{
        "tag":"LList",
        "tpe":"Lazy[DelayList[a]]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZero",
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":17,
        "endLine":22
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"DelayMap",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":19,
          "endLine":19
        }
      },
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"DMap",
        "tpe":"RedBlackTree[k, Lazy[v]]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":19,
        "endLine":21
      }
    },{
      "doc":["The `Down` type allows you to reverse the sort order of `a` conveniently."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Down",
        "loc":{
          "name":"Down.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Down",
        "tpe":"a"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"UpperBound",
        "loc":{
          "name":"UpperBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"PartialOrder",
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Add",
        "loc":{
          "name":"Add.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"JoinLattice",
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"MeetLattice",
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "namespace":[],
        "name":"LowerBound",
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Down.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"GameResult",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":5,
          "endLine":5
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Win",
        "tpe":"Unit"
      },{
        "tag":"Draw",
        "tpe":"Unit"
      },{
        "tag":"Lose",
        "tpe":"Unit"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":5,
        "endLine":7
      }
    },{
      "doc":["The Identity Functor / Monad."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Identity",
        "loc":{
          "name":"Identity.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Identity",
        "tpe":"a"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Neg",
        "loc":{
          "name":"Neg.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Div",
        "loc":{
          "name":"Div.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sub",
        "loc":{
          "name":"Sub.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Mul",
        "loc":{
          "name":"Mul.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Add",
        "loc":{
          "name":"Add.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Identity.flix",
        "beginLine":21,
        "endLine":21
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Iterator",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":17,
          "endLine":17
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"Iterator",
        "tpe":"(Done[r], Next[a, r])"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Iterable",
        "loc":{
          "name":"Iterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":17,
        "endLine":19
      }
    },{
      "doc":["The List type.","","A list is either the empty list represented by `Nil`, or","an element `v` followed by a list `vs` represented by `v :: vs`."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"List",
        "loc":{
          "name":"List.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Nil",
        "tpe":"Unit"
      },{
        "tag":"Cons",
        "tpe":"(t, List[t])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZero",
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":23,
        "endLine":26
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Map",
        "loc":{
          "name":"Map.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Map",
        "tpe":"RedBlackTree[k, v]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"CommutativeSemiGroup",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"CommutativeMonoid",
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"PartialOrder",
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"JoinLattice",
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"MeetLattice",
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"LowerBound",
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":24,
        "endLine":26
      }
    },{
      "doc":["The MultiMap type.","","A MultiMap is a Map that allows multiple values for a key.","Multiple values are stored in a Set so duplicates are not allowed.","","The key and value types must implement the Eq and Order type classes."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"MultiMap",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":26,
          "endLine":26
        }
      },
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"MultiMap",
        "tpe":"Map[k, Set[v]]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"CommutativeSemiGroup",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"CommutativeMonoid",
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":26,
        "endLine":28
      }
    },{
      "doc":["Represents a mutable deque.","","Explanation of component types (from left to right):","The 1st component is a reference the backing array.","The 2nd component is a reference to the front index.","The 3rd component is a reference to the back index.","","If front == back then the deque is empty.","Otherwise, the front index always points to an element (going counter-clockwise)","and the back index always points to the first empty index (going clockwise)."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"MutDeque",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"MutDeque",
        "tpe":"(Ref[Array[a, r], r], Ref[Int32, r], Ref[Int32, r])"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Iterable",
        "loc":{
          "name":"Iterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":30,
        "endLine":32
      }
    },{
      "doc":["Represents a mutable list.","","Invariant","- The length is always higher than the total capacity of the array.","- The capacity of the array is always 8 or more."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"MutList",
        "loc":{
          "name":"MutList.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"MutList",
        "tpe":"(Ref[Array[a, r], r], Ref[Int32, r])"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Iterable",
        "loc":{
          "name":"Iterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":24,
        "endLine":26
      }
    },{
      "doc":["The Mutable Map type."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"MutMap",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"MutMap",
        "tpe":"Ref[Map[k, v], r]"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "doc":["The Mutable Set type."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"MutSet",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"MutSet",
        "tpe":"Ref[Set[t], r]"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Iterable",
        "loc":{
          "name":"Iterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "doc":["The NonEmpty Chain type.","","A chain is a list represented as an unbalanced binary tree.","It supports efficient append and \"snoc\" - appending elements at the tail","of the list.","","Note - the constructors `NecOne` and `Nec` should not be used directly."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Nec",
        "loc":{
          "name":"Nec.flix",
          "beginLine":26,
          "endLine":26
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"NecOne",
        "tpe":"t"
      },{
        "tag":"Nec",
        "tpe":"(Nec[t], Nec[t])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Reducible",
        "loc":{
          "name":"Reducible.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":26,
        "endLine":29
      }
    },{
      "doc":["The NonEmptyList type."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Nel",
        "loc":{
          "name":"Nel.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Nel",
        "tpe":"(a, List[a])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Reducible",
        "loc":{
          "name":"Reducible.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "doc":["The Option type.","","An option represents an optional value.","The constructor `None` represents an absent value,","whereas the constructor `Some(v)` represents the value `v`."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Option",
        "loc":{
          "name":"Option.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"None",
        "tpe":"Unit"
      },{
        "tag":"Some",
        "tpe":"t"
      }],
      "derives":[{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"<unknown>",
          "beginLine":0,
          "endLine":0
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZero",
        "loc":{
          "name":"MonadZero.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"MonadZip",
        "loc":{
          "name":"MonadZip.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Applicative",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":37,
          "endLine":37
        }
      },{
        "namespace":[],
        "name":"CommutativeSemiGroup",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"CommutativeMonoid",
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"PartialOrder",
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monad",
        "loc":{
          "name":"Monad.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"JoinLattice",
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"MeetLattice",
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"LowerBound",
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":24,
        "endLine":27
      }
    },{
      "doc":["An enum that holds type information where a witness is not available."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Proxy",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":9,
          "endLine":9
        }
      },
      "tparams":[{
        "name":"_",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Proxy",
        "tpe":"Unit"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":9,
        "endLine":11
      }
    },{
      "doc":["The Result type.","","A result represents a successful value or an error value.","The constructor `Ok(v)` represents the successful value `v`,","whereas the constructor `Err(v)` represents the error value `v`."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Result",
        "loc":{
          "name":"Result.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Ok",
        "tpe":"t"
      },{
        "tag":"Err",
        "tpe":"e"
      }],
      "derives":[{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"<unknown>",
          "beginLine":0,
          "endLine":0
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Result.flix",
        "beginLine":24,
        "endLine":27
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Set",
        "loc":{
          "name":"Set.flix",
          "beginLine":24,
          "endLine":24
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Set",
        "tpe":"RedBlackTree[t, Unit]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"CommutativeSemiGroup",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"CommutativeMonoid",
        "loc":{
          "name":"CommutativeMonoid.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"PartialOrder",
        "loc":{
          "name":"PartialOrder.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"JoinLattice",
        "loc":{
          "name":"JoinLattice.flix",
          "beginLine":23,
          "endLine":23
        }
      },{
        "namespace":[],
        "name":"MeetLattice",
        "loc":{
          "name":"MeetLattice.flix",
          "beginLine":24,
          "endLine":24
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"LowerBound",
        "loc":{
          "name":"LowerBound.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":24,
        "endLine":26
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Shape",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":1,
          "endLine":1
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Rock",
        "tpe":"Unit"
      },{
        "tag":"Paper",
        "tpe":"Unit"
      },{
        "tag":"Scissors",
        "tpe":"Unit"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":1,
        "endLine":3
      }
    },{
      "doc":["Represents a StringBuilder."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"StringBuilder",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"_",
        "kind":"Bool"
      }],
      "cases":[{
        "tag":"StringBuilder",
        "tpe":"StringBuilder"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Newable",
        "loc":{
          "name":"Newable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Scoped",
        "loc":{
          "name":"Scoped.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":20,
        "endLine":22
      }
    },{
      "doc":["The Validation type."],
      "ann":[],
      "sym":{
        "namespace":[],
        "name":"Validation",
        "loc":{
          "name":"Validation.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Success",
        "tpe":"t"
      },{
        "tag":"Failure",
        "tpe":"Nec[e]"
      }],
      "derives":[{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"<unknown>",
          "beginLine":0,
          "endLine":0
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"SemiGroup",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Hash",
        "loc":{
          "name":"Hash.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Monoid",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":21,
          "endLine":21
        }
      }],
      "loc":{
        "name":"Validation.flix",
        "beginLine":20,
        "endLine":23
      }
    }],
    "GetOpt":[{
      "doc":["`ArgDescr` defines whether or not the option takes an argument.","","* `NoArg` expects no argument. The constructor takes a value of type `a` indicating the option that has been recognized.","* `ReqArg` mandates an argument. The constructor takes a function to decode the argument and description string.","* `OptArg` optionally requires an argument. The constructor takes a function to decode the argument and description string.","","The \"decode\" functions are expected to produce `Some(_)` when decoding is successful, and `None` to indicate","failure."],
      "ann":[],
      "sym":{
        "namespace":["GetOpt"],
        "name":"ArgDescr",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":49,
          "endLine":49
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"NoArg",
        "tpe":"a"
      },{
        "tag":"ReqArg",
        "tpe":"(String -> Option[a], String)"
      },{
        "tag":"OptArg",
        "tpe":"(Option[String] -> Option[a], String)"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":49,
        "endLine":53
      }
    },{
      "doc":["`ArgOrder` defines how to parse further arguments that follow non-options.","","* `RequireOrder` after the first non-option all remain arguments are treated as non-options","* `Permute` options and non-options are freely interspersed in the input stream","* `ReturnInOrder` turn non-options into options by applying the supplied function"],
      "ann":[],
      "sym":{
        "namespace":["GetOpt"],
        "name":"ArgOrder",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"RequireOrder",
        "tpe":"Unit"
      },{
        "tag":"Permute",
        "tpe":"Unit"
      },{
        "tag":"ReturnInOrder",
        "tpe":"String -> a"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":33,
        "endLine":37
      }
    }],
    "RedBlackTree":[{
      "doc":["The color of a red-black tree node."],
      "ann":[],
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"Color",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":96,
          "endLine":96
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Red",
        "tpe":"Unit"
      },{
        "tag":"Black",
        "tpe":"Unit"
      },{
        "tag":"DoubleBlack",
        "tpe":"Unit"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":96,
        "endLine":106
      }
    },{
      "doc":["An immutable red-black tree implementation with keys","of type `k` and values of type `v`.","","A red-black tree is a self-balancing binary search tree.","Each node is either red or black, although a transitory","color double-black is allowed during deletion.","The red-black tree satisfy the following invariants.","","1. For all nodes with key `x`,","the left subtree contains only nodes with keys `y` < `x` and","the right subtree contains only nodes with keys `z` > `x`.","2. No red node has a red parent.","3. Every path from the root to a leaf contains the same","number of black nodes."],
      "ann":[],
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"RedBlackTree",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Leaf",
        "tpe":"Unit"
      },{
        "tag":"DoubleBlackLeaf",
        "tpe":"Unit"
      },{
        "tag":"Node",
        "tpe":"(Color, RedBlackTree[k, v], k, v, RedBlackTree[k, v])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Sendable",
        "loc":{
          "name":"Sendable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"UnorderedFoldable",
        "loc":{
          "name":"UnorderedFoldable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Witherable",
        "loc":{
          "name":"Witherable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Filterable",
        "loc":{
          "name":"Filterable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Traversable",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":21,
          "endLine":21
        }
      },{
        "namespace":[],
        "name":"Functor",
        "loc":{
          "name":"Functor.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"Foldable",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":35,
        "endLine":52
      }
    }],
    "Benchmark":[{
      "doc":["A benchmark has a name and a function to execute. The function is always","impure since timing is considered a side-effect in this context."],
      "ann":[],
      "sym":{
        "namespace":["Benchmark"],
        "name":"Benchmark",
        "loc":{
          "name":"Benchmark.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Benchmark",
        "tpe":"{ f = Unit -> Unit & Impure \\ IO, name = String }"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Benchmark.flix",
        "beginLine":22,
        "endLine":24
      }
    },{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":["Benchmark"],
        "name":"BenchmarkResult",
        "loc":{
          "name":"Benchmark.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Success",
        "tpe":"{ name = String, rounds = Int32, total = Int64 }"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Benchmark.flix",
        "beginLine":55,
        "endLine":57
      }
    }],
    "Fixpoint/Tuple":[{
      "doc":["Uses unsafe immutable array internally for performance."],
      "ann":[],
      "sym":{
        "namespace":["Fixpoint","Tuple"],
        "name":"Tuple",
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"Tuple",
        "tpe":"Array[v, Static]"
      }],
      "derives":[],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "loc":{
        "name":"Fixpoint/Tuple/Tuple.flix",
        "beginLine":22,
        "endLine":24
      }
    }],
    "Nec":[{
      "doc":[],
      "ann":[],
      "sym":{
        "namespace":["Nec"],
        "name":"ViewLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":149,
          "endLine":149
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"OneLeft",
        "tpe":"a"
      },{
        "tag":"SomeLeft",
        "tpe":"(a, Nec[a])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":149,
        "endLine":152
      }
    },{
      "doc":["A datatype for pattern matching on a Nec (traversing right-to-left)."],
      "ann":[],
      "sym":{
        "namespace":["Nec"],
        "name":"ViewRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":157,
          "endLine":157
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"OneRight",
        "tpe":"a"
      },{
        "tag":"SomeRight",
        "tpe":"(Nec[a], a)"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":157,
        "endLine":160
      }
    }],
    "Time":[{
      "doc":["Represents a duration."],
      "ann":[],
      "sym":{
        "namespace":["Time"],
        "name":"Duration",
        "loc":{
          "name":"Time.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"Duration",
        "tpe":"Int64"
      }],
      "derives":[],
      "instances":[],
      "loc":{
        "name":"Time.flix",
        "beginLine":20,
        "endLine":21
      }
    }],
    "File":[{
      "doc":["File types."],
      "ann":[],
      "sym":{
        "namespace":["File"],
        "name":"FileType",
        "loc":{
          "name":"File.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "tparams":[],
      "cases":[{
        "tag":"File",
        "tpe":"Unit"
      },{
        "tag":"Directory",
        "tpe":"Unit"
      },{
        "tag":"SymLink",
        "tpe":"Unit"
      },{
        "tag":"Other",
        "tpe":"Unit"
      }],
      "derives":[{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"<unknown>",
          "beginLine":0,
          "endLine":0
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Order",
        "loc":{
          "name":"Order.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      },{
        "namespace":[],
        "name":"Boxable",
        "loc":{
          "name":"Boxable.flix",
          "beginLine":20,
          "endLine":20
        }
      },{
        "namespace":[],
        "name":"ToString",
        "loc":{
          "name":"ToString.flix",
          "beginLine":20,
          "endLine":20
        }
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":21,
        "endLine":26
      }
    }],
    "Chain":[{
      "doc":["A datatype for pattern matching on a chain (traversing left-to-right)."],
      "ann":[],
      "sym":{
        "namespace":["Chain"],
        "name":"ViewLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":116,
          "endLine":116
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"NoneLeft",
        "tpe":"Unit"
      },{
        "tag":"SomeLeft",
        "tpe":"(t, Chain[t])"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":116,
        "endLine":119
      }
    },{
      "doc":["A datatype for pattern matching on a chain (traversing right-to-left)."],
      "ann":[],
      "sym":{
        "namespace":["Chain"],
        "name":"ViewRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":124,
          "endLine":124
        }
      },
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "cases":[{
        "tag":"NoneRight",
        "tpe":"Unit"
      },{
        "tag":"SomeRight",
        "tpe":"(Chain[t], t)"
      }],
      "derives":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "instances":[{
        "namespace":[],
        "name":"Eq",
        "loc":{
          "name":"Eq.flix",
          "beginLine":22,
          "endLine":22
        }
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":124,
        "endLine":127
      }
    }]
  },
  "typeAliases":{
    "Prelude":[{
      "doc":[],
      "sym":{
        "namespace":[],
        "name":"Round",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":9,
          "endLine":9
        }
      },
      "tparams":[],
      "tpe":"(Shape, Shape)",
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":9,
        "endLine":9
      }
    },{
      "doc":["Static is a type alias for false and denotes the global lifetime."],
      "sym":{
        "namespace":[],
        "name":"Static",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":4,
          "endLine":4
        }
      },
      "tparams":[],
      "tpe":"false",
      "loc":{
        "name":"Prelude.flix",
        "beginLine":4,
        "endLine":4
      }
    }],
    "File":[{
      "doc":["Statistical information for a file."],
      "sym":{
        "namespace":["File"],
        "name":"StatInfo",
        "loc":{
          "name":"File.flix",
          "beginLine":145,
          "endLine":145
        }
      },
      "tparams":[],
      "tpe":"{ accessTime = Int64, creationTime = Int64, fileType = FileType, modificationTime = Int64, size = Int64 }",
      "loc":{
        "name":"File.flix",
        "beginLine":145,
        "endLine":151
      }
    }],
    "Iterator":[{
      "doc":["The type of the done function."],
      "sym":{
        "namespace":["Iterator"],
        "name":"Done",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      }],
      "tpe":"Unit -> Bool & ef",
      "loc":{
        "name":"Iterator.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "doc":["The type of the next function."],
      "sym":{
        "namespace":["Iterator"],
        "name":"Next",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      }],
      "tpe":"Unit -> a & ef",
      "loc":{
        "name":"Iterator.flix",
        "beginLine":55,
        "endLine":55
      }
    }],
    "GetOpt":[{
      "doc":["An `OptionDescr` describes a single command line option.","","* `optionIds` is a list of single character abbreviations identifying the option","* `optionNames` is a list of long names identifying the option","* `argDescriptor` defines the format of the option","* `explanation` is the description of the option printed to the user by the function `usageInfo`"],
      "sym":{
        "namespace":["GetOpt"],
        "name":"OptionDescr",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":80,
          "endLine":80
        }
      },
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "tpe":"{ argDescriptor = ArgDescr[a], explanation = String, optionIds = List[Char], optionNames = List[String] }",
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":80,
        "endLine":85
      }
    }]
  },
  "defs":{
    "Validation":[{
      "sym":{
        "namespace":["Validation"],
        "name":"ap",
        "loc":{
          "name":"Validation.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Applies the function in `v1` to the value in `v2`."],
      "name":"ap",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"v1",
        "tpe":"Validation[t -> u & ef \\ ef', e]"
      },{
        "name":"v2",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":50,
        "endLine":55
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"exists",
        "loc":{
          "name":"Validation.flix",
          "beginLine":102,
          "endLine":102
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `v` is `Success(t)` and `f(t)` is true.","","Returns `false` if `v` is `Failure`."],
      "name":"exists",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":102,
        "endLine":105
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"forAll",
        "loc":{
          "name":"Validation.flix",
          "beginLine":110,
          "endLine":110
        }
      },
      "ann":[],
      "doc":["Returns `true` if `v` is `Success(t)` and `f(t)` is true or if `v` is `Failure`."],
      "name":"forAll",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":110,
        "endLine":113
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"getWithDefault",
        "loc":{
          "name":"Validation.flix",
          "beginLine":84,
          "endLine":84
        }
      },
      "ann":[],
      "doc":["Returns `t` if `v` is `Success(t).` Otherwise returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"t"
      },{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"t",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":84,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift10",
        "loc":{
          "name":"Validation.flix",
          "beginLine":280,
          "endLine":280
        }
      },
      "ann":[],
      "doc":["Applies the 10-ary function `f` to the values in `v1`, `v2`, ... `v10`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v10` are `Failure(xs1)`."],
      "name":"lift10",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"t10",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> (t10 -> u & ef \\ ef')))))))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      },{
        "name":"v6",
        "tpe":"Validation[t6, e]"
      },{
        "name":"v7",
        "tpe":"Validation[t7, e]"
      },{
        "name":"v8",
        "tpe":"Validation[t8, e]"
      },{
        "name":"v9",
        "tpe":"Validation[t9, e]"
      },{
        "name":"v10",
        "tpe":"Validation[t10, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":280,
        "endLine":281
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift2",
        "loc":{
          "name":"Validation.flix",
          "beginLine":216,
          "endLine":216
        }
      },
      "ann":[],
      "doc":["Applies the binary function `f` to the values in `v1` and `v2`.","","Returns the concatenation of all the failures as `Failure(xs)` if either or both of `v1` or `v2` are `Failure(xs1)`."],
      "name":"lift2",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> u & ef \\ ef')"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":216,
        "endLine":217
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift3",
        "loc":{
          "name":"Validation.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Applies the ternary function `f` to the values in `v1`, `v2` and `v3`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2` and `v3` are `Failure(xs1)`."],
      "name":"lift3",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> u & ef \\ ef'))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":224,
        "endLine":225
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift4",
        "loc":{
          "name":"Validation.flix",
          "beginLine":232,
          "endLine":232
        }
      },
      "ann":[],
      "doc":["Applies the 4-ary function `f` to the values in `v1`, `v2`, `v3` and `v4`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, `v3` and `v4` are `Failure(xs1)`."],
      "name":"lift4",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> u & ef \\ ef')))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":232,
        "endLine":233
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift5",
        "loc":{
          "name":"Validation.flix",
          "beginLine":240,
          "endLine":240
        }
      },
      "ann":[],
      "doc":["Applies the 5-ary function `f` to the values in `v1`, `v2`, ... `v5`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v5` are `Failure(xs1)`."],
      "name":"lift5",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> u & ef \\ ef'))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":240,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift6",
        "loc":{
          "name":"Validation.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Applies the 6-ary function `f` to the values in `v1`, `v2`, ... `v6`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v6` are `Failure(xs1)`."],
      "name":"lift6",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> u & ef \\ ef')))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      },{
        "name":"v6",
        "tpe":"Validation[t6, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":248,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift7",
        "loc":{
          "name":"Validation.flix",
          "beginLine":256,
          "endLine":256
        }
      },
      "ann":[],
      "doc":["Applies the 7-ary function `f` to the values in `v1`, `v2`, ... `v7`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v7` are `Failure(xs1)`."],
      "name":"lift7",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> u & ef \\ ef'))))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      },{
        "name":"v6",
        "tpe":"Validation[t6, e]"
      },{
        "name":"v7",
        "tpe":"Validation[t7, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":256,
        "endLine":257
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift8",
        "loc":{
          "name":"Validation.flix",
          "beginLine":264,
          "endLine":264
        }
      },
      "ann":[],
      "doc":["Applies the 8-ary function `f` to the values in `v1`, `v2`, ... `v8`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v8` are `Failure(xs1)`."],
      "name":"lift8",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> u & ef \\ ef')))))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      },{
        "name":"v6",
        "tpe":"Validation[t6, e]"
      },{
        "name":"v7",
        "tpe":"Validation[t7, e]"
      },{
        "name":"v8",
        "tpe":"Validation[t8, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":264,
        "endLine":265
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"lift9",
        "loc":{
          "name":"Validation.flix",
          "beginLine":272,
          "endLine":272
        }
      },
      "ann":[],
      "doc":["Applies the 9-ary function `f` to the values in `v1`, `v2`, ... `v9`.","","Returns the concatenation of all the failures as `Failure(xs)` if any of `v1`, `v2`, ... `v9` are `Failure(xs1)`."],
      "name":"lift9",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> u & ef \\ ef'))))))))"
      },{
        "name":"v1",
        "tpe":"Validation[t1, e]"
      },{
        "name":"v2",
        "tpe":"Validation[t2, e]"
      },{
        "name":"v3",
        "tpe":"Validation[t3, e]"
      },{
        "name":"v4",
        "tpe":"Validation[t4, e]"
      },{
        "name":"v5",
        "tpe":"Validation[t5, e]"
      },{
        "name":"v6",
        "tpe":"Validation[t6, e]"
      },{
        "name":"v7",
        "tpe":"Validation[t7, e]"
      },{
        "name":"v8",
        "tpe":"Validation[t8, e]"
      },{
        "name":"v9",
        "tpe":"Validation[t9, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":272,
        "endLine":273
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"map",
        "loc":{
          "name":"Validation.flix",
          "beginLine":118,
          "endLine":118
        }
      },
      "ann":[],
      "doc":["Returns `Success(f(v))` if `o` is `Success(v)`. Otherwise returns `v`."],
      "name":"map",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> u & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Validation[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":118,
        "endLine":121
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"product",
        "loc":{
          "name":"Validation.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Chain two functions, returns the product of their results."],
      "name":"product",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"Validation[t1, e]"
      },{
        "name":"fb",
        "tpe":"Validation[t2, e]"
      }],
      "tpe":"Validation[(t1, t2), e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":60,
        "endLine":61
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"product3",
        "loc":{
          "name":"Validation.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Chain three functions, returns the product of their results."],
      "name":"product3",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"Validation[t1, e]"
      },{
        "name":"fb",
        "tpe":"Validation[t2, e]"
      },{
        "name":"fc",
        "tpe":"Validation[t3, e]"
      }],
      "tpe":"Validation[(t1, t2, t3), e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":66,
        "endLine":67
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"product4",
        "loc":{
          "name":"Validation.flix",
          "beginLine":72,
          "endLine":72
        }
      },
      "ann":[],
      "doc":["Chain four functions, returns the product of their results."],
      "name":"product4",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"Validation[t1, e]"
      },{
        "name":"fb",
        "tpe":"Validation[t2, e]"
      },{
        "name":"fc",
        "tpe":"Validation[t3, e]"
      },{
        "name":"fd",
        "tpe":"Validation[t4, e]"
      }],
      "tpe":"Validation[(t1, t2, t3, t4), e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":72,
        "endLine":73
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"product5",
        "loc":{
          "name":"Validation.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Chain five functions, returns the product of their results."],
      "name":"product5",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"Validation[t1, e]"
      },{
        "name":"fb",
        "tpe":"Validation[t2, e]"
      },{
        "name":"fc",
        "tpe":"Validation[t3, e]"
      },{
        "name":"fd",
        "tpe":"Validation[t4, e]"
      },{
        "name":"fe",
        "tpe":"Validation[t5, e]"
      }],
      "tpe":"Validation[(t1, t2, t3, t4, t5), e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":78,
        "endLine":79
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"sequence",
        "loc":{
          "name":"Validation.flix",
          "beginLine":128,
          "endLine":128
        }
      },
      "ann":[],
      "doc":["Returns `Success(v1 :: v2 :: ... :: vn)` if each of `l_i` is `Success(v_i)`.","","Otherwise returns `Failure(e1 :: ... :: en)` with all of the failures concatenated."],
      "name":"sequence",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[Validation[t, e]]"
      }],
      "tpe":"Validation[List[t], e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":128,
        "endLine":134
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"toList",
        "loc":{
          "name":"Validation.flix",
          "beginLine":206,
          "endLine":206
        }
      },
      "ann":[],
      "doc":["Converts a Validation to a List.","","Returns `t :: Nil` if `v` is `Success(v)`.","Returns `Nil` if `v` is `Failure(e)`."],
      "name":"toList",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"List[t]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":206,
        "endLine":209
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"toOption",
        "loc":{
          "name":"Validation.flix",
          "beginLine":184,
          "endLine":184
        }
      },
      "ann":[],
      "doc":["Converts a Validation to an Option.","","Returns `Some(t)` if `v` is `Success(t)`.","Returns `None` otherwise."],
      "name":"toOption",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Option[t]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":184,
        "endLine":187
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"toResult",
        "loc":{
          "name":"Validation.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Converts a Validation to a Result.","","Returns `Ok(t)` if `v` is `Success(t)`.","Returns `Err(e)` if `v` is `Failure(e)`."],
      "name":"toResult",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Result[t, Nec[e]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":195,
        "endLine":198
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"traverse",
        "loc":{
          "name":"Validation.flix",
          "beginLine":141,
          "endLine":141
        }
      },
      "ann":[],
      "doc":["Returns `Success(v1 :: v2 :: ... v :: vn)` if each of `f(l_i)` is `Success(v_i)`.","","Otherwise returns `Failure(e1 :: ... :: en)` with all of the failures concatenated."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Validation[b, e] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Validation[List[b], e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":141,
        "endLine":149
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"traverseX",
        "loc":{
          "name":"Validation.flix",
          "beginLine":159,
          "endLine":159
        }
      },
      "ann":[],
      "doc":["Returns `Success()` if each of `f(l_i)` is `Success(_)`.","","Otherwise returns `Failure(e1 :: ... :: en)` with all of the failures concatenated.","","This function is the \"forgetful\" version of `traverse`, use it when the you want the effect","of applying `f` to each element but do not care about collecting the results."],
      "name":"traverseX",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Validation[b, e] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Validation[Unit, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":159,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":["Validation"],
        "name":"withDefault",
        "loc":{
          "name":"Validation.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":["Returns `v` if it is `Success(v)`. Otherwise returns `default`."],
      "name":"withDefault",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"default",
        "tpe":"{ default = Validation[t, e] }"
      },{
        "name":"v",
        "tpe":"Validation[t, e]"
      }],
      "tpe":"Validation[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Validation.flix",
        "beginLine":92,
        "endLine":95
      }
    }],
    "Day02":[{
      "sym":{
        "namespace":["Day02"],
        "name":"firstHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":132,
          "endLine":132
        }
      },
      "ann":[],
      "doc":[],
      "name":"firstHalf",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":132,
        "endLine":135
      }
    },{
      "sym":{
        "namespace":["Day02"],
        "name":"secondHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":138,
          "endLine":138
        }
      },
      "ann":[],
      "doc":[],
      "name":"secondHalf",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":138,
        "endLine":141
      }
    }],
    "Utils":[{
      "sym":{
        "namespace":["Utils"],
        "name":"listToPair",
        "loc":{
          "name":"/Users/an/nw/flix/src/Utils.flix",
          "beginLine":14,
          "endLine":14
        }
      },
      "ann":[],
      "doc":[],
      "name":"listToPair",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"xs",
        "tpe":"List[a]"
      }],
      "tpe":"Option[(a, a)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Utils.flix",
        "beginLine":14,
        "endLine":18
      }
    },{
      "sym":{
        "namespace":["Utils"],
        "name":"readFile",
        "loc":{
          "name":"/Users/an/nw/flix/src/Utils.flix",
          "beginLine":2,
          "endLine":2
        }
      },
      "ann":[],
      "doc":[],
      "name":"readFile",
      "tparams":[],
      "fparams":[{
        "name":"filename",
        "tpe":"String"
      }],
      "tpe":"Result[String, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Utils.flix",
        "beginLine":2,
        "endLine":7
      }
    },{
      "sym":{
        "namespace":["Utils"],
        "name":"readToLines",
        "loc":{
          "name":"/Users/an/nw/flix/src/Utils.flix",
          "beginLine":9,
          "endLine":9
        }
      },
      "ann":[],
      "doc":[],
      "name":"readToLines",
      "tparams":[],
      "fparams":[{
        "name":"filename",
        "tpe":"String"
      }],
      "tpe":"Result[List[String], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Utils.flix",
        "beginLine":9,
        "endLine":12
      }
    }],
    "System/StdOut":[{
      "sym":{
        "namespace":["System","StdOut"],
        "name":"flush",
        "loc":{
          "name":"System.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":["Flushes the standard output stream."],
      "name":"flush",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":92,
        "endLine":94
      }
    },{
      "sym":{
        "namespace":["System","StdOut"],
        "name":"newLine",
        "loc":{
          "name":"System.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["Prints a newline to the standard output stream."],
      "name":"newLine",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":85,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["System","StdOut"],
        "name":"print",
        "loc":{
          "name":"System.flix",
          "beginLine":71,
          "endLine":71
        }
      },
      "ann":[],
      "doc":["Prints the given string `s` to the standard output stream."],
      "name":"print",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":71,
        "endLine":73
      }
    },{
      "sym":{
        "namespace":["System","StdOut"],
        "name":"println",
        "loc":{
          "name":"System.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Prints the given string `s` and a newline to the standard output stream."],
      "name":"println",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":78,
        "endLine":80
      }
    }],
    "Day01":[{
      "sym":{
        "namespace":["Day01"],
        "name":"partOne",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":49,
          "endLine":49
        }
      },
      "ann":[],
      "doc":[],
      "name":"partOne",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":49,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Day01"],
        "name":"partTwo",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":52,
          "endLine":52
        }
      },
      "ann":[],
      "doc":[],
      "name":"partTwo",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":52,
        "endLine":53
      }
    }],
    "Monoid":[{
      "sym":{
        "namespace":["Monoid"],
        "name":"fold",
        "loc":{
          "name":"Monoid.flix",
          "beginLine":46,
          "endLine":46
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `t`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"f[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Monoid.flix",
        "beginLine":46,
        "endLine":46
      }
    }],
    "Random":[{
      "sym":{
        "namespace":["Random"],
        "name":"choose",
        "loc":{
          "name":"Random.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "ann":[],
      "doc":["Returns a pseudorandom element from the given array `a` using the random number generator `r`.","","Returns `None` if the given array `a` is empty."],
      "name":"choose",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":22,
        "endLine":29
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"new",
        "loc":{
          "name":"Random.flix",
          "beginLine":6,
          "endLine":6
        }
      },
      "ann":[],
      "doc":["Returns a fresh random number generator."],
      "name":"new",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Random",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":6,
        "endLine":8
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"newWithSeed",
        "loc":{
          "name":"Random.flix",
          "beginLine":13,
          "endLine":13
        }
      },
      "ann":[],
      "doc":["Returns a fresh random number generator initialized with the given seed `s`."],
      "name":"newWithSeed",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"Int64"
      }],
      "tpe":"Random",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":13,
        "endLine":15
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextBool",
        "loc":{
          "name":"Random.flix",
          "beginLine":34,
          "endLine":34
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom boolean from the given random number generator `r`."],
      "name":"nextBool",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Bool",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":34,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextFloat32",
        "loc":{
          "name":"Random.flix",
          "beginLine":42,
          "endLine":42
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom 32-bit floating point number from the given random number generator `r`."],
      "name":"nextFloat32",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Float32",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":42,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextFloat64",
        "loc":{
          "name":"Random.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom 64-bit floating point number from the given random number generator `r`."],
      "name":"nextFloat64",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Float64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":50,
        "endLine":53
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextGaussian",
        "loc":{
          "name":"Random.flix",
          "beginLine":74,
          "endLine":74
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom Gaussian distributed 64-bit floating point number."],
      "name":"nextGaussian",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Float64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":74,
        "endLine":77
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextInt32",
        "loc":{
          "name":"Random.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom 32-bit integer value from the given random number generator `r`."],
      "name":"nextInt32",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Int32",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":58,
        "endLine":61
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextInt64",
        "loc":{
          "name":"Random.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom 64-bit integer value from the given random number generator `r`."],
      "name":"nextInt64",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      }],
      "tpe":"Int64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":66,
        "endLine":69
      }
    },{
      "sym":{
        "namespace":["Random"],
        "name":"nextNatWithMax",
        "loc":{
          "name":"Random.flix",
          "beginLine":82,
          "endLine":82
        }
      },
      "ann":[],
      "doc":["Returns the next pseudorandom 32-bit integer value between `0` and `m` (exclusive) using the given random number generator `r`."],
      "name":"nextNatWithMax",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Random"
      },{
        "name":"m",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Random.flix",
        "beginLine":82,
        "endLine":85
      }
    }],
    "Int32":[{
      "sym":{
        "namespace":["Int32"],
        "name":"abs",
        "loc":{
          "name":"Int32.flix",
          "beginLine":56,
          "endLine":56
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`.","If the absolute value exceeds maxValue(), -1 is returned."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":56,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"bitCount",
        "loc":{
          "name":"Int32.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Returns the number of one-bits in the two's complement binary","representation of `x`."],
      "name":"bitCount",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":105,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"clampToInt16",
        "loc":{
          "name":"Int32.flix",
          "beginLine":415,
          "endLine":415
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int16`.","","Returns `x` clamped within the Int16 range `min` to `max`."],
      "name":"clampToInt16",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int16 }"
      },{
        "name":"max",
        "tpe":"{ max = Int16 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":415,
        "endLine":420
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"clampToInt8",
        "loc":{
          "name":"Int32.flix",
          "beginLine":402,
          "endLine":402
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `min` to `max`."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int8 }"
      },{
        "name":"max",
        "tpe":"{ max = Int8 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":402,
        "endLine":407
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"clearBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` cleared (to 0).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 31 (leftmost bit)"],
      "name":"clearBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":237,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"compare",
        "loc":{
          "name":"Int32.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > y, -1 if x < y, and 0 if x = y.","The sign of x - y."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      },{
        "name":"y",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":78,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"dist",
        "loc":{
          "name":"Int32.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`.","If this distance exceeds maxValue(), -1 is returned."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      },{
        "name":"y",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":66,
        "endLine":72
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"factorial",
        "loc":{
          "name":"Int32.flix",
          "beginLine":261,
          "endLine":261
        }
      },
      "ann":[],
      "doc":["Returns the factorial of `x`.","If the given value is negative, 0 is returned."],
      "name":"factorial",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":261,
        "endLine":270
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"flipBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":244,
          "endLine":244
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` flipped.","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 31 (leftmost bit)"],
      "name":"flipBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":244,
        "endLine":244
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"fromString",
        "loc":{
          "name":"Int32.flix",
          "beginLine":281,
          "endLine":281
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int32, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":281,
        "endLine":287
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"getBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":222,
          "endLine":222
        }
      },
      "ann":[],
      "doc":["Returns the bit of `x` at position `pos` (either 0 or 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 31 (leftmost bit)"],
      "name":"getBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":222,
        "endLine":223
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"highestOneBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"highestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":182,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"highestOneBitPosition",
        "loc":{
          "name":"Int32.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Returns the position of the highest-order/leftmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 31 (leftmost bit)","-1 if x = 0"],
      "name":"highestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":151,
        "endLine":153
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"log2",
        "loc":{
          "name":"Int32.flix",
          "beginLine":250,
          "endLine":250
        }
      },
      "ann":[],
      "doc":["Returns the integer binary logarithm of `x`.","If the given value is 0 or negative, 0 is returned."],
      "name":"log2",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":250,
        "endLine":255
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"logicalRightShift",
        "loc":{
          "name":"Int32.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the logical right shift of `x` by `dist`.","Only the rightmost 5 bits of `dist` are considered (ie. `dist rem 32`).","A zero is shifted into the leftmost position regardless of sign extension."],
      "name":"logicalRightShift",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":95,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"lowestOneBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"lowestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":190,
        "endLine":191
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"lowestOneBitPosition",
        "loc":{
          "name":"Int32.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Returns the position of the lowest-order/rightmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 31 (leftmost bit)","-1 if x = 0"],
      "name":"lowestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":160,
        "endLine":162
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"max",
        "loc":{
          "name":"Int32.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      },{
        "name":"y",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"maxValue",
        "loc":{
          "name":"Int32.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by an `Int32`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"min",
        "loc":{
          "name":"Int32.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      },{
        "name":"y",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"minValue",
        "loc":{
          "name":"Int32.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by an `Int32`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"numberOfLeadingZeros",
        "loc":{
          "name":"Int32.flix",
          "beginLine":206,
          "endLine":206
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits preceding the","highest-order/leftmost one-bit in `x`.","Returns 32 if x=0."],
      "name":"numberOfLeadingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":206,
        "endLine":207
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"numberOfTrailingZeros",
        "loc":{
          "name":"Int32.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits following the","lowest-order/rightmost one-bit in `x`.","Returns 32 if x=0."],
      "name":"numberOfTrailingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":214,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"parse",
        "loc":{
          "name":"Int32.flix",
          "beginLine":294,
          "endLine":294
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int32, where the `radix` is used while parsing.","Leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Ok(x)`, a parse failure is indicated by `Err(_)`."],
      "name":"parse",
      "tparams":[],
      "fparams":[{
        "name":"radix",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":294,
        "endLine":301
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"reverse",
        "loc":{
          "name":"Int32.flix",
          "beginLine":129,
          "endLine":129
        }
      },
      "ann":[],
      "doc":["Returns the value obtained by reversing the bits in the","two's complement binary representation of `x`."],
      "name":"reverse",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":129,
        "endLine":129
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"rotateLeft",
        "loc":{
          "name":"Int32.flix",
          "beginLine":122,
          "endLine":122
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` left by `dist` bits."],
      "name":"rotateLeft",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":122,
        "endLine":123
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"rotateRight",
        "loc":{
          "name":"Int32.flix",
          "beginLine":115,
          "endLine":115
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` right by `dist` bits."],
      "name":"rotateRight",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":115,
        "endLine":116
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"setBit",
        "loc":{
          "name":"Int32.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` set (to 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 31 (leftmost bit)"],
      "name":"setBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":230,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"signum",
        "loc":{
          "name":"Int32.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > 0, -1 if x < 0, and 0 if x = 0.","The sign of x."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":88,
        "endLine":88
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"size",
        "loc":{
          "name":"Int32.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent an `Int32`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toBigDecimal",
        "loc":{
          "name":"Int32.flix",
          "beginLine":381,
          "endLine":381
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float64.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":381,
        "endLine":383
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toBigInt",
        "loc":{
          "name":"Int32.flix",
          "beginLine":350,
          "endLine":350
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigInt.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":350,
        "endLine":354
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toFloat32",
        "loc":{
          "name":"Int32.flix",
          "beginLine":361,
          "endLine":361
        }
      },
      "ann":[],
      "doc":["Convert `x` to an Float32.","","The numeric value of `x` may lose precision."],
      "name":"toFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":361,
        "endLine":364
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toFloat64",
        "loc":{
          "name":"Int32.flix",
          "beginLine":371,
          "endLine":371
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float64.","","The numeric value of `x` is preserved exactly."],
      "name":"toFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":371,
        "endLine":374
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toInt64",
        "loc":{
          "name":"Int32.flix",
          "beginLine":340,
          "endLine":340
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Int64.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":340,
        "endLine":343
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"toString",
        "loc":{
          "name":"Int32.flix",
          "beginLine":275,
          "endLine":275
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":275,
        "endLine":275
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"tryToInt16",
        "loc":{
          "name":"Int32.flix",
          "beginLine":327,
          "endLine":327
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767)."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":327,
        "endLine":333
      }
    },{
      "sym":{
        "namespace":["Int32"],
        "name":"tryToInt8",
        "loc":{
          "name":"Int32.flix",
          "beginLine":311,
          "endLine":311
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127)."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int32"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int32.flix",
        "beginLine":311,
        "endLine":317
      }
    }],
    "Set":[{
      "sym":{
        "namespace":["Set"],
        "name":"count",
        "loc":{
          "name":"Set.flix",
          "beginLine":350,
          "endLine":350
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the number of elements in `s` that satisfy the predicate `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":350,
        "endLine":361
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"difference",
        "loc":{
          "name":"Set.flix",
          "beginLine":458,
          "endLine":458
        }
      },
      "ann":[],
      "doc":["Returns the difference of `s1` and `s2`, i.e. `s1 - s2`."],
      "name":"difference",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"Set[a]"
      },{
        "name":"s2",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":458,
        "endLine":459
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"empty",
        "loc":{
          "name":"Set.flix",
          "beginLine":143,
          "endLine":143
        }
      },
      "ann":[],
      "doc":["Returns the empty set.","","`Set#{}` is syntactic sugar for `empty` i.e. `Set#{} == empty()`."],
      "name":"empty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":143,
        "endLine":143
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"enumerator",
        "loc":{
          "name":"Set.flix",
          "beginLine":613,
          "endLine":613
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `s` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":613,
        "endLine":614
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"exists",
        "loc":{
          "name":"Set.flix",
          "beginLine":424,
          "endLine":424
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `s` satisfies the predicate `f`.","","Returns `false` if `s` is the empty set."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":424,
        "endLine":426
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"filter",
        "loc":{
          "name":"Set.flix",
          "beginLine":470,
          "endLine":470
        }
      },
      "ann":[],
      "doc":["Returns the set of all elements of `s` that satisfy the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":470,
        "endLine":471
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"filterMap",
        "loc":{
          "name":"Set.flix",
          "beginLine":490,
          "endLine":490
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `s`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":490,
        "endLine":495
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"find",
        "loc":{
          "name":"Set.flix",
          "beginLine":271,
          "endLine":271
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":271,
        "endLine":271
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"findLeft",
        "loc":{
          "name":"Set.flix",
          "beginLine":276,
          "endLine":276
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `s` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":276,
        "endLine":278
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"findRight",
        "loc":{
          "name":"Set.flix",
          "beginLine":283,
          "endLine":283
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `s` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":283,
        "endLine":285
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"flatMap",
        "loc":{
          "name":"Set.flix",
          "beginLine":484,
          "endLine":484
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `s` and taking the union."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Set[b] & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":484,
        "endLine":485
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"flatten",
        "loc":{
          "name":"Set.flix",
          "beginLine":416,
          "endLine":416
        }
      },
      "ann":[],
      "doc":["Returns the union of the elements in `s`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[Set[a]]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":416,
        "endLine":417
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"fold",
        "loc":{
          "name":"Set.flix",
          "beginLine":290,
          "endLine":290
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `s`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":290,
        "endLine":290
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"foldLeft",
        "loc":{
          "name":"Set.flix",
          "beginLine":297,
          "endLine":297
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `s` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"s1",
        "tpe":"Set[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":297,
        "endLine":299
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"foldMap",
        "loc":{
          "name":"Set.flix",
          "beginLine":323,
          "endLine":323
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":323,
        "endLine":324
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"foldRight",
        "loc":{
          "name":"Set.flix",
          "beginLine":306,
          "endLine":306
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `s1` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"s1",
        "tpe":"Set[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":306,
        "endLine":308
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Set.flix",
          "beginLine":316,
          "endLine":316
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `s` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":316,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"forAll",
        "loc":{
          "name":"Set.flix",
          "beginLine":433,
          "endLine":433
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `s` satisfy the predicate `f`.","","Returns `true` if `s` is the empty set."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":433,
        "endLine":435
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"forEach",
        "loc":{
          "name":"Set.flix",
          "beginLine":564,
          "endLine":564
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `s`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":564,
        "endLine":566
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"insert",
        "loc":{
          "name":"Set.flix",
          "beginLine":148,
          "endLine":148
        }
      },
      "ann":[],
      "doc":["Adds `x` to `s`."],
      "name":"insert",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":148,
        "endLine":150
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"intersection",
        "loc":{
          "name":"Set.flix",
          "beginLine":452,
          "endLine":452
        }
      },
      "ann":[],
      "doc":["Returns the intersection of `s1` and `s2`."],
      "name":"intersection",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"Set[a]"
      },{
        "name":"s2",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":452,
        "endLine":453
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"isEmpty",
        "loc":{
          "name":"Set.flix",
          "beginLine":162,
          "endLine":162
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `s` is the empty set."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":162,
        "endLine":164
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"isProperSubsetOf",
        "loc":{
          "name":"Set.flix",
          "beginLine":266,
          "endLine":266
        }
      },
      "ann":[],
      "doc":["Returns true if and only if every element in `s1` appears in `s2` and `s != s2`."],
      "name":"isProperSubsetOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"Set[a]"
      },{
        "name":"s2",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":266,
        "endLine":266
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"isSubsetOf",
        "loc":{
          "name":"Set.flix",
          "beginLine":261,
          "endLine":261
        }
      },
      "ann":[],
      "doc":["Returns true if and only if every element in `s1` appears in `s2`."],
      "name":"isSubsetOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"Set[a]"
      },{
        "name":"s2",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":261,
        "endLine":261
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"iterator",
        "loc":{
          "name":"Set.flix",
          "beginLine":606,
          "endLine":606
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `s`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":606,
        "endLine":608
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"join",
        "loc":{
          "name":"Set.flix",
          "beginLine":620,
          "endLine":620
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `s` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":620,
        "endLine":621
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"joinWith",
        "loc":{
          "name":"Set.flix",
          "beginLine":627,
          "endLine":627
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `s` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":627,
        "endLine":628
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"map",
        "loc":{
          "name":"Set.flix",
          "beginLine":478,
          "endLine":478
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `s`.","","Note: The returned set may be smaller than `s`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":478,
        "endLine":479
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"maximum",
        "loc":{
          "name":"Set.flix",
          "beginLine":231,
          "endLine":231
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `s` according to the `Order` on `a`.","","Returns `None` if `s` is empty."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":231,
        "endLine":233
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"maximumBy",
        "loc":{
          "name":"Set.flix",
          "beginLine":243,
          "endLine":243
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds the largest element of `s` according to the given comparator `cmp`.","","Returns `None` if `s` is empty.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":243,
        "endLine":256
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"memberOf",
        "loc":{
          "name":"Set.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is a member of `s`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":190,
        "endLine":192
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"minimum",
        "loc":{
          "name":"Set.flix",
          "beginLine":199,
          "endLine":199
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `s` according to the `Order` on `a`.","","Returns `None` if `s` is empty."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":199,
        "endLine":201
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"minimumBy",
        "loc":{
          "name":"Set.flix",
          "beginLine":211,
          "endLine":211
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds the smallest element of `s` according to the given comparator `cmp`.","","Returns `None` if `s` is empty.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":211,
        "endLine":224
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"partition",
        "loc":{
          "name":"Set.flix",
          "beginLine":511,
          "endLine":511
        }
      },
      "ann":[],
      "doc":["Returns a pair of sets `(s1, s2)`.","","`s1` contains all elements of `s` that satisfy the predicate `f`.","`s2` contains all elements of `s` that do not satisfy the predicate `f`."],
      "name":"partition",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"(Set[a], Set[a])",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":511,
        "endLine":518
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"product",
        "loc":{
          "name":"Set.flix",
          "beginLine":391,
          "endLine":391
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the set `s`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"Set[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":391,
        "endLine":392
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"productWith",
        "loc":{
          "name":"Set.flix",
          "beginLine":400,
          "endLine":400
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the product of all elements in the set `s` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":400,
        "endLine":411
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"range",
        "loc":{
          "name":"Set.flix",
          "beginLine":178,
          "endLine":178
        }
      },
      "ann":[],
      "doc":["Returns a set of all integers between `b` (inclusive) and `e` (exclusive).","","Returns `empty()` if `b >= e`."],
      "name":"range",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"Set[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":178,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"reduceLeft",
        "loc":{
          "name":"Set.flix",
          "beginLine":331,
          "endLine":331
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `s` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","That is, the result is of the form: `Some(f(...f(f(x1, x2), x3)..., xn))`","Returns `None` if `s` is the empty set."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":331,
        "endLine":333
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"reduceRight",
        "loc":{
          "name":"Set.flix",
          "beginLine":340,
          "endLine":340
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `s` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`","Returns `None` if `s` is the empty set."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":340,
        "endLine":342
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"remove",
        "loc":{
          "name":"Set.flix",
          "beginLine":155,
          "endLine":155
        }
      },
      "ann":[],
      "doc":["Removes `x` from `s`."],
      "name":"remove",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":155,
        "endLine":157
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"replace",
        "loc":{
          "name":"Set.flix",
          "beginLine":502,
          "endLine":502
        }
      },
      "ann":[],
      "doc":["Replaces the element `from` with `to` if `from` is in `s`. Otherwise, returns `s`.","","Note: The returned set may be smaller than `s`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":502,
        "endLine":503
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"singleton",
        "loc":{
          "name":"Set.flix",
          "beginLine":171,
          "endLine":171
        }
      },
      "ann":[],
      "doc":["Returns the singleton set containing `x`.","","`Set#{x}` is syntactic sugar for `singleton` i.e. `Set#{x} == singleton(x)`."],
      "name":"singleton",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":171,
        "endLine":171
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"size",
        "loc":{
          "name":"Set.flix",
          "beginLine":134,
          "endLine":134
        }
      },
      "ann":[],
      "doc":["Returns the size of `s`."],
      "name":"size",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":134,
        "endLine":136
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"subsets",
        "loc":{
          "name":"Set.flix",
          "beginLine":464,
          "endLine":464
        }
      },
      "ann":[],
      "doc":["Returns all subsets of `s`."],
      "name":"subsets",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[Set[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":464,
        "endLine":465
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"sum",
        "loc":{
          "name":"Set.flix",
          "beginLine":366,
          "endLine":366
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the set `s`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"Set[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":366,
        "endLine":367
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"sumWith",
        "loc":{
          "name":"Set.flix",
          "beginLine":375,
          "endLine":375
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the sum of all elements in the set `s` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":375,
        "endLine":386
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toChain",
        "loc":{
          "name":"Set.flix",
          "beginLine":529,
          "endLine":529
        }
      },
      "ann":[],
      "doc":["Returns the set `s` as a chain."],
      "name":"toChain",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":529,
        "endLine":530
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toDelayList",
        "loc":{
          "name":"Set.flix",
          "beginLine":600,
          "endLine":600
        }
      },
      "ann":[],
      "doc":["Returns the set `s` as a `DelayList`."],
      "name":"toDelayList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":600,
        "endLine":601
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toList",
        "loc":{
          "name":"Set.flix",
          "beginLine":523,
          "endLine":523
        }
      },
      "ann":[],
      "doc":["Returns the set `s` as a list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":523,
        "endLine":524
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toMap",
        "loc":{
          "name":"Set.flix",
          "beginLine":538,
          "endLine":538
        }
      },
      "ann":[],
      "doc":["Returns the association set `s` as a map.","","If `s` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[(a, b)]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":538,
        "endLine":539
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toMapWith",
        "loc":{
          "name":"Set.flix",
          "beginLine":544,
          "endLine":544
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `s` as keys and `f` applied as values."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":544,
        "endLine":545
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toMutDeque",
        "loc":{
          "name":"Set.flix",
          "beginLine":550,
          "endLine":550
        }
      },
      "ann":[],
      "doc":["Returns `s` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":550,
        "endLine":553
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toMutSet",
        "loc":{
          "name":"Set.flix",
          "beginLine":558,
          "endLine":558
        }
      },
      "ann":[],
      "doc":["Returns the set `s` as a `MutSet`."],
      "name":"toMutSet",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"MutSet[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Set.flix",
        "beginLine":558,
        "endLine":559
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"toString",
        "loc":{
          "name":"Set.flix",
          "beginLine":100,
          "endLine":100
        }
      },
      "ann":[],
      "doc":["Returns a string representation of the given set `s`."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"Set[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":100,
        "endLine":111
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"unfold",
        "loc":{
          "name":"Set.flix",
          "beginLine":575,
          "endLine":575
        }
      },
      "ann":[],
      "doc":["Build a set by applying `f` to the seed value `st`.","","`f` should return `Some(a,st1)` to signal a new set element `a` and a new seed value `st1`.","","`f` should return `None` to signal the end of building the set."],
      "name":"unfold",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> Option[(a, s)] & ef \\ ef'"
      },{
        "name":"st",
        "tpe":"s"
      }],
      "tpe":"Set[a]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":575,
        "endLine":580
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"unfoldWithIter",
        "loc":{
          "name":"Set.flix",
          "beginLine":590,
          "endLine":590
        }
      },
      "ann":[],
      "doc":["Build a set by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Some(a)` to signal a value pair `a`.","","`next` should return `None` to signal the end of building the set."],
      "name":"unfoldWithIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"next",
        "tpe":"Unit -> Option[a] & ef \\ ef'"
      }],
      "tpe":"Set[a]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":590,
        "endLine":595
      }
    },{
      "sym":{
        "namespace":["Set"],
        "name":"union",
        "loc":{
          "name":"Set.flix",
          "beginLine":440,
          "endLine":440
        }
      },
      "ann":[],
      "doc":["Returns the union of `s1` and `s2`."],
      "name":"union",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"Set[a]"
      },{
        "name":"s2",
        "tpe":"Set[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Set.flix",
        "beginLine":440,
        "endLine":447
      }
    }],
    "Day06":[{
      "sym":{
        "namespace":["Day06"],
        "name":"partOne",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day06.flix",
          "beginLine":5,
          "endLine":5
        }
      },
      "ann":[],
      "doc":[],
      "name":"partOne",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day06.flix",
        "beginLine":5,
        "endLine":8
      }
    },{
      "sym":{
        "namespace":["Day06"],
        "name":"partTwo",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day06.flix",
          "beginLine":10,
          "endLine":10
        }
      },
      "ann":[],
      "doc":[],
      "name":"partTwo",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day06.flix",
        "beginLine":10,
        "endLine":13
      }
    }],
    "Environment":[{
      "sym":{
        "namespace":["Environment"],
        "name":"getArgs",
        "loc":{
          "name":"Environment.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "ann":[],
      "doc":["Returns the arguments passed to the program via the command line."],
      "name":"getArgs",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":21,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getCurrentWorkingDirectory",
        "loc":{
          "name":"Environment.flix",
          "beginLine":106,
          "endLine":106
        }
      },
      "ann":[],
      "doc":["Returns the user's current working directory"],
      "name":"getCurrentWorkingDirectory",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":106,
        "endLine":106
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getEnv",
        "loc":{
          "name":"Environment.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns an map of the current system environment."],
      "name":"getEnv",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Map[String, String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":30,
        "endLine":41
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getFileSeparator",
        "loc":{
          "name":"Environment.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["Returns the file separator"],
      "name":"getFileSeparator",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":85,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getLineSeparator",
        "loc":{
          "name":"Environment.flix",
          "beginLine":99,
          "endLine":99
        }
      },
      "ann":[],
      "doc":["Returns the system line separator"],
      "name":"getLineSeparator",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":99,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getOsArch",
        "loc":{
          "name":"Environment.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":[],
      "doc":["Returns the operating system architecture"],
      "name":"getOsArch",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":75,
        "endLine":75
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getOsName",
        "loc":{
          "name":"Environment.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["Returns the operating system name"],
      "name":"getOsName",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":70,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getOsVersion",
        "loc":{
          "name":"Environment.flix",
          "beginLine":80,
          "endLine":80
        }
      },
      "ann":[],
      "doc":["Returns the operating system version"],
      "name":"getOsVersion",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":80,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getPathSeparator",
        "loc":{
          "name":"Environment.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":["Returns the path separator"],
      "name":"getPathSeparator",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":92,
        "endLine":94
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getProp",
        "loc":{
          "name":"Environment.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":[],
      "doc":["Returns the system property by name."],
      "name":"getProp",
      "tparams":[],
      "fparams":[{
        "name":"name",
        "tpe":"String"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":58,
        "endLine":65
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getTemporaryDirectory",
        "loc":{
          "name":"Environment.flix",
          "beginLine":111,
          "endLine":111
        }
      },
      "ann":[],
      "doc":["Returns the default temp file path"],
      "name":"getTemporaryDirectory",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":111,
        "endLine":111
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getUserHomeDirectory",
        "loc":{
          "name":"Environment.flix",
          "beginLine":121,
          "endLine":121
        }
      },
      "ann":[],
      "doc":["Returns the user's home directory"],
      "name":"getUserHomeDirectory",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":121,
        "endLine":121
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getUserName",
        "loc":{
          "name":"Environment.flix",
          "beginLine":116,
          "endLine":116
        }
      },
      "ann":[],
      "doc":["Returns the user's account name"],
      "name":"getUserName",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":116,
        "endLine":116
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getVar",
        "loc":{
          "name":"Environment.flix",
          "beginLine":46,
          "endLine":46
        }
      },
      "ann":[],
      "doc":["Returns the value of the specified environment variable."],
      "name":"getVar",
      "tparams":[],
      "fparams":[{
        "name":"name",
        "tpe":"String"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":46,
        "endLine":53
      }
    },{
      "sym":{
        "namespace":["Environment"],
        "name":"getVirtualProcessors",
        "loc":{
          "name":"Environment.flix",
          "beginLine":128,
          "endLine":128
        }
      },
      "ann":[],
      "doc":["Returns the number of virtual processors available to the JVM.","","The returned value is never less than one."],
      "name":"getVirtualProcessors",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Environment.flix",
        "beginLine":128,
        "endLine":131
      }
    }],
    "Float64":[{
      "sym":{
        "namespace":["Float64"],
        "name":"abs",
        "loc":{
          "name":"Float64.flix",
          "beginLine":340,
          "endLine":340
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":340,
        "endLine":342
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"ceil",
        "loc":{
          "name":"Float64.flix",
          "beginLine":347,
          "endLine":347
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded up to a Float64 representing the nearest larger integer value."],
      "name":"ceil",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":347,
        "endLine":349
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"clampToFloat32",
        "loc":{
          "name":"Float64.flix",
          "beginLine":327,
          "endLine":327
        }
      },
      "ann":[],
      "doc":["Convert `x` to a `Float32`.","","Returns `x` clamped within the Float32 range `minimum` to `maximum`."],
      "name":"clampToFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"minimum",
        "tpe":"Float32"
      },{
        "name":"maximum",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":327,
        "endLine":335
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"clampToInt16",
        "loc":{
          "name":"Float64.flix",
          "beginLine":276,
          "endLine":276
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int16`.","","Returns `x` clamped within the Int16 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int16 risks masking it."],
      "name":"clampToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"minimum",
        "tpe":"Int16"
      },{
        "name":"maximum",
        "tpe":"Int16"
      },{
        "name":"nanValue",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":276,
        "endLine":284
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"clampToInt32",
        "loc":{
          "name":"Float64.flix",
          "beginLine":294,
          "endLine":294
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int32`.","","Returns `x` clamped within the Int32 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int32 risks masking it."],
      "name":"clampToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"minimum",
        "tpe":"Int32"
      },{
        "name":"maximum",
        "tpe":"Int32"
      },{
        "name":"nanValue",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":294,
        "endLine":302
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"clampToInt64",
        "loc":{
          "name":"Float64.flix",
          "beginLine":312,
          "endLine":312
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int64`.","","Returns `x` clamped within the Int64 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int64 risks masking it."],
      "name":"clampToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"minimum",
        "tpe":"Int64"
      },{
        "name":"maximum",
        "tpe":"Int64"
      },{
        "name":"nanValue",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":312,
        "endLine":320
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"clampToInt8",
        "loc":{
          "name":"Float64.flix",
          "beginLine":258,
          "endLine":258
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int8 risks masking it."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"minimum",
        "tpe":"Int8"
      },{
        "name":"maximum",
        "tpe":"Int8"
      },{
        "name":"nanValue",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":258,
        "endLine":266
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"floor",
        "loc":{
          "name":"Float64.flix",
          "beginLine":354,
          "endLine":354
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded down to a Float64 representing the nearest smaller integer value."],
      "name":"floor",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":354,
        "endLine":356
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"fromString",
        "loc":{
          "name":"Float64.flix",
          "beginLine":106,
          "endLine":106
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as a Float64, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Float64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":106,
        "endLine":112
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"isFinite",
        "loc":{
          "name":"Float64.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is a non-infinite and non-Nan `Float64` value."],
      "name":"isFinite",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":75,
        "endLine":75
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"isInfinite",
        "loc":{
          "name":"Float64.flix",
          "beginLine":80,
          "endLine":80
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is an infinite and non-Nan `Float64` value."],
      "name":"isInfinite",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":80,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"isNan",
        "loc":{
          "name":"Float64.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is the NaN value of type `Float64`."],
      "name":"isNan",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":85,
        "endLine":85
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"max",
        "loc":{
          "name":"Float64.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"y",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":95,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"maxExponent",
        "loc":{
          "name":"Float64.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the maximum exponent that a `Float64` may have."],
      "name":"maxExponent",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"maxValue",
        "loc":{
          "name":"Float64.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by a `Float64`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"min",
        "loc":{
          "name":"Float64.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      },{
        "name":"y",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":90,
        "endLine":90
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"minExponent",
        "loc":{
          "name":"Float64.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the minimum exponent that a `Float64` may have."],
      "name":"minExponent",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"minPositiveValue",
        "loc":{
          "name":"Float64.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":[],
      "doc":["Returns the minimum positive number representable by a `Float64`."],
      "name":"minPositiveValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":55,
        "endLine":55
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"minValue",
        "loc":{
          "name":"Float64.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by a `Float64`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"nan",
        "loc":{
          "name":"Float64.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Returns the NaN (not a number) value of type `Float64`."],
      "name":"nan",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":60,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"negativeInfinity",
        "loc":{
          "name":"Float64.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["Returns the negative infinity value of type `Float64`."],
      "name":"negativeInfinity",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":70,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"positiveInfinity",
        "loc":{
          "name":"Float64.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Returns the positive infinity value of type `Float64`."],
      "name":"positiveInfinity",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":65,
        "endLine":65
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"round",
        "loc":{
          "name":"Float64.flix",
          "beginLine":364,
          "endLine":364
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded to a Float64 representing the nearest integer value.","","The rounding may be upwards or downwards. If the rounding up and rounding down are equally","close, `x` will be rounded to an even value (i.e. `round(0.5f64) == 0.0f64`)."],
      "name":"round",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":364,
        "endLine":366
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"size",
        "loc":{
          "name":"Float64.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent a `Float64`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"toString",
        "loc":{
          "name":"Float64.flix",
          "beginLine":100,
          "endLine":100
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":100,
        "endLine":100
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToBigDecimal",
        "loc":{
          "name":"Float64.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[BigDecimal]`.","","Returns `Some(x as BigDecimal)` if the numeric value of `x` is representable","as a BigDecimal value.","","If `x` is NaN or infinity return `None`."],
      "name":"tryToBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[BigDecimal]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":230,
        "endLine":236
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToBigInt",
        "loc":{
          "name":"Float64.flix",
          "beginLine":192,
          "endLine":192
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[BigInt]`.","","Returns `Some(x as BigInt)` if the numeric value of `x` is representable as a BigInt.","","Returns `None` if the value of `x` is NaN or infinity."],
      "name":"tryToBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[BigInt]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":192,
        "endLine":200
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToFloat32",
        "loc":{
          "name":"Float64.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Float32]`.","","Returns `Some(x as Float32)` if the numeric value of `x` is within the range","of Float32, loss of precision may occur.","","Returns `None` if the numeric value of `x` is outside the range of Float32","(i.e. 1.4E-45 to 3.4028235E38).","","If `x` is NaN return `Some(Float32.NaN)``, if `x` is positive or negative infinity return","`Some` wrapping the corresponding Float32 infinity."],
      "name":"tryToFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[Float32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":214,
        "endLine":220
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToInt16",
        "loc":{
          "name":"Float64.flix",
          "beginLine":140,
          "endLine":140
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` is within the range","of Int16, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767), or it is NaN or infinity."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":140,
        "endLine":146
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToInt32",
        "loc":{
          "name":"Float64.flix",
          "beginLine":157,
          "endLine":157
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int32]`.","","Returns `Some(x as Int32)` if the numeric value of `x` is within the range","of Int32, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int32","(i.e. -2147483648 to 2147483647), or it is NaN or infinity."],
      "name":"tryToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":157,
        "endLine":163
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToInt64",
        "loc":{
          "name":"Float64.flix",
          "beginLine":177,
          "endLine":177
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int64]`.","","Returns `Some(x as Int64)` if the numeric value of `x` is within the range","of Int64, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int64","(i.e. -9223372036854775808 to 9223372036854775807), or it is NaN or infinity.","","Note: while the range of an Int64 is precisely defined using Int64 values,","converting this range to Float64 values is imprecise."],
      "name":"tryToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[Int64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":177,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Float64"],
        "name":"tryToInt8",
        "loc":{
          "name":"Float64.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` is within the range","of Int8, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127), or it is NaN or infinity."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float64"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float64.flix",
        "beginLine":123,
        "endLine":129
      }
    }],
    "Prelude":[{
      "sym":{
        "namespace":[],
        "name":"!>",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Pipes the given value `x` into the function `f`.","","Given a value `x` and a function `f` returns `x`."],
      "name":"!>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":95,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":[],
        "name":"++",
        "loc":{
          "name":"SemiGroup.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Alias for `SemiGroup.combine`."],
      "name":"++",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"y",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"SemiGroup.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":[],
        "name":">>",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":74,
          "endLine":74
        }
      },
      "ann":[],
      "doc":["Forwards function composition. Applies the function on the left first.","","Given the functions `f: a -> b` and `g: b -> c` returns a function `a -> c`"],
      "name":">>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef1 \\ ef1'"
      },{
        "name":"g",
        "tpe":"b -> c & ef2 \\ ef2'"
      }],
      "tpe":"a -> c & ef1 and ef2 \\ {ef1', ef2'}",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":74,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":[],
        "name":"bug!",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":140,
          "endLine":140
        }
      },
      "ann":[],
      "doc":["Crashes the current process with the given message `m`."],
      "name":"bug!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"String"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":140,
        "endLine":152
      }
    },{
      "sym":{
        "namespace":[],
        "name":"calcFirstHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":118,
          "endLine":118
        }
      },
      "ann":[],
      "doc":[],
      "name":"calcFirstHalf",
      "tparams":[],
      "fparams":[{
        "name":"input",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":118,
        "endLine":123
      }
    },{
      "sym":{
        "namespace":[],
        "name":"calcSecondHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":111,
          "endLine":111
        }
      },
      "ann":[],
      "doc":[],
      "name":"calcSecondHalf",
      "tparams":[],
      "fparams":[{
        "name":"input",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":111,
        "endLine":116
      }
    },{
      "sym":{
        "namespace":[],
        "name":"charToResultChoice",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":17,
          "endLine":17
        }
      },
      "ann":[],
      "doc":[],
      "name":"charToResultChoice",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"GameResult",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":17,
        "endLine":21
      }
    },{
      "sym":{
        "namespace":[],
        "name":"charToShape",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":11,
          "endLine":11
        }
      },
      "ann":[],
      "doc":[],
      "name":"charToShape",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Shape",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":11,
        "endLine":15
      }
    },{
      "sym":{
        "namespace":[],
        "name":"debug",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":119,
          "endLine":119
        }
      },
      "ann":[],
      "doc":["Prints the stringified representation of `x`.","","WARNING: The debug function is pure hence if the","result is unused it may be removed by the compiler!"],
      "name":"debug",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":119,
        "endLine":119
      }
    },{
      "sym":{
        "namespace":[],
        "name":"debug!",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":127,
          "endLine":127
        }
      },
      "ann":[],
      "doc":["Prints the stringified representation of `x`.","","WARNING: The debug function is pure hence if the","result is unused it may be removed by the compiler!"],
      "name":"debug!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":127,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":[],
        "name":"debug!!",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":135,
          "endLine":135
        }
      },
      "ann":[],
      "doc":["Prints the stringified representation of `x`.","","WARNING: The debug function is pure hence if the","result is unused it may be removed by the compiler!"],
      "name":"debug!!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":135,
        "endLine":135
      }
    },{
      "sym":{
        "namespace":[],
        "name":"enumerator",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":42,
          "endLine":42
        }
      },
      "ann":[],
      "doc":["Alias for `Foldable.iterator |> Iterable.enumerator`."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"t",
        "tpe":"t[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":42,
        "endLine":43
      }
    },{
      "sym":{
        "namespace":[],
        "name":"findMostCalories",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":26,
          "endLine":26
        }
      },
      "ann":[],
      "doc":[],
      "name":"findMostCalories",
      "tparams":[],
      "fparams":[{
        "name":"input",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":26,
        "endLine":34
      }
    },{
      "sym":{
        "namespace":[],
        "name":"flip",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":39,
          "endLine":39
        }
      },
      "ann":[],
      "doc":["Returns the function `f` with input arguments swapped.","That is, given the function `f: (a, b) -> c`, returns a function `(b, a) -> c`"],
      "name":"flip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      }],
      "tpe":"b -> (a -> c & ef \\ ef')",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":39,
        "endLine":39
      }
    },{
      "sym":{
        "namespace":[],
        "name":"fst",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the first component of `t`."],
      "name":"fst",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"(a, b)"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":50,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":[],
        "name":"getRoundScore",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":109,
          "endLine":109
        }
      },
      "ann":[],
      "doc":[],
      "name":"getRoundScore",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Round"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":109,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":[],
        "name":"identity",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "ann":[],
      "doc":[],
      "name":"identity",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":33,
        "endLine":33
      }
    },{
      "sym":{
        "namespace":[],
        "name":"iterator",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":36,
          "endLine":36
        }
      },
      "ann":[],
      "doc":["Alias for `Foldable.iterator`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"t",
        "tpe":"t[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":36,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":[],
        "name":"main",
        "loc":{
          "name":"/Users/an/nw/flix/src/Main.flix",
          "beginLine":2,
          "endLine":2
        }
      },
      "ann":[],
      "doc":[],
      "name":"main",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Main.flix",
        "beginLine":2,
        "endLine":11
      }
    },{
      "sym":{
        "namespace":[],
        "name":"on",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Partially applying this function in the form ``f `on` g`` lifts the binary function `f` to work on","inputs transformed by `g`."],
      "name":"on",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (b -> c & ef1 \\ ef1')"
      },{
        "name":"g",
        "tpe":"a -> b & ef2 \\ ef2'"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"y",
        "tpe":"a"
      }],
      "tpe":"c",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":[],
        "name":"pointForChoice",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":[],
      "doc":[],
      "name":"pointForChoice",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Round"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":75,
        "endLine":81
      }
    },{
      "sym":{
        "namespace":[],
        "name":"pointForRound",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":[],
      "name":"pointForRound",
      "tparams":[],
      "fparams":[{
        "name":"r",
        "tpe":"Round"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":92,
        "endLine":98
      }
    },{
      "sym":{
        "namespace":[],
        "name":"pointForRound01",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"pointForRound01",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":101,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":[],
        "name":"pointForRound02",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":104,
          "endLine":104
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"pointForRound02",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":104,
        "endLine":104
      }
    },{
      "sym":{
        "namespace":[],
        "name":"pointForRound03",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":107,
          "endLine":107
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"pointForRound03",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":107,
        "endLine":107
      }
    },{
      "sym":{
        "namespace":[],
        "name":"print",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":100,
          "endLine":100
        }
      },
      "ann":[],
      "doc":["Converts `x` to a string and prints it to standard out."],
      "name":"print",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":100,
        "endLine":103
      }
    },{
      "sym":{
        "namespace":[],
        "name":"println",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":108,
          "endLine":108
        }
      },
      "ann":[],
      "doc":["Converts `x` to a string and prints it to standard out followed by a new line."],
      "name":"println",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":108,
        "endLine":111
      }
    },{
      "sym":{
        "namespace":[],
        "name":"readInput",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":1,
          "endLine":1
        }
      },
      "ann":[],
      "doc":[],
      "name":"readInput",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[String, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":1,
        "endLine":4
      }
    },{
      "sym":{
        "namespace":[],
        "name":"shapeForDesiredResult",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":[],
      "doc":[],
      "name":"shapeForDesiredResult",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"Shape"
      },{
        "name":"r",
        "tpe":"GameResult"
      }],
      "tpe":"Shape",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":23,
        "endLine":31
      }
    },{
      "sym":{
        "namespace":[],
        "name":"snd",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":57,
          "endLine":57
        }
      },
      "ann":[],
      "doc":["Returns the second component of `t`."],
      "name":"snd",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"(a, b)"
      }],
      "tpe":"b",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":57,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":[],
        "name":"sumCalories",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":6,
          "endLine":6
        }
      },
      "ann":[],
      "doc":[],
      "name":"sumCalories",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":6,
        "endLine":9
      }
    },{
      "sym":{
        "namespace":[],
        "name":"sumTopThree",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":36,
          "endLine":36
        }
      },
      "ann":[],
      "doc":[],
      "name":"sumTopThree",
      "tparams":[],
      "fparams":[{
        "name":"input",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":36,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":[],
        "name":"swap",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Returns the pair `p` with the components swapped.","That is, returns `(y, x)` if `p = (x, y)`."],
      "name":"swap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"(a, b)"
      }],
      "tpe":"(b, a)",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":65,
        "endLine":67
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testPointForChoice01",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":84,
          "endLine":84
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testPointForChoice01",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":84,
        "endLine":84
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testPointForChoice02",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":87,
          "endLine":87
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testPointForChoice02",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":87,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testPointForChoice03",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testPointForChoice03",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":90,
        "endLine":90
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult01",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":34,
          "endLine":34
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult01",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":34,
        "endLine":34
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult02",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":37,
          "endLine":37
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult02",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":37,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult03",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult03",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult04",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":43,
          "endLine":43
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult04",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":43,
        "endLine":43
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult05",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":46,
          "endLine":46
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult05",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":46,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult06",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":49,
          "endLine":49
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult06",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":49,
        "endLine":49
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult07",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":52,
          "endLine":52
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult07",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":52,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult08",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult08",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":55,
        "endLine":55
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testShapeForDesiredResult09",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testShapeForDesiredResult09",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":58,
        "endLine":58
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testSumCalories01",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":12,
          "endLine":12
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testSumCalories01",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":12,
        "endLine":14
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testSumCalories02",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":17,
          "endLine":17
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testSumCalories02",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":17,
        "endLine":17
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testSumOfEmptyString",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":20,
          "endLine":20
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testSumOfEmptyString",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":20,
        "endLine":20
      }
    },{
      "sym":{
        "namespace":[],
        "name":"testSumOfInvalidString",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day01.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":["@Test"],
      "doc":[],
      "name":"testSumOfInvalidString",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day01.flix",
        "beginLine":23,
        "endLine":23
      }
    },{
      "sym":{
        "namespace":[],
        "name":"toRoundFirstHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":61,
          "endLine":61
        }
      },
      "ann":[],
      "doc":[],
      "name":"toRoundFirstHalf",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Round",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":61,
        "endLine":66
      }
    },{
      "sym":{
        "namespace":[],
        "name":"toRoundSecondHalf",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day02.flix",
          "beginLine":68,
          "endLine":68
        }
      },
      "ann":[],
      "doc":[],
      "name":"toRoundSecondHalf",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Round",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day02.flix",
        "beginLine":68,
        "endLine":73
      }
    },{
      "sym":{
        "namespace":[],
        "name":"unreachable!",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":157,
          "endLine":157
        }
      },
      "ann":[],
      "doc":["Asserts that this expression is unreachable. Crashes if not."],
      "name":"unreachable!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":157,
        "endLine":157
      }
    },{
      "sym":{
        "namespace":[],
        "name":"upcast",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":164,
          "endLine":164
        }
      },
      "ann":[],
      "doc":["Casts a pure function to `ef`.","","`upcast` is safe to use anywhere."],
      "name":"upcast",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      }],
      "tpe":"a -> b & ef \\ ef'",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":164,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":[],
        "name":"|+|",
        "loc":{
          "name":"CommutativeSemiGroup.flix",
          "beginLine":36,
          "endLine":36
        }
      },
      "ann":[],
      "doc":["Alias for `CommutativeSemiGroup.combine`."],
      "name":"|+|",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"y",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"CommutativeSemiGroup",
          "loc":{
            "name":"CommutativeSemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"CommutativeSemiGroup.flix",
        "beginLine":36,
        "endLine":36
      }
    },{
      "sym":{
        "namespace":[],
        "name":"|>",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":81,
          "endLine":81
        }
      },
      "ann":[],
      "doc":["Pipes the given value `x` into the function `f`.","","Given a value `x` and a function `f` returns `f(x)`."],
      "name":"|>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":81,
        "endLine":81
      }
    },{
      "sym":{
        "namespace":[],
        "name":"||>",
        "loc":{
          "name":"Prelude.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":[],
      "doc":["Pipes the given pair `x` into the function `f`.","","Given a pair `x` and a function `f` returns `f(x)`."],
      "name":"||>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"(a, b)"
      },{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      }],
      "tpe":"c",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Prelude.flix",
        "beginLine":88,
        "endLine":88
      }
    }],
    "Choice":[{
      "sym":{
        "namespace":["Choice"],
        "name":"assertAbsent",
        "loc":{
          "name":"Choice.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "ann":["@Experimental"],
      "doc":["Asserts that `c` is `Absent`. Akin to a type ascription.","","Always returns `true`."],
      "name":"assertAbsent",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, true, false]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":33,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"assertPresent",
        "loc":{
          "name":"Choice.flix",
          "beginLine":43,
          "endLine":43
        }
      },
      "ann":["@Experimental"],
      "doc":["Asserts that `c` is `Present`. Akin to a type ascription.","","Always returns `true`."],
      "name":"assertPresent",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, false, true]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":43,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"filter",
        "loc":{
          "name":"Choice.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Present(v)` if `c` is `Present(v)` and the predicate `f(v)` is true. Otherwise returns `None`.","","The function `f` must be pure."],
      "name":"filter",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Bool"
      },{
        "name":"p",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool"
      },{
        "name":"c",
        "tpe":"Choice[t, a, p]"
      }],
      "tpe":"Choice[t, a or p, p]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":101,
        "endLine":106
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"flatMap",
        "loc":{
          "name":"Choice.flix",
          "beginLine":122,
          "endLine":122
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `f(v)` if `c` is `Present(v)`. Otherwise returns `Absent`."],
      "name":"flatMap",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      },{
        "name":"a1",
        "kind":"Bool"
      },{
        "name":"p1",
        "kind":"Bool"
      },{
        "name":"a2",
        "kind":"Bool"
      },{
        "name":"p2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> Choice[t, a2, p2]"
      },{
        "name":"c",
        "tpe":"Choice[s, a1, p1]"
      }],
      "tpe":"Choice[t, a1 or (p1 and a2), p1 and p2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":122,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"flatten",
        "loc":{
          "name":"Choice.flix",
          "beginLine":133,
          "endLine":133
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `v` if `c` is `Present(v)`. Otherwise returns `Absent`."],
      "name":"flatten",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"a1",
        "kind":"Bool"
      },{
        "name":"p1",
        "kind":"Bool"
      },{
        "name":"a2",
        "kind":"Bool"
      },{
        "name":"p2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[Choice[t, a1, p1], a2, p2]"
      }],
      "tpe":"Choice[t, (a1 and p2) or a2, p1 and p2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":133,
        "endLine":138
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"getWithDefault",
        "loc":{
          "name":"Choice.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `v` if `o` is `Present(v).` Otherwise returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"pres",
        "kind":"Bool"
      },{
        "name":"abs",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"s"
      },{
        "name":"c",
        "tpe":"Choice[s, pres, abs]"
      }],
      "tpe":"s",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":78,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"invert",
        "loc":{
          "name":"Choice.flix",
          "beginLine":144,
          "endLine":144
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Absent` if `c` is `Present(_)`. Otherwise returns `Present(v)`."],
      "name":"invert",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Bool"
      },{
        "name":"p",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, a, p]"
      },{
        "name":"v",
        "tpe":"s"
      }],
      "tpe":"Choice[s, p, a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":144,
        "endLine":147
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"isAbsent",
        "loc":{
          "name":"Choice.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if `c` is `Absent`."],
      "name":"isAbsent",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"pres",
        "kind":"Bool"
      },{
        "name":"abs",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, pres, abs]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":51,
        "endLine":54
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"isPresent",
        "loc":{
          "name":"Choice.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if `c` is `Present`."],
      "name":"isPresent",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"pres",
        "kind":"Bool"
      },{
        "name":"abs",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, pres, abs]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":60,
        "endLine":63
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"map",
        "loc":{
          "name":"Choice.flix",
          "beginLine":112,
          "endLine":112
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Present(f(v))` if `c` is `Present(v)`. Otherwise returns `Absent`."],
      "name":"map",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Bool"
      },{
        "name":"p",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> t"
      },{
        "name":"c",
        "tpe":"Choice[s, a, p]"
      }],
      "tpe":"Choice[t, a, p]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":112,
        "endLine":116
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"unbox",
        "loc":{
          "name":"Choice.flix",
          "beginLine":69,
          "endLine":69
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `v` where `c` must be `Present(v)`."],
      "name":"unbox",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Choice[s, false, true]"
      }],
      "tpe":"s",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":69,
        "endLine":72
      }
    },{
      "sym":{
        "namespace":["Choice"],
        "name":"withDefault",
        "loc":{
          "name":"Choice.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `c` if it is `Present(v)`. Otherwise returns `default`."],
      "name":"withDefault",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a1",
        "kind":"Bool"
      },{
        "name":"p1",
        "kind":"Bool"
      },{
        "name":"a2",
        "kind":"Bool"
      },{
        "name":"p2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"default",
        "tpe":"{ default = Choice[s, a2, p2] }"
      },{
        "name":"c",
        "tpe":"Choice[s, a1, p1]"
      }],
      "tpe":"Choice[s, a1 and a2, p1 or (a1 and p2)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Choice.flix",
        "beginLine":88,
        "endLine":93
      }
    }],
    "Foldable":[{
      "sym":{
        "namespace":["Foldable"],
        "name":"fold",
        "loc":{
          "name":"Foldable.flix",
          "beginLine":404,
          "endLine":404
        }
      },
      "ann":[],
      "doc":[],
      "name":"fold",
      "tparams":[{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"t[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Foldable.flix",
        "beginLine":404,
        "endLine":405
      }
    }],
    "Comparison":[{
      "sym":{
        "namespace":["Comparison"],
        "name":"fromInt32",
        "loc":{
          "name":"Comparison.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Converts an integer to a `Comparison` value.","The return value is:","`LessThan` if `i < 0`.","`EqualTo` if `i == 0`.","`GreaterThan` if `i > 0`."],
      "name":"fromInt32",
      "tparams":[],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      }],
      "tpe":"Comparison",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Comparison.flix",
        "beginLine":45,
        "endLine":48
      }
    },{
      "sym":{
        "namespace":["Comparison"],
        "name":"toInt",
        "loc":{
          "name":"Comparison.flix",
          "beginLine":32,
          "endLine":32
        }
      },
      "ann":[],
      "doc":["Converts a `Comparison` value to an integer.","The return value is:","`-1` if `c` is `LessThan`.","`0` if `c` is `EqualTo`.","`+1` if `c` is `GreaterThan`."],
      "name":"toInt",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Comparison"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Comparison.flix",
        "beginLine":32,
        "endLine":36
      }
    }],
    "Monad":[{
      "sym":{
        "namespace":["Monad"],
        "name":"<=<",
        "loc":{
          "name":"Monad.flix",
          "beginLine":104,
          "endLine":104
        }
      },
      "ann":[],
      "doc":["`<=<` is an operator alias for `kleisliRight`."],
      "name":"<=<",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f1",
        "tpe":"b -> m[c] & ef1 \\ ef1'"
      },{
        "name":"f2",
        "tpe":"a -> m[b] & ef2 \\ ef2'"
      }],
      "tpe":"a -> m[c] & ef1 and ef2 \\ {ef1', ef2'}",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":104,
        "endLine":105
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":"=<<",
        "loc":{
          "name":"Monad.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["`=<<` is an operator alias for `flatMap`."],
      "name":"=<<",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"x",
        "tpe":"m[a]"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":85,
        "endLine":85
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":">=>",
        "loc":{
          "name":"Monad.flix",
          "beginLine":97,
          "endLine":97
        }
      },
      "ann":[],
      "doc":["`>=>` is an operator alias for `kleisliLeft`."],
      "name":">=>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f1",
        "tpe":"a -> m[b] & ef1 \\ ef1'"
      },{
        "name":"f2",
        "tpe":"b -> m[c] & ef2 \\ ef2'"
      }],
      "tpe":"a -> m[c] & ef1 and ef2 \\ {ef1', ef2'}",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":97,
        "endLine":98
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":">>=",
        "loc":{
          "name":"Monad.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":["`>>=` is the operator `=<<` with its arguments flipped.","","`>>=` is the monadic bind operator."],
      "name":">>=",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"m[a]"
      },{
        "name":"k",
        "tpe":"a -> m[b] & ef \\ ef'"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":92,
        "endLine":92
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":"flatten",
        "loc":{
          "name":"Monad.flix",
          "beginLine":63,
          "endLine":63
        }
      },
      "ann":[],
      "doc":["The monadic `join` operator.","Flatten `x` - a monadic action nested in an outer monadic layer - to a single layer.","","E.g. for the Option monad: `flatten(Some(Some(1)))` becomes `Some(1)`."],
      "name":"flatten",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"m[m[a]]"
      }],
      "tpe":"m[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":63,
        "endLine":63
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":"kleisliLeft",
        "loc":{
          "name":"Monad.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["The left-to-right Kleisli composition operator for monads.","","Map `x` with the monadic function `f1` and then map its result with the function `f2`."],
      "name":"kleisliLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f1",
        "tpe":"a -> m[b] & ef1 \\ ef1'"
      },{
        "name":"f2",
        "tpe":"b -> m[c] & ef2 \\ ef2'"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"m[c]",
      "eff":"ef1 and ef2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":70,
        "endLine":71
      }
    },{
      "sym":{
        "namespace":["Monad"],
        "name":"kleisliRight",
        "loc":{
          "name":"Monad.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["The right-to-left Kleisli composition operator for monads.","","Map `x` with the monadic function `f2` and then map its result with the function `f1`."],
      "name":"kleisliRight",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f1",
        "tpe":"b -> m[c] & ef1 \\ ef1'"
      },{
        "name":"f2",
        "tpe":"a -> m[b] & ef2 \\ ef2'"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"m[c]",
      "eff":"ef1 and ef2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monad",
          "loc":{
            "name":"Monad.flix",
            "beginLine":23,
            "endLine":23
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Monad.flix",
        "beginLine":78,
        "endLine":79
      }
    }],
    "Channel":[{
      "sym":{
        "namespace":["Channel"],
        "name":"buffered",
        "loc":{
          "name":"Channel.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":[],
      "doc":[],
      "name":"buffered",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"(Sender[t, r], Receiver[t, r])",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Channel.flix",
        "beginLine":23,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":["Channel"],
        "name":"recv",
        "loc":{
          "name":"Channel.flix",
          "beginLine":37,
          "endLine":37
        }
      },
      "ann":[],
      "doc":["Receives a message from the given channel `r`.","","Blocks until a message is dequeued."],
      "name":"recv",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"receiver",
        "tpe":"Receiver[t, r]"
      }],
      "tpe":"t",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Channel.flix",
        "beginLine":37,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":["Channel"],
        "name":"send",
        "loc":{
          "name":"Channel.flix",
          "beginLine":44,
          "endLine":44
        }
      },
      "ann":[],
      "doc":["Sends the message `m` on the given channel `s`.","","Blocks until the message is enqueued."],
      "name":"send",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"t"
      },{
        "name":"sender",
        "tpe":"Sender[t, r]"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Sendable",
          "loc":{
            "name":"Sendable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Channel.flix",
        "beginLine":44,
        "endLine":44
      }
    },{
      "sym":{
        "namespace":["Channel"],
        "name":"timeout",
        "loc":{
          "name":"Channel.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Returns a channel that receives the `Unit` message after duration `d`."],
      "name":"timeout",
      "tparams":[],
      "fparams":[{
        "name":"d",
        "tpe":"Duration"
      }],
      "tpe":"Receiver[Unit, Static]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Channel.flix",
        "beginLine":60,
        "endLine":63
      }
    },{
      "sym":{
        "namespace":["Channel"],
        "name":"unbuffered",
        "loc":{
          "name":"Channel.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns a new unbuffered channel (i.e. a channel with zero capacity)."],
      "name":"unbuffered",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      }],
      "tpe":"(Sender[t, r], Receiver[t, r])",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Channel.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Channel"],
        "name":"unsafeSend",
        "loc":{
          "name":"Channel.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":["@Unsafe"],
      "doc":["Sends the message `m` on the given channel `s`.","","Blocks until the message is enqueued.","","Identical to `send` but doesn't require `Sendable`.","It is up to programmer to ensure that race conditions cannot arise due to concurrent access to `m`."],
      "name":"unsafeSend",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"t"
      },{
        "name":"sender",
        "tpe":"Sender[t, r]"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Channel.flix",
        "beginLine":55,
        "endLine":55
      }
    }],
    "Applicative":[{
      "sym":{
        "namespace":["Applicative"],
        "name":"*>",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":183,
          "endLine":183
        }
      },
      "ann":[],
      "doc":["`*>` is an operator alias for `productRight`."],
      "name":"*>",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ma",
        "tpe":"m[a]"
      },{
        "name":"mb",
        "tpe":"m[b]"
      }],
      "tpe":"m[b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":183,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"<*",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":178,
          "endLine":178
        }
      },
      "ann":[],
      "doc":["`<*` is an operator alias for `productLeft`."],
      "name":"<*",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ma",
        "tpe":"m[a]"
      },{
        "name":"mb",
        "tpe":"m[b]"
      }],
      "tpe":"m[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":178,
        "endLine":178
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"<**>",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":173,
          "endLine":173
        }
      },
      "ann":[],
      "doc":["`<**>` is a variant of the operator `<*>` with its arguments flipped.","","The order of evaluation is `ma` then `mf`."],
      "name":"<**>",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ma",
        "tpe":"m[a]"
      },{
        "name":"mf",
        "tpe":"m[a -> b & ef \\ ef']"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":173,
        "endLine":173
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"<*>",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":166,
          "endLine":166
        }
      },
      "ann":[],
      "doc":["`<*>` is an operator alias for `ap`."],
      "name":"<*>",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"mf",
        "tpe":"m[a -> b & ef \\ ef']"
      },{
        "name":"ma",
        "tpe":"m[a]"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":166,
        "endLine":166
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"product",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":130,
          "endLine":130
        }
      },
      "ann":[],
      "doc":["Chain two applicative actions, returns the product of their results."],
      "name":"product",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"m[a]"
      },{
        "name":"fb",
        "tpe":"m[b]"
      }],
      "tpe":"m[(a, b)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":130,
        "endLine":131
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"product3",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":148,
          "endLine":148
        }
      },
      "ann":[],
      "doc":["Chain three applicative actions, return the 3-tuple of their results."],
      "name":"product3",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x1",
        "tpe":"m[t1]"
      },{
        "name":"x2",
        "tpe":"m[t2]"
      },{
        "name":"x3",
        "tpe":"m[t3]"
      }],
      "tpe":"m[(t1, t2, t3)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":148,
        "endLine":149
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"product4",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":154,
          "endLine":154
        }
      },
      "ann":[],
      "doc":["Chain four applicative actions, return the 4-tuple of their results."],
      "name":"product4",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x1",
        "tpe":"m[t1]"
      },{
        "name":"x2",
        "tpe":"m[t2]"
      },{
        "name":"x3",
        "tpe":"m[t3]"
      },{
        "name":"x4",
        "tpe":"m[t4]"
      }],
      "tpe":"m[(t1, t2, t3, t4)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":154,
        "endLine":155
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"product5",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Chain five applicative actions, return the 5-tuple of their results."],
      "name":"product5",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x1",
        "tpe":"m[t1]"
      },{
        "name":"x2",
        "tpe":"m[t2]"
      },{
        "name":"x3",
        "tpe":"m[t3]"
      },{
        "name":"x4",
        "tpe":"m[t4]"
      },{
        "name":"x5",
        "tpe":"m[t5]"
      }],
      "tpe":"m[(t1, t2, t3, t4, t5)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":160,
        "endLine":161
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"productLeft",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":136,
          "endLine":136
        }
      },
      "ann":[],
      "doc":["Chain two applicative actions, return only the result of the first."],
      "name":"productLeft",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"m[a]"
      },{
        "name":"fb",
        "tpe":"m[b]"
      }],
      "tpe":"m[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":136,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["Applicative"],
        "name":"productRight",
        "loc":{
          "name":"Applicative.flix",
          "beginLine":142,
          "endLine":142
        }
      },
      "ann":[],
      "doc":["Chain two applicative actions, return only the result of the second."],
      "name":"productRight",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"fa",
        "tpe":"m[a]"
      },{
        "name":"fb",
        "tpe":"m[b]"
      }],
      "tpe":"m[b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Applicative.flix",
        "beginLine":142,
        "endLine":143
      }
    }],
    "Day04":[{
      "sym":{
        "namespace":["Day04"],
        "name":"partOne",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day04.flix",
          "beginLine":53,
          "endLine":53
        }
      },
      "ann":[],
      "doc":[],
      "name":"partOne",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day04.flix",
        "beginLine":53,
        "endLine":63
      }
    },{
      "sym":{
        "namespace":["Day04"],
        "name":"partTwo",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day04.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":[],
      "name":"partTwo",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day04.flix",
        "beginLine":66,
        "endLine":72
      }
    }],
    "Iterator":[{
      "sym":{
        "namespace":["Iterator"],
        "name":"append",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":371,
          "endLine":371
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns `iterB` appended to (the end of) `iterA`.","","Does *not* consume any elements from either iterator.","","The original iterators `iterA` and `iterB` should *not* be reused."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iterA",
        "tpe":"Iterator[a, r1]"
      },{
        "name":"iterB",
        "tpe":"Iterator[a, r2]"
      }],
      "tpe":"Iterator[a, r1 and r2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":371,
        "endLine":376
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"dropL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":560,
          "endLine":560
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns `iter` without the first `n` elements.","","Returns an empty iterator if `n` is larger than the number of elements in `iter`.","Returns `iter` if `n < 0`.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"dropL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":560,
        "endLine":570
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"dropWhile",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":619,
          "endLine":619
        }
      },
      "ann":[],
      "doc":["Returns `iter` without the longest prefix that satisfies the predicate `f`.","","Consumes the entire iterator."],
      "name":"dropWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":619,
        "endLine":624
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"dropWhileL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":855,
          "endLine":855
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns `iter` without the prefix of elements that satisfy","the predicate `f` dropped.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"dropWhileL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":855,
        "endLine":873
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"enumerator",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":452,
          "endLine":452
        }
      },
      "ann":[],
      "doc":["Alias for `zipWithIndex`."],
      "name":"enumerator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":452,
        "endLine":453
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"filter",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":253,
          "endLine":253
        }
      },
      "ann":[],
      "doc":["Returns a list of every element in `iter` that satisfies the predicate `f`.","","Consumes the entire iterator."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":253,
        "endLine":262
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"filterL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":301,
          "endLine":301
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator with every element of the iterator `iter` that","satisfies the predicate `f`.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"filterL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":301,
        "endLine":325
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"filterMapL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":805,
          "endLine":805
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator with every element of the iterator `iter` that","produces `Some(_)` the from the function `f`.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"filterMapL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b]"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[b, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":805,
        "endLine":829
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"flatMap",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":632,
          "endLine":632
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns the result of applying `f` to every element in `iter` and concatenating the results.","","Does *not* consume any elements from the iterator."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Iterator[b, r1] & r1"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r2]"
      }],
      "tpe":"Iterator[b, r1 and r2]",
      "eff":"r2",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":632,
        "endLine":660
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"foldLeft",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":462,
          "endLine":462
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `iter` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`.","","Consumes the entire iterator."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":462,
        "endLine":465
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"foldMap",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":503,
          "endLine":503
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":503,
        "endLine":504
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"foldRight",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":474,
          "endLine":474
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `iter` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`.","","Consumes the entire iterator."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":474,
        "endLine":484
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":494,
          "endLine":494
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `iter` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation.","","Consumes the entire iterator."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef and r \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":494,
        "endLine":498
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"forEach",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":287,
          "endLine":287
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `iter`.","","Consumes the entire iterator."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":287,
        "endLine":290
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"intercalate",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":703,
          "endLine":703
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns the concatenation of the elements in `iterB` with the elements of `iterA` inserted between every two adjacent elements.","","That is, returns `b1 :: a1 ... an :: b2 :: ... bn-1 :: a1 :: ... :: an :: bn :: Nil`.","","Does *not* consume any elements from either iterator.","","The original iterators `iterA` and `iterB` should not be reused."],
      "name":"intercalate",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      },{
        "name":"r3",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iterA",
        "tpe":"Iterator[a, r1]"
      },{
        "name":"iterB",
        "tpe":"Iterator[Iterator[a, r2], r3]"
      }],
      "tpe":"Iterator[a, r1 and r2 and r3]",
      "eff":"r1 and r3",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":703,
        "endLine":766
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"intersperse",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":678,
          "endLine":678
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator with `a` inserted between every of `iter`.","","Does *not* consume any elements from the iterator."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":678,
        "endLine":691
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"isEmpty",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":99,
          "endLine":99
        }
      },
      "ann":[],
      "doc":["Returns true if the iterator is empty.","","Does *not* consume any elements of the iterator."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":99,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"join",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":774,
          "endLine":774
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `iter` with `sep` inserted between each element.","","Consumes the entire iterator."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":774,
        "endLine":775
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"joinWith",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":783,
          "endLine":783
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `iter` according to `f` with `sep` inserted between each element.","","Consumes the entire iterator."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":783,
        "endLine":794
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"map",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":271,
          "endLine":271
        }
      },
      "ann":[],
      "doc":["Returns a list with `f` applied to every element in `iter`.","","That is, the result is of the form: `f(x1) :: f(x2) :: ...`.","","Consumes the entire iterator."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"List[b]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":271,
        "endLine":280
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"mapL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":344,
          "endLine":344
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator with every `f` lazily applied to each element in `iter`.","","Does *not* consume any elements from the iterator."],
      "name":"mapL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[b, r]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":344,
        "endLine":347
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"new",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Returns an empty iterator."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_",
        "tpe":"Region[r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":60,
        "endLine":63
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"next",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":87,
          "endLine":87
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `iter` is not empty. Returns `None` otherwise.","","Consumes the head element of `iter`."],
      "name":"next",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":87,
        "endLine":92
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"product",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":166,
          "endLine":166
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the iterator `iter`.","","Consumes the entire iterator."],
      "name":"product",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":166,
        "endLine":170
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"productWith",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":177,
          "endLine":177
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the iterator `iter` according to the function `f`.","","Consumes the entire iterator."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":177,
        "endLine":181
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"range",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":109,
          "endLine":109
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator of all integers between `b` (inclusive) and `e` (exclusive).","","Returns an empty iterator if `b >= e`."],
      "name":"range",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"Iterator[Int32, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":109,
        "endLine":122
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"reduceLeft",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":515,
          "endLine":515
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `iter` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(x1, x2), x3)..., xn))`","","Returns `None` if `iter` is empty.","","Consumes the entire iterator."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":515,
        "endLine":520
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"repeat",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":130,
          "endLine":130
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator over an iterable with the element `x` repeated `n` times.","","Returns an empty iterator if `n < 0`."],
      "name":"repeat",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":130,
        "endLine":143
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"replace",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":355,
          "endLine":355
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator with every occurrence of `from` replaced by `to` in `iter`.","","Does *not* consume any elements from the iterator."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":355,
        "endLine":361
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"singleton",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":68,
          "endLine":68
        }
      },
      "ann":[],
      "doc":["Returns an iterator containing only a single element, `x`."],
      "name":"singleton",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":68,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"sum",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":150,
          "endLine":150
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the iterator `iter`.","","Consumes the entire iterator."],
      "name":"sum",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":150,
        "endLine":151
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"sumWith",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":158,
          "endLine":158
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the iterator `iter` according to the function `f`.","","Consumes the entire iterator."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":158,
        "endLine":159
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"takeL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":583,
          "endLine":583
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns `iter` with the first `n` elements.","","Returns `iter` if `n` is larger than the number of elements in `iter`.","Returns an empty iterator if `n < 0`.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"takeL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":583,
        "endLine":596
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"takeWhile",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":603,
          "endLine":603
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `iter` that satisfies the predicate `f`.","","Consumes the entire iterator."],
      "name":"takeWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":603,
        "endLine":612
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toArray",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":188,
          "endLine":188
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as an array.","","Consumes the entire iterator."],
      "name":"toArray",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r2]"
      }],
      "tpe":"Array[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":188,
        "endLine":192
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toList",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":199,
          "endLine":199
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a list.","","Consumes the entire iterator."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":199,
        "endLine":200
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toMap",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":207,
          "endLine":207
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a map.","","Consumes the entire iterator."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[(a, b), r]"
      }],
      "tpe":"Map[a, b]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":207,
        "endLine":208
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toMutDeque",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a MutDeque.","","Consumes the entire iterator."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"iter",
        "tpe":"Iterator[a, r2]"
      }],
      "tpe":"MutDeque[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":237,
        "endLine":240
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toNec",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":225,
          "endLine":225
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a nec.","","Consumes the entire iterator."],
      "name":"toNec",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Option[Nec[a]]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":225,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toNel",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":215,
          "endLine":215
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a `Some(Nel)` if `iter` is not empty. Returns None otherwise.","","Consumes the entire iterator."],
      "name":"toNel",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Option[Nel[a]]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":215,
        "endLine":218
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toResultList",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":883,
          "endLine":883
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a list.","","Consumes the entire iterator.","","If any stage of the iterator is `Err(e)` then `Err(e)` is returned (first fail).","If the iterator has no errors then the result is wrapped with `Ok`."],
      "name":"toResultList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[Result[a, e], r]"
      }],
      "tpe":"Result[List[a], e]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":883,
        "endLine":894
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"toSet",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":245,
          "endLine":245
        }
      },
      "ann":[],
      "doc":["Returns the contents of `iter` as a set. Consumes the entire iterator."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Set[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":245,
        "endLine":246
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"unfoldWithOk",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":530,
          "endLine":530
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator over the results of `f`.","","If `f` returns `Ok(x)`, then the next element is `x`.","","If `f` returns `Err(e)`, then the iterator is depleted."],
      "name":"unfoldWithOk",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"f",
        "tpe":"Unit -> Result[a, b] & ef"
      }],
      "tpe":"Iterator[a, r and ef]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":530,
        "endLine":547
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"zip",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":391,
          "endLine":391
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `iterA` and `b` is the element at index `i` in `iterB`.","","Does *not* consume any elements from either iterator.","","If either `iterA` or `iterB` is depleted, then no further elements are added to the resulting iterator.","","The original iterators `iterA` and `iterB` should *not* be reused.","","An iterator should *never* be zipped with itself."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iterA",
        "tpe":"Iterator[a, r1]"
      },{
        "name":"iterB",
        "tpe":"Iterator[b, r2]"
      }],
      "tpe":"Iterator[(a, b), r1 and r2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":391,
        "endLine":396
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"zipWith",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":427,
          "endLine":427
        }
      },
      "ann":[],
      "doc":["Returns a list where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `iterA` and `b` is the element at index `i` in `iterB`.","","Consumes the entire iterator.","","An iterator should *never* be zipped with itself."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"iterA",
        "tpe":"Iterator[a, r1]"
      },{
        "name":"iterB",
        "tpe":"Iterator[b, r2]"
      }],
      "tpe":"List[c]",
      "eff":"ef and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":427,
        "endLine":428
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"zipWithIndex",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":439,
          "endLine":439
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator where the element at index `i` is `(a, i)` where","`a` is the element at index `i` in `iter`.","","Does *not* consume any elements from the iterator.","","The original iterator `iter` should *not* be reused."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"iter",
        "tpe":"Iterator[a, r]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":439,
        "endLine":447
      }
    },{
      "sym":{
        "namespace":["Iterator"],
        "name":"zipWithL",
        "loc":{
          "name":"Iterator.flix",
          "beginLine":411,
          "endLine":411
        }
      },
      "ann":["@Lazy"],
      "doc":["Returns an iterator where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `iterA` and `b` is the element at index `i` in `iterB`.","","Does *not* consume any elements from either iterator.","","If either `iterA` or `iterB` becomes depleted, then no further elements are added to the resulting list.","","The original iterators `iterA` and `iterB` should *not* be reused.","","An iterator should *never* be zipped with itself."],
      "name":"zipWithL",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c)"
      },{
        "name":"iterA",
        "tpe":"Iterator[a, r1]"
      },{
        "name":"iterB",
        "tpe":"Iterator[b, r2]"
      }],
      "tpe":"Iterator[c, r1 and r2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Iterator.flix",
        "beginLine":411,
        "endLine":417
      }
    }],
    "GetOpt":[{
      "sym":{
        "namespace":["GetOpt"],
        "name":"getOpt",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":152,
          "endLine":152
        }
      },
      "ann":[],
      "doc":["Decode the list of command line options supplied to the program.","","`ordering` mandates how processing of options and non-options is handled.","","`optDescriptors` is a list of processors for decoding individual options.","","`sourceArgs` should be the list of command line arguments supplied to the program.","","If successful, `getOpt` returns lists of decoded options and non-options. If unsuccessful it","returns a non-empty list of error messages, with unknown options considered to be errors."],
      "name":"getOpt",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ordering",
        "tpe":"ArgOrder[a]"
      },{
        "name":"optDescriptors",
        "tpe":"List[OptionDescr[a]]"
      },{
        "name":"sourceArgs",
        "tpe":"List[String]"
      }],
      "tpe":"Validation[{ nonOptions = List[String], options = List[a] }, String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":152,
        "endLine":162
      }
    },{
      "sym":{
        "namespace":["GetOpt"],
        "name":"getOpt1",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":171,
          "endLine":171
        }
      },
      "ann":[],
      "doc":["This is a more general version of `getOpt` that returns all the results of decoding the command line","options without distinguishing whether the decoding is successful or a failure.","","Client code calling this function, rather than `getOpt`, is free to process or ignore the results collected","in `unknowns` and `errors` which would indicate problems with the decoding if either were not empty."],
      "name":"getOpt1",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ordering",
        "tpe":"ArgOrder[a]"
      },{
        "name":"optDescriptors",
        "tpe":"List[OptionDescr[a]]"
      },{
        "name":"sourceArgs",
        "tpe":"List[String]"
      }],
      "tpe":"{ errors = List[String], nonOptions = List[String], options = List[a], unknowns = List[String] }",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":171,
        "endLine":175
      }
    },{
      "sym":{
        "namespace":["GetOpt"],
        "name":"preprocess",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":375,
          "endLine":375
        }
      },
      "ann":[],
      "doc":["Preprocess the command line arguments before parsing them.","","Arguments supplied as an `List[String]` to the program are simply derived from the input split on space.","This does not account for, for example, Windows file names which may include space.","","`preprocess` is a simple function that can be used to \"rejoin\" command line arguments if they were","joined by \"quotation marks\" in the user supplied string (quotations marks are configurable and do not","have to be double quotes)."],
      "name":"preprocess",
      "tparams":[],
      "fparams":[{
        "name":"options",
        "tpe":"{ quoteClose = String, quoteOpen = String, stripQuoteMarks = Bool }"
      },{
        "name":"args",
        "tpe":"List[String]"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":375,
        "endLine":380
      }
    },{
      "sym":{
        "namespace":["GetOpt"],
        "name":"usageInfo",
        "loc":{
          "name":"GetOpt.flix",
          "beginLine":93,
          "endLine":93
        }
      },
      "ann":[],
      "doc":["Return a formatted string describing the usage of the command.","","Typically this output is used by \"--help\""],
      "name":"usageInfo",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"header",
        "tpe":"String"
      },{
        "name":"optionDescriptors",
        "tpe":"List[OptionDescr[a]]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"GetOpt.flix",
        "beginLine":93,
        "endLine":97
      }
    }],
    "System/StdIn":[{
      "sym":{
        "namespace":["System","StdIn"],
        "name":"readLines",
        "loc":{
          "name":"System.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "ann":[],
      "doc":["Returns an iterator over lines from the standard input stream.","","The iterator ends when the stream is closed or when an error occurs.","","When the iterator is garbage collected the standard input stream is closed.","Thus, the `readLines` function should not be called more than once per program.","","See also `Console.readLine` for reading from the console."],
      "name":"readLines",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Iterator[String, Static]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":33,
        "endLine":60
      }
    }],
    "Fixpoint/Ast":[{
      "sym":{
        "namespace":["Fixpoint","Ast"],
        "name":"isRelational",
        "loc":{
          "name":"Fixpoint/Ast/Denotation.flix",
          "beginLine":39,
          "endLine":39
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given denotation is relational."],
      "name":"isRelational",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"den",
        "tpe":"Denotation[v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Fixpoint/Ast/Denotation.flix",
        "beginLine":39,
        "endLine":42
      }
    }],
    "Graph":[{
      "sym":{
        "namespace":["Graph"],
        "name":"boundedDistances",
        "loc":{
          "name":"Graph.flix",
          "beginLine":208,
          "endLine":208
        }
      },
      "ann":[],
      "doc":["Returns the shortest distance between all pairs of nodes in the","weighted directed graph `g`.","","OBS: No negative cycles must be present."],
      "name":"boundedDistances",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Map[(t, t), Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":208,
        "endLine":226
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"closure",
        "loc":{
          "name":"Graph.flix",
          "beginLine":29,
          "endLine":29
        }
      },
      "ann":[],
      "doc":["Returns the pairs `(a, b)` where `a` can reach `b` through a number of","edges in the directed graph `g`, including zero."],
      "name":"closure",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[(t, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":29,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"cutPoints",
        "loc":{
          "name":"Graph.flix",
          "beginLine":407,
          "endLine":407
        }
      },
      "ann":[],
      "doc":["Returns triples `(x, cut, y)` such that `x` cannot reach `y` without","using `cut` (where `x`, `cut` and `y` are all distinct) in the directed","graph `g`.","","There will at most be one triple for each pair of nodes (which will","be the maximum `cut` of the possible choices)."],
      "name":"cutPoints",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[(t, t, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":407,
        "endLine":428
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"degrees",
        "loc":{
          "name":"Graph.flix",
          "beginLine":348,
          "endLine":348
        }
      },
      "ann":[],
      "doc":["Returns the degree of each node in the directed graph `g` (the number of","times a node exists as an endpoint of an edge)."],
      "name":"degrees",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Map[t, Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":348,
        "endLine":364
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"destructDown",
        "loc":{
          "name":"Graph.flix",
          "beginLine":557,
          "endLine":557
        }
      },
      "ann":[],
      "doc":["Returns the value inside the `d` value."],
      "name":"destructDown",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"Down[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Graph.flix",
        "beginLine":557,
        "endLine":560
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"distance",
        "loc":{
          "name":"Graph.flix",
          "beginLine":251,
          "endLine":251
        }
      },
      "ann":[],
      "doc":["Returns the shortest distance from `src` to `dst` in the weighted","directed graph `g`."],
      "name":"distance",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = t }"
      },{
        "name":"dst",
        "tpe":"{ dst = t }"
      },{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":251,
        "endLine":252
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"distances",
        "loc":{
          "name":"Graph.flix",
          "beginLine":153,
          "endLine":153
        }
      },
      "ann":[],
      "doc":["Returns the shortest distance between all pairs of nodes in the","weighted directed graph `g`. Returns `None` if `g` contains a","negative cycle."],
      "name":"distances",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Option[Map[(t, t), Int32]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":153,
        "endLine":200
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"distancesFrom",
        "loc":{
          "name":"Graph.flix",
          "beginLine":232,
          "endLine":232
        }
      },
      "ann":[],
      "doc":["Returns the shortest distance from `src` to every other node in the","weighted directed graph `g`."],
      "name":"distancesFrom",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Map[t, Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":232,
        "endLine":245
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"flipEdges",
        "loc":{
          "name":"Graph.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":[],
      "doc":["Returns the graph where all edges in the directed graph `g` have their","nodes flipped."],
      "name":"flipEdges",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[(t, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":101,
        "endLine":110
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"frontiersFrom",
        "loc":{
          "name":"Graph.flix",
          "beginLine":370,
          "endLine":370
        }
      },
      "ann":[],
      "doc":["Returns a mapping from distances to the set of nodes for which the","shortest path from `src` in the directed graph `g` is of a given length."],
      "name":"frontiersFrom",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Map[Int32, Set[t]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":370,
        "endLine":397
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"inDegrees",
        "loc":{
          "name":"Graph.flix",
          "beginLine":434,
          "endLine":434
        }
      },
      "ann":[],
      "doc":["Returns the in-degree (how many edges end in a given node)","of each node in the directed graph `g`."],
      "name":"inDegrees",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Map[t, Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":434,
        "endLine":449
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"invert",
        "loc":{
          "name":"Graph.flix",
          "beginLine":118,
          "endLine":118
        }
      },
      "ann":[],
      "doc":["Returns the inverse graph of the directed graph `g`. For all nodes in","`g`. The new graph contains exactly those edges that are not in `g`.","","OBS: No self-edges are returned no matter the input."],
      "name":"invert",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[(t, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":118,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"isCyclic",
        "loc":{
          "name":"Graph.flix",
          "beginLine":132,
          "endLine":132
        }
      },
      "ann":[],
      "doc":["Returns `true` if the directed graph `g` contains at least one cycle."],
      "name":"isCyclic",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":132,
        "endLine":146
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"outDegrees",
        "loc":{
          "name":"Graph.flix",
          "beginLine":455,
          "endLine":455
        }
      },
      "ann":[],
      "doc":["Returns the out-degree (how many edges start in a given node)","of each node in the directed graph `g`."],
      "name":"outDegrees",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Map[t, Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":455,
        "endLine":470
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"reachable",
        "loc":{
          "name":"Graph.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["Returns `true` if there is a path from `src` to `dst` in the directed","graph `g`."],
      "name":"reachable",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = t }"
      },{
        "name":"dst",
        "tpe":"{ dst = t }"
      },{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":70,
        "endLine":71
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"reachableFrom",
        "loc":{
          "name":"Graph.flix",
          "beginLine":41,
          "endLine":41
        }
      },
      "ann":[],
      "doc":["Returns the nodes that are reachable from `src` in the directed","graph `g`."],
      "name":"reachableFrom",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":41,
        "endLine":47
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"stronglyConnectedComponents",
        "loc":{
          "name":"Graph.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Returns the strongly connected components of the directed graph `g`.","Two nodes are in the same component if and only if they can both","reach eachother."],
      "name":"stronglyConnectedComponents",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[Set[t]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":78,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"toGraphviz",
        "loc":{
          "name":"Graph.flix",
          "beginLine":477,
          "endLine":477
        }
      },
      "ann":[],
      "doc":["Returns a Graphviz (DOT) string of the directed graph `g`.","The strings of nodes are put in quotes but DOT identifier validity is","up to the caller."],
      "name":"toGraphviz",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":477,
        "endLine":486
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"toGraphvizWeighted",
        "loc":{
          "name":"Graph.flix",
          "beginLine":493,
          "endLine":493
        }
      },
      "ann":[],
      "doc":["Returns a Graphviz (DOT) string of the directed graph `g`.","The strings of nodes are put in quotes and existing quotes are escaped.","Other than that, DOT identifier validity is up to the caller."],
      "name":"toGraphvizWeighted",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":493,
        "endLine":502
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"toUndirected",
        "loc":{
          "name":"Graph.flix",
          "beginLine":258,
          "endLine":258
        }
      },
      "ann":[],
      "doc":["Returns a copy of the directed graph `g` where all flipped edges are","added. An undirected graph in directed representation."],
      "name":"toUndirected",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[(t, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":258,
        "endLine":261
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"toUndirectedWeighted",
        "loc":{
          "name":"Graph.flix",
          "beginLine":267,
          "endLine":267
        }
      },
      "ann":[],
      "doc":["Returns a copy of the weighted directed graph `g` where all flipped","edges are added. An undirected graph in directed representation."],
      "name":"toUndirectedWeighted",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Set[(t, Int32, t)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":267,
        "endLine":270
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"topologicalSort",
        "loc":{
          "name":"Graph.flix",
          "beginLine":317,
          "endLine":317
        }
      },
      "ann":[],
      "doc":["Returns the topologically sorted nodes (all edges go from lower indices","to higher indices of the list) in the directed graph `g`.","Unordered nodes are consistently (although not intuitively) ordered.","","OBS: No cycles must be present."],
      "name":"topologicalSort",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"List[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":317,
        "endLine":342
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"unreachableFrom",
        "loc":{
          "name":"Graph.flix",
          "beginLine":53,
          "endLine":53
        }
      },
      "ann":[],
      "doc":["Returns the nodes that are unreachable from `src` in the directed","graph `g`."],
      "name":"unreachableFrom",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":53,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"withinDistanceOf",
        "loc":{
          "name":"Graph.flix",
          "beginLine":278,
          "endLine":278
        }
      },
      "ann":[],
      "doc":["Returns the nodes that are at most `limit` (inclusive) distance away","from `src` in the weighted directed graph `g`.","","OBS: No negative cycles must be present."],
      "name":"withinDistanceOf",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"limit",
        "tpe":"Int32"
      },{
        "name":"g",
        "tpe":"m[(t, Int32, t)]"
      }],
      "tpe":"Set[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":278,
        "endLine":290
      }
    },{
      "sym":{
        "namespace":["Graph"],
        "name":"withinEdgesOf",
        "loc":{
          "name":"Graph.flix",
          "beginLine":296,
          "endLine":296
        }
      },
      "ann":[],
      "doc":["Returns the nodes that are at most `limit` (inclusive) edges away","from `src` in the directed graph `g`."],
      "name":"withinEdgesOf",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"src",
        "tpe":"t"
      },{
        "name":"limit",
        "tpe":"Int32"
      },{
        "name":"g",
        "tpe":"m[(t, t)]"
      }],
      "tpe":"Set[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Boxable",
          "loc":{
            "name":"Boxable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Graph.flix",
        "beginLine":296,
        "endLine":308
      }
    }],
    "Time/Epoch":[{
      "sym":{
        "namespace":["Time","Epoch"],
        "name":"microseconds",
        "loc":{
          "name":"Time/Epoch.flix",
          "beginLine":31,
          "endLine":31
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of micro seconds since the Unix epoch."],
      "name":"microseconds",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Time/Epoch.flix",
        "beginLine":31,
        "endLine":31
      }
    },{
      "sym":{
        "namespace":["Time","Epoch"],
        "name":"milliseconds",
        "loc":{
          "name":"Time/Epoch.flix",
          "beginLine":37,
          "endLine":37
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of milli seconds since the Unix epoch."],
      "name":"milliseconds",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Time/Epoch.flix",
        "beginLine":37,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":["Time","Epoch"],
        "name":"nanoseconds",
        "loc":{
          "name":"Time/Epoch.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of nano seconds since the Unix epoch."],
      "name":"nanoseconds",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Time/Epoch.flix",
        "beginLine":23,
        "endLine":25
      }
    },{
      "sym":{
        "namespace":["Time","Epoch"],
        "name":"seconds",
        "loc":{
          "name":"Time/Epoch.flix",
          "beginLine":43,
          "endLine":43
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of seconds since the Unix epoch."],
      "name":"seconds",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Time/Epoch.flix",
        "beginLine":43,
        "endLine":43
      }
    }],
    "Time/Instant":[{
      "sym":{
        "namespace":["Time","Instant"],
        "name":"after",
        "loc":{
          "name":"Time/Instant.flix",
          "beginLine":48,
          "endLine":48
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if `x` is after `y`."],
      "name":"after",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Instant"
      },{
        "name":"y",
        "tpe":"Instant"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Instant.flix",
        "beginLine":48,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":["Time","Instant"],
        "name":"before",
        "loc":{
          "name":"Time/Instant.flix",
          "beginLine":38,
          "endLine":38
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if `x` is before `y`."],
      "name":"before",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Instant"
      },{
        "name":"y",
        "tpe":"Instant"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Instant.flix",
        "beginLine":38,
        "endLine":42
      }
    },{
      "sym":{
        "namespace":["Time","Instant"],
        "name":"minus",
        "loc":{
          "name":"Time/Instant.flix",
          "beginLine":67,
          "endLine":67
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the given instant `x` minus `d` number of nano seconds."],
      "name":"minus",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Instant"
      },{
        "name":"d",
        "tpe":"Int64"
      }],
      "tpe":"Instant",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Instant.flix",
        "beginLine":67,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["Time","Instant"],
        "name":"now",
        "loc":{
          "name":"Time/Instant.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the current time from the system clock."],
      "name":"now",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Instant",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Time/Instant.flix",
        "beginLine":30,
        "endLine":32
      }
    },{
      "sym":{
        "namespace":["Time","Instant"],
        "name":"plus",
        "loc":{
          "name":"Time/Instant.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the given instant `x` plus `d` number of nano seconds."],
      "name":"plus",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Instant"
      },{
        "name":"d",
        "tpe":"Int64"
      }],
      "tpe":"Instant",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Instant.flix",
        "beginLine":58,
        "endLine":61
      }
    }],
    "DelayList":[{
      "sym":{
        "namespace":["DelayList"],
        "name":"ap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":572,
          "endLine":572
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Apply every function from `f` to every argument from `l` and return a list with all results.","For `f = f1, f2, ...` and `l = x1, x2, ...` the results appear in the order","`f1(x1), f1(x2), ..., f2(x1), f2(x2), ...`.","","Whether the i-th function in `f` (`fi`) is applied eagerly or lazily depends on its purity:","","- If `fi` is pure then it is applied lazily (i.e. the tail of `l` is not forced).","- If `fi` is impure then it is applied eagerly (i.e. the entire list `l` is forced).","","Note that this implies that ALL functions in `f` must be pure to avoid forcing `l`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"DelayList[a -> b & ef \\ ef']"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":572,
        "endLine":573
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"append",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":225,
          "endLine":225
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l2` appended to `l1`.","","Does not force the tail of `l1`."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"DelayList[a]"
      },{
        "name":"l2",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":225,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"count",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":238,
          "endLine":238
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of elements in `l` that satisfy the predicate `f`.","","Forces the entire list `l`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":238,
        "endLine":239
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"drop",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":987,
          "endLine":987
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l` without the first `n` elements.","","Returns `ENil` if `n > length(l)`.","Returns `l` if `n < 1`.","","Does not force the tail of `l`."],
      "name":"drop",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":987,
        "endLine":999
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"dropWhile",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1010,
          "endLine":1010
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns `l` without the longest prefix that satisfies the predicate `f`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the tail is forced until the first element that satisfies `f`)."],
      "name":"dropWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1010,
        "endLine":1015
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"empty",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":147,
          "endLine":147
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns an empty DelayList."],
      "name":"empty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":147,
        "endLine":147
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"enumerator",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1208,
          "endLine":1208
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1208,
        "endLine":1209
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"exists",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":298,
          "endLine":298
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if and only if at least one element in `l` satisfies the predicate `f`.","","Returns `false` if `l` is empty.","","Forces elements of `l` until the predicate `f` is satisfied."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":298,
        "endLine":303
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"filter",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":715,
          "endLine":715
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns a `DelayList` with every element in `l` that satisfies the predicate `f`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":715,
        "endLine":720
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"filterMap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":758,
          "endLine":758
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Collects the results of applying the partial function `f` to every element in `l`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":758,
        "endLine":763
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"findLeft",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":818,
          "endLine":818
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from left to right.","","Forces elements of `l` until the predicate `f` is satisfied."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":818,
        "endLine":823
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"findMap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":848,
          "endLine":848
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the first non-None result of applying the partial function `f` to each element of `l`.","","Returns `None` if every element `f(x)` of `l` is `None`.","","Forces elements of `l` until `f(x)` returns `Some(v)`."],
      "name":"findMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":848,
        "endLine":859
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"findRight",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":831,
          "endLine":831
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from right to left.","","Forces the entire list `l`."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":831,
        "endLine":838
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"flatMap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":515,
          "endLine":515
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the result of applying `f` to every element in `l` and concatenating the results.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> DelayList[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":515,
        "endLine":520
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"flatten",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":283,
          "endLine":283
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns the concatenation of the elements in `l`.","","Does not force the tail of `l`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[DelayList[a]]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":283,
        "endLine":288
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"foldLeft",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":607,
          "endLine":607
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`.","","Forces the entire list `l`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":607,
        "endLine":612
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"foldMap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":654,
          "endLine":654
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":654,
        "endLine":655
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"foldRight",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":622,
          "endLine":622
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`.","","Forces the entire list `l`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":622,
        "endLine":629
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":642,
          "endLine":642
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `z` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","","A `foldRightWithCont` allows early termination by not calling the continuation.","","Calling the continuation forces the list `l`."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":642,
        "endLine":649
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"forAll",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":313,
          "endLine":313
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if and only if all elements in `l` satisfy the predicate `f`.","","Returns `true` if `l` is empty.","","Forces elements in `l` until the first element that does not satisfy the predicate `f` (inclusive)."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":313,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"forEach",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":663,
          "endLine":663
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to every element of `l`.","","Forces the entire list `l`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":663,
        "endLine":668
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"from",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":403,
          "endLine":403
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns an infinite sequence of integers starting from and including `n`."],
      "name":"from",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"DelayList[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":403,
        "endLine":405
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"head",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":169,
          "endLine":169
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Some(x)` if `x` is the first element of `l`.","","Returns `None` if `l` is empty.","","Does not force the tail of `l`."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":169,
        "endLine":174
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"intercalate",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":883,
          "endLine":883
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns the concatenation of the elements in `l2` with the elements","of `l1` inserted between every two adjacent elements of `l2`.","","That is, returns `l2.1 :: l1.1 ... l1.n :: l2.2 :: ... :: l2.n-1 :: l1.1 :: ... :: l1.n :: l2.n :: ENil`.","","Does not force the tail of `l2`."],
      "name":"intercalate",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"DelayList[a]"
      },{
        "name":"l2",
        "tpe":"DelayList[DelayList[a]]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":883,
        "endLine":888
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"intersperse",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":867,
          "endLine":867
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l` with `x` inserted between every two adjacent elements.","","Does not force the tail of `l`."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":867,
        "endLine":872
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"isEmpty",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":155,
          "endLine":155
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns true if and only if `l` is the empty DelayList, i.e. `ENil`.","","Does not force the tail of `l`."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":155,
        "endLine":159
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"iterator",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1191,
          "endLine":1191
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l` as an `Iterator`.","","Does not force any elements of the list."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1191,
        "endLine":1203
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"join",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1284,
          "endLine":1284
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the concatenation of the string representation","of each element in `l` with `sep` inserted between each element.","","Forces the entire list `l`."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1284,
        "endLine":1285
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"joinWith",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1294,
          "endLine":1294
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the concatenation of the string representation","of each element in `l` according to `f` with `sep` inserted between each element.","","Forces the entire list `l`."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1294,
        "endLine":1295
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"last",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":184,
          "endLine":184
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Some(x)` if `x` is the last element of `l`.","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":184,
        "endLine":189
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"length",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":210,
          "endLine":210
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the length of `l`.","","Forces the entire list `l`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":210,
        "endLine":217
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"map",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":416,
          "endLine":416
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the result of applying `f` to every element in `l`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":416,
        "endLine":421
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"mapWithIndex",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":466,
          "endLine":466
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the result of applying `f` to every element in `l` along with that element's index.","","That is, the result is of the form: `f(x1, 0) :: f(x2, 1) :: ...`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":466,
        "endLine":471
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"maximum",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":363,
          "endLine":363
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds the largest element of `l` according to the `Order` on `a`.","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":363,
        "endLine":364
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"maximumBy",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":374,
          "endLine":374
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds the largest element of `l` according to the given comparator `cmp`.","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":374,
        "endLine":375
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"memberOf",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if and only if `l` contains the element `x`.","","Forces elements until `x` is found."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":326,
        "endLine":331
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"minimum",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":341,
          "endLine":341
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds the smallest element of `l` according to the `Order` on `a`.","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":341,
        "endLine":342
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"minimumBy",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":352,
          "endLine":352
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds the smallest element of `l` according to the given comparator `cmp`.","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":352,
        "endLine":353
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"partition",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":898,
          "endLine":898
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a pair of lists `(l1, l2)` where:","- `l1` contains all elements of `l` that satisfy the predicate `f`.","- `l2` contains all elements of `l` that DO NOT satisfy the predicate `f`.","","Forces the entire list `l`."],
      "name":"partition",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"(DelayList[a], DelayList[a])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":898,
        "endLine":913
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"point",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":557,
          "endLine":557
        }
      },
      "ann":["@Experimental"],
      "doc":["Return the singleton list with element `x`."],
      "name":"point",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":557,
        "endLine":557
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"product",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":265,
          "endLine":265
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the product of all elements in the DelayList `l`.","","Forces the entire list `l`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":265,
        "endLine":266
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"productWith",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":274,
          "endLine":274
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the product of all elements in the DelayList `l` according to the function `f`.","","Forces the entire list `l`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":274,
        "endLine":275
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"range",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":383,
          "endLine":383
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns a `DelayList` of all integers between `b` (inclusive) and `e` (exclusive).","","Returns an empty `DelayList` if `b >= e`."],
      "name":"range",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"DelayList[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":383,
        "endLine":390
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"reduceLeft",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":680,
          "endLine":680
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all elements in `l` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(x1, x2), x3)..., xn))`","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":680,
        "endLine":685
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"reduceRight",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":697,
          "endLine":697
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all elements in `l` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`","","Returns `None` if `l` is empty.","","Forces the entire list `l`."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":697,
        "endLine":704
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"repeat",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":396,
          "endLine":396
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns an infinite DelayList of repeating `x`s."],
      "name":"repeat",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":396,
        "endLine":397
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"replace",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":596,
          "endLine":596
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l` with every occurrence of `from` replaced by `to`.","","Does not force the tail of `l`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":596,
        "endLine":597
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"reverse",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":581,
          "endLine":581
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Reverses the list `l`.","","Does not force the tail of `l`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":581,
        "endLine":588
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"sequence",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1311,
          "endLine":1311
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the result of running all the actions in the DelayList `l`."],
      "name":"sequence",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[m[a]]"
      }],
      "tpe":"m[DelayList[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1311,
        "endLine":1318
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"shuffle",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1338,
          "endLine":1338
        }
      },
      "ann":[],
      "doc":["Shuffles `l` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1338,
        "endLine":1340
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"span",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":926,
          "endLine":926
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns a pair of lists `(l1, l2)` where:","- `l1` is the longest prefix of `l` that satisfies the predicate `f`.","- `l2` is the remainder of `l`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the entire list `l` is forced)."],
      "name":"span",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"(DelayList[a], DelayList[a])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":926,
        "endLine":931
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"sum",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":247,
          "endLine":247
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the sum of all elements in the DelayList `l`.","","Forces the entire list `l`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":247,
        "endLine":248
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"sumWith",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":256,
          "endLine":256
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the sum of all elements in the DelayList `l` according to the function `f`.","","Forces the entire list `l`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":256,
        "endLine":257
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"tail",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":197,
          "endLine":197
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns `l` without the first element.","","Does not force the tail of `l`."],
      "name":"tail",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":197,
        "endLine":202
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"take",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1054,
          "endLine":1054
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns the first `n` elements of `l`.","","Does not force the tail of `l`."],
      "name":"take",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1054,
        "endLine":1066
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"takeWhile",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1077,
          "endLine":1077
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the longest prefix of `l` that satisfies the predicate `f`.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tail is not forced).","- If `f` is impure then it is applied eagerly (i.e. the tail is forced until the first element that satisfies `f`)."],
      "name":"takeWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1077,
        "endLine":1082
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toArray",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1180,
          "endLine":1180
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `l` as an `Array`.","","Forces the entire list `l`."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1180,
        "endLine":1183
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toList",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1217,
          "endLine":1217
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `l` as a `List`.","","Forces the entire list `l`."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1217,
        "endLine":1224
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toMap",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1253,
          "endLine":1253
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the association list `l` as a map.","","If `l` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map.","","Forces the entire list `l`."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[(a, b)]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1253,
        "endLine":1260
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toMutDeque",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1239,
          "endLine":1239
        }
      },
      "ann":[],
      "doc":["Returns `l` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1239,
        "endLine":1242
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toMutList",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1232,
          "endLine":1232
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `l` as a `List`.","","Forces the entire list `l`."],
      "name":"toMutList",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1232,
        "endLine":1234
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toSet",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1268,
          "endLine":1268
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `l` as a `Set`.","","Forces the entire list `l`."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1268,
        "endLine":1275
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"toString",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":130,
          "endLine":130
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a string representation of `l`.","","Forces the entire list `l`."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":130,
        "endLine":141
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"traverse",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1325,
          "endLine":1325
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","DelayList `l`."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"m[DelayList[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1325,
        "endLine":1332
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"zip",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1126,
          "endLine":1126
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns a list where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` is depleted, then no further elements are added to the resulting list.","","Does not force the tail of either `l1` or `l2`."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"DelayList[a]"
      },{
        "name":"l2",
        "tpe":"DelayList[b]"
      }],
      "tpe":"DelayList[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1126,
        "endLine":1142
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"zipWith",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1156,
          "endLine":1156
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns a list where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` is depleted, then no further elements are added to the resulting list.","","Whether `f` is applied eagerly or lazily depends on its purity:","","- If `f` is pure then it is applied lazily (i.e. the tails are not forced).","- If `f` is impure then it is applied eagerly (i.e. both lists `l1` and `l2` are forced)."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"l1",
        "tpe":"DelayList[a]"
      },{
        "name":"l2",
        "tpe":"DelayList[b]"
      }],
      "tpe":"DelayList[c]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1156,
        "endLine":1157
      }
    },{
      "sym":{
        "namespace":["DelayList"],
        "name":"zipWithIndex",
        "loc":{
          "name":"DelayList.flix",
          "beginLine":1165,
          "endLine":1165
        }
      },
      "ann":[],
      "doc":["Returns a `DelayList` where each element `e` is mapped to `(e, i)` where `i`","is the index of `e`.","","Does not force the tail of `l`."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"DelayList[a]"
      }],
      "tpe":"DelayList[(a, Int32)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayList.flix",
        "beginLine":1165,
        "endLine":1172
      }
    }],
    "Day03":[{
      "sym":{
        "namespace":["Day03"],
        "name":"partOne",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day03.flix",
          "beginLine":53,
          "endLine":53
        }
      },
      "ann":[],
      "doc":[],
      "name":"partOne",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day03.flix",
        "beginLine":53,
        "endLine":54
      }
    },{
      "sym":{
        "namespace":["Day03"],
        "name":"partTwo",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day03.flix",
          "beginLine":56,
          "endLine":56
        }
      },
      "ann":[],
      "doc":[],
      "name":"partTwo",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day03.flix",
        "beginLine":56,
        "endLine":57
      }
    }],
    "Int16":[{
      "sym":{
        "namespace":["Int16"],
        "name":"abs",
        "loc":{
          "name":"Int16.flix",
          "beginLine":56,
          "endLine":56
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`.","If the absolute value exceeds maxValue(), -1 is returned."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":56,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"bitCount",
        "loc":{
          "name":"Int16.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Returns the number of one-bits in the two's complement binary","representation of `x`."],
      "name":"bitCount",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":105,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"clampToInt8",
        "loc":{
          "name":"Int16.flix",
          "beginLine":377,
          "endLine":377
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `min` to `max`."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int8 }"
      },{
        "name":"max",
        "tpe":"{ max = Int8 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":377,
        "endLine":382
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"clearBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":241,
          "endLine":241
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` cleared (to 0).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 15 (leftmost bit)"],
      "name":"clearBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":241,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"compare",
        "loc":{
          "name":"Int16.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > y, -1 if x < y, and 0 if x = y.","The sign of x - y."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      },{
        "name":"y",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":78,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"dist",
        "loc":{
          "name":"Int16.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`.","If this distance exceeds maxValue(), -1 is returned."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      },{
        "name":"y",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":66,
        "endLine":72
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"factorial",
        "loc":{
          "name":"Int16.flix",
          "beginLine":265,
          "endLine":265
        }
      },
      "ann":[],
      "doc":["Returns the factorial of `x`."],
      "name":"factorial",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":265,
        "endLine":265
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"flipBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` flipped.","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 15 (leftmost bit)"],
      "name":"flipBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":248,
        "endLine":248
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"fromString",
        "loc":{
          "name":"Int16.flix",
          "beginLine":276,
          "endLine":276
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int16, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":276,
        "endLine":282
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"getBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":226,
          "endLine":226
        }
      },
      "ann":[],
      "doc":["Returns the bit of `x` at `pos` (either 0 or 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 15 (leftmost bit)"],
      "name":"getBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":226,
        "endLine":227
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"highestOneBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":186,
          "endLine":186
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"highestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":186,
        "endLine":187
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"highestOneBitPosition",
        "loc":{
          "name":"Int16.flix",
          "beginLine":155,
          "endLine":155
        }
      },
      "ann":[],
      "doc":["Returns the position of the highest-order/leftmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 15 (leftmost bit)","-1 if x = 0"],
      "name":"highestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":155,
        "endLine":157
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"log2",
        "loc":{
          "name":"Int16.flix",
          "beginLine":254,
          "endLine":254
        }
      },
      "ann":[],
      "doc":["Returns the integer binary logarithm of `x`.","If the given value is 0 or negative, 0 is returned."],
      "name":"log2",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":254,
        "endLine":260
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"logicalRightShift",
        "loc":{
          "name":"Int16.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the logical right shift of `x` by `distance`.","Only the rightmost 5 bits of `distance` are considered (ie. `distance rem 32`).","A zero is shifted into the leftmost position regardless of sign extension."],
      "name":"logicalRightShift",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":95,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"lowestOneBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":194,
          "endLine":194
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"lowestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":194,
        "endLine":195
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"lowestOneBitPosition",
        "loc":{
          "name":"Int16.flix",
          "beginLine":164,
          "endLine":164
        }
      },
      "ann":[],
      "doc":["Returns the position of the lowest-order/rightmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 15 (leftmost bit)","-1 if x = 0"],
      "name":"lowestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":164,
        "endLine":166
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"max",
        "loc":{
          "name":"Int16.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      },{
        "name":"y",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"maxValue",
        "loc":{
          "name":"Int16.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by an `Int16`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"min",
        "loc":{
          "name":"Int16.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      },{
        "name":"y",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"minValue",
        "loc":{
          "name":"Int16.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by an `Int16`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"numberOfLeadingZeros",
        "loc":{
          "name":"Int16.flix",
          "beginLine":210,
          "endLine":210
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits preceding the","highest-order/leftmost one-bit in `x`.","Returns 16 if x=0."],
      "name":"numberOfLeadingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":210,
        "endLine":211
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"numberOfTrailingZeros",
        "loc":{
          "name":"Int16.flix",
          "beginLine":218,
          "endLine":218
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits following the","lowest-order/rightmost one-bit in `x`.","Returns 16 if x=0."],
      "name":"numberOfTrailingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":218,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"reverse",
        "loc":{
          "name":"Int16.flix",
          "beginLine":133,
          "endLine":133
        }
      },
      "ann":[],
      "doc":["Returns the value obtained by reversing the bits in the","two's complement binary representation of `x`."],
      "name":"reverse",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":133,
        "endLine":133
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"rotateLeft",
        "loc":{
          "name":"Int16.flix",
          "beginLine":124,
          "endLine":124
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` left by `distance` bits."],
      "name":"rotateLeft",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":124,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"rotateRight",
        "loc":{
          "name":"Int16.flix",
          "beginLine":115,
          "endLine":115
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` right by `distance` bits."],
      "name":"rotateRight",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":115,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"setBit",
        "loc":{
          "name":"Int16.flix",
          "beginLine":234,
          "endLine":234
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` set (to 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 15 (leftmost bit)"],
      "name":"setBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":234,
        "endLine":234
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"signum",
        "loc":{
          "name":"Int16.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > 0, -1 if x < 0, and 0 if x = 0.","The sign of x."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":88,
        "endLine":88
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"size",
        "loc":{
          "name":"Int16.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent an `Int16`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toBigDecimal",
        "loc":{
          "name":"Int16.flix",
          "beginLine":356,
          "endLine":356
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigDecimal.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":356,
        "endLine":358
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toBigInt",
        "loc":{
          "name":"Int16.flix",
          "beginLine":325,
          "endLine":325
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigInt.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":325,
        "endLine":329
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toFloat32",
        "loc":{
          "name":"Int16.flix",
          "beginLine":336,
          "endLine":336
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float32.","","The numeric value of `x` is preserved exactly."],
      "name":"toFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":336,
        "endLine":339
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toFloat64",
        "loc":{
          "name":"Int16.flix",
          "beginLine":346,
          "endLine":346
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float64.","","The numeric value of `x` is preserved exactly."],
      "name":"toFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":346,
        "endLine":349
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toInt32",
        "loc":{
          "name":"Int16.flix",
          "beginLine":305,
          "endLine":305
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Int32.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":305,
        "endLine":308
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toInt64",
        "loc":{
          "name":"Int16.flix",
          "beginLine":315,
          "endLine":315
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Int64.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":315,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"toString",
        "loc":{
          "name":"Int16.flix",
          "beginLine":270,
          "endLine":270
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":270,
        "endLine":270
      }
    },{
      "sym":{
        "namespace":["Int16"],
        "name":"tryToInt8",
        "loc":{
          "name":"Int16.flix",
          "beginLine":292,
          "endLine":292
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127)."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int16"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int16.flix",
        "beginLine":292,
        "endLine":298
      }
    }],
    "Array":[{
      "sym":{
        "namespace":["Array"],
        "name":"append",
        "loc":{
          "name":"Array.flix",
          "beginLine":220,
          "endLine":220
        }
      },
      "ann":[],
      "doc":["Return a new array, appending the elements `b` to elements of `a`."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Array[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":220,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"compare",
        "loc":{
          "name":"Array.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Compares `a` and `b` lexicographically."],
      "name":"compare",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[v, r1]"
      },{
        "name":"b",
        "tpe":"Array[v, r2]"
      }],
      "tpe":"Comparison",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":30,
        "endLine":47
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"copyOfRange",
        "loc":{
          "name":"Array.flix",
          "beginLine":1662,
          "endLine":1662
        }
      },
      "ann":[],
      "doc":["Copies the range between `b` (inclusive) and `e` (exclusive) of a into a new array.","","A valid range has the following properties:","- 0 <= `b` <= `length(a)`.","- `e` >= `b`.","If the range is valid and greater than the length of `a`, the resulting array with have the length of the range","and include the specified range of `a`."],
      "name":"copyOfRange",
      "tparams":[{
        "name":"r2",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"_",
        "tpe":"Region[r2]"
      },{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      }],
      "tpe":"Array[a, r2]",
      "eff":"r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1662,
        "endLine":1704
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"count",
        "loc":{
          "name":"Array.flix",
          "beginLine":877,
          "endLine":877
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `a` that satisfy the predicate `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":877,
        "endLine":878
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"drop",
        "loc":{
          "name":"Array.flix",
          "beginLine":1017,
          "endLine":1017
        }
      },
      "ann":[],
      "doc":["Alias for `dropLeft`."],
      "name":"drop",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1017,
        "endLine":1018
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"dropLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":1025,
          "endLine":1025
        }
      },
      "ann":[],
      "doc":["Returns a copy of array `a`, dropping the first `n` elements.","","Returns `[]` if `n > length(a)`."],
      "name":"dropLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1025,
        "endLine":1033
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"dropRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":1040,
          "endLine":1040
        }
      },
      "ann":[],
      "doc":["Returns a copy of array `a`, dropping the last `n` elements.","","Returns `[]` if `n > length(a)`."],
      "name":"dropRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1040,
        "endLine":1048
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"dropWhile",
        "loc":{
          "name":"Array.flix",
          "beginLine":1053,
          "endLine":1053
        }
      },
      "ann":[],
      "doc":["Alias for `dropWhileLeft`."],
      "name":"dropWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1053,
        "endLine":1054
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"dropWhileLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":1059,
          "endLine":1059
        }
      },
      "ann":[],
      "doc":["Returns copy of array `a` without the longest prefix that satisfies the predicate `f`."],
      "name":"dropWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1059,
        "endLine":1064
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"dropWhileRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":1069,
          "endLine":1069
        }
      },
      "ann":[],
      "doc":["Returns copy of array `a` without the longest suffix that satisfies the predicate `f`."],
      "name":"dropWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1069,
        "endLine":1074
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"enumerator",
        "loc":{
          "name":"Array.flix",
          "beginLine":1450,
          "endLine":1450
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `a` in the same region as `a` zipped with the indices of the elements.","","Modifying `a` while using an iterator has undefined behavior and is dangerous."],
      "name":"enumerator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1450,
        "endLine":1451
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"exists",
        "loc":{
          "name":"Array.flix",
          "beginLine":930,
          "endLine":930
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `arr` satisfies the predicate `f`.","","Returns `false` if `arr` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":930,
        "endLine":940
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"filter",
        "loc":{
          "name":"Array.flix",
          "beginLine":962,
          "endLine":962
        }
      },
      "ann":[],
      "doc":["Returns an array of every element in `arr` that satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":962,
        "endLine":984
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"filterMap",
        "loc":{
          "name":"Array.flix",
          "beginLine":1279,
          "endLine":1279
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `a`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1279,
        "endLine":1283
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"find",
        "loc":{
          "name":"Array.flix",
          "beginLine":317,
          "endLine":317
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":317,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findIndexOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":1332,
          "endLine":1332
        }
      },
      "ann":[],
      "doc":["Alias for `findIndexOfLeft`."],
      "name":"findIndexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1332,
        "endLine":1333
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findIndexOfLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":1338,
          "endLine":1338
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first element in `x` satisfying `f`."],
      "name":"findIndexOfLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1338,
        "endLine":1353
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findIndexOfRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":1359,
          "endLine":1359
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first element in `a` satisfying `f`","searching from right to left."],
      "name":"findIndexOfRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1359,
        "endLine":1370
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findIndices",
        "loc":{
          "name":"Array.flix",
          "beginLine":1375,
          "endLine":1375
        }
      },
      "ann":[],
      "doc":["Returns the positions of the all the elements in `a` satisfying `f`."],
      "name":"findIndices",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[Int32, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1375,
        "endLine":1388
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":323,
          "endLine":323
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `a` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":323,
        "endLine":327
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findMap",
        "loc":{
          "name":"Array.flix",
          "beginLine":1290,
          "endLine":1290
        }
      },
      "ann":[],
      "doc":["Returns the first non-None result of applying the partial function `f` to each element of `xs`.","","Returns `None` if every element of `xs` is `None`."],
      "name":"findMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[b]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1290,
        "endLine":1302
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"findRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":332,
          "endLine":332
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `xs` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":332,
        "endLine":336
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"flatMap",
        "loc":{
          "name":"Array.flix",
          "beginLine":463,
          "endLine":463
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `a` and concatenating the results."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Array[b, r] & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":463,
        "endLine":466
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"flatten",
        "loc":{
          "name":"Array.flix",
          "beginLine":913,
          "endLine":913
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the arrays of in the array `arrs`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arrs",
        "tpe":"Array[Array[a, r], r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":913,
        "endLine":923
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"fold",
        "loc":{
          "name":"Array.flix",
          "beginLine":786,
          "endLine":786
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `a`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"a",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":786,
        "endLine":786
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"fold2",
        "loc":{
          "name":"Array.flix",
          "beginLine":1243,
          "endLine":1243
        }
      },
      "ann":[],
      "doc":["Alias for `foldLeft2`."],
      "name":"fold2",
      "tparams":[{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"c -> (a -> (b -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[b, r2]"
      }],
      "tpe":"c",
      "eff":"ef and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1243,
        "endLine":1244
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":793,
          "endLine":793
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `a` going from left to right.","","That is, the result is of the form: `f(...f(f(s, a[0]), a[1])..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":793,
        "endLine":801
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldLeft2",
        "loc":{
          "name":"Array.flix",
          "beginLine":1250,
          "endLine":1250
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `a` and `b`","starting with the initial value `c` and going from left to right."],
      "name":"foldLeft2",
      "tparams":[{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"c -> (a -> (b -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[b, r2]"
      }],
      "tpe":"c",
      "eff":"ef and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1250,
        "endLine":1259
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldMap",
        "loc":{
          "name":"Array.flix",
          "beginLine":835,
          "endLine":835
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":835,
        "endLine":836
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":808,
          "endLine":808
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `a` going from right to left.","","That is, the result is of the form: `f(a[0], ...f(a[n-1], f(a[n], s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":808,
        "endLine":815
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldRight2",
        "loc":{
          "name":"Array.flix",
          "beginLine":1265,
          "endLine":1265
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `a` and `b`","starting with the initial value `c` and going from right to left."],
      "name":"foldRight2",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> (c -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[b, r2]"
      }],
      "tpe":"c",
      "eff":"ef and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1265,
        "endLine":1274
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Array.flix",
          "beginLine":823,
          "endLine":823
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `a` going from right to left.","","That is, the result is of the form: `f(a[0], ...f(a[n-1], f(a[n], z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef and r \\ ef') -> b & ef and r \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":823,
        "endLine":830
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"forAll",
        "loc":{
          "name":"Array.flix",
          "beginLine":947,
          "endLine":947
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `arr` satisfy the predicate `f`.","","Returns `true` if `arr` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":947,
        "endLine":957
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"forEach",
        "loc":{
          "name":"Array.flix",
          "beginLine":1456,
          "endLine":1456
        }
      },
      "ann":[],
      "doc":["Apply the effectful function `f` to all the elements in the array `a`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1456,
        "endLine":1466
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"forEachWithIndex",
        "loc":{
          "name":"Array.flix",
          "beginLine":1471,
          "endLine":1471
        }
      },
      "ann":[],
      "doc":["Apply the effectful function `f` to all the elements in the array `a`."],
      "name":"forEachWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> Unit & ef \\ ef')"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1471,
        "endLine":1481
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"groupBy",
        "loc":{
          "name":"Array.flix",
          "beginLine":1151,
          "endLine":1151
        }
      },
      "ann":[],
      "doc":["Partitions `a` into subarrays such that for any two elements `x` and `y` in a subarray, `f(x, y)` is true.","","A subarray is created by iterating through the remaining elements of `a` from left to right and adding an","element to the subarray if and only if doing so creates no conflicts with the elements already in the subarray.","","The function `f` must be pure."],
      "name":"groupBy",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"f",
        "tpe":"a -> (a -> Bool)"
      },{
        "name":"a",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Array[Array[a, r1], r2]",
      "eff":"r2 and r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1151,
        "endLine":1154
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"head",
        "loc":{
          "name":"Array.flix",
          "beginLine":205,
          "endLine":205
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the first element of `a`.","","Returns `None` if `a` is empty."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":205,
        "endLine":206
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"indexOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":273,
          "endLine":273
        }
      },
      "ann":[],
      "doc":["Alias for `IndexOfLeft`"],
      "name":"indexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":273,
        "endLine":274
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"indexOfLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":280,
          "endLine":280
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first occurrence of `a` in `arr`","searching from left to right."],
      "name":"indexOfLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":280,
        "endLine":290
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"indexOfRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":296,
          "endLine":296
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first occurrence of `a` in `arr`","searching from right to left."],
      "name":"indexOfRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":296,
        "endLine":306
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"indices",
        "loc":{
          "name":"Array.flix",
          "beginLine":311,
          "endLine":311
        }
      },
      "ann":[],
      "doc":["Return the positions of the all the occurrences of `a` in `arr`."],
      "name":"indices",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[Int32, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":311,
        "endLine":312
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"init",
        "loc":{
          "name":"Array.flix",
          "beginLine":1393,
          "endLine":1393
        }
      },
      "ann":[],
      "doc":["Build an array of length `len` by applying `f` to the successive indices."],
      "name":"init",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"f",
        "tpe":"Int32 -> a & ef \\ ef'"
      },{
        "name":"len",
        "tpe":"Int32"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1393,
        "endLine":1408
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"intercalate",
        "loc":{
          "name":"Array.flix",
          "beginLine":619,
          "endLine":619
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `arrs` with the elements of `sep` inserted between every two adjacent elements."],
      "name":"intercalate",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"Array[a, r]"
      },{
        "name":"arrs",
        "tpe":"Array[Array[a, r], r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":619,
        "endLine":641
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"intersperse",
        "loc":{
          "name":"Array.flix",
          "beginLine":603,
          "endLine":603
        }
      },
      "ann":[],
      "doc":["Returns `a` with `x` inserted between every two adjacent elements."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":603,
        "endLine":614
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"isEmpty",
        "loc":{
          "name":"Array.flix",
          "beginLine":96,
          "endLine":96
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given array `a` is empty."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":96,
        "endLine":96
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"isInfixOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":726,
          "endLine":726
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `a1` is a infix of `a2`."],
      "name":"isInfixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a1",
        "tpe":"Array[a, r1]"
      },{
        "name":"a2",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":726,
        "endLine":734
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"isPrefixOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":708,
          "endLine":708
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `a1` is a prefix of `a2`."],
      "name":"isPrefixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a1",
        "tpe":"Array[a, r1]"
      },{
        "name":"a2",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":708,
        "endLine":721
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"isSuffixOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":767,
          "endLine":767
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `a1` is a suffix of `a2`."],
      "name":"isSuffixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a1",
        "tpe":"Array[a, r1]"
      },{
        "name":"a2",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":767,
        "endLine":781
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"iterator",
        "loc":{
          "name":"Array.flix",
          "beginLine":1434,
          "endLine":1434
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `a` in the same region as `a`.","","Modifying `a` while using an iterator has undefined behavior and is dangerous."],
      "name":"iterator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1434,
        "endLine":1443
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"join",
        "loc":{
          "name":"Array.flix",
          "beginLine":1510,
          "endLine":1510
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `a` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1510,
        "endLine":1511
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"joinWith",
        "loc":{
          "name":"Array.flix",
          "beginLine":1517,
          "endLine":1517
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `a` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1517,
        "endLine":1523
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"last",
        "loc":{
          "name":"Array.flix",
          "beginLine":213,
          "endLine":213
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the last element of `a`.","","Returns `None` if `a` is empty."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":213,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"length",
        "loc":{
          "name":"Array.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":[],
      "doc":["Returns the length of the array `a`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":101,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"map",
        "loc":{
          "name":"Array.flix",
          "beginLine":415,
          "endLine":415
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `a`.","","The result is a new array."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":415,
        "endLine":418
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"mapWithIndex",
        "loc":{
          "name":"Array.flix",
          "beginLine":440,
          "endLine":440
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `a` along with that element's index.","","That is, the result is of the form: `[ f(a[0], 0), f(a[1], 1), ... ]`."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":440,
        "endLine":443
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"maximum",
        "loc":{
          "name":"Array.flix",
          "beginLine":259,
          "endLine":259
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `a` according to the `Order` on `a`.","","Returns `None` if `a` is empty."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":259,
        "endLine":260
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"maximumBy",
        "loc":{
          "name":"Array.flix",
          "beginLine":267,
          "endLine":267
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `a` according to the given comparator `cmp`.","","Returns `None` if `a` is empty."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":267,
        "endLine":268
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"memberOf",
        "loc":{
          "name":"Array.flix",
          "beginLine":235,
          "endLine":235
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `a` contains the element `x`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":235,
        "endLine":236
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"minimum",
        "loc":{
          "name":"Array.flix",
          "beginLine":243,
          "endLine":243
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `a` according to the `Order` on `a`.","","Returns `None` if `a` is empty."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":243,
        "endLine":244
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"minimumBy",
        "loc":{
          "name":"Array.flix",
          "beginLine":251,
          "endLine":251
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `a` according to the given comparator `cmp`.","","Returns `None` if `a` is empty."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":251,
        "endLine":252
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"new",
        "loc":{
          "name":"Array.flix",
          "beginLine":73,
          "endLine":73
        }
      },
      "ann":[],
      "doc":["Returns a fresh array of length `l` filled with the element `x`.","","Equivalent to the expression `[x; l]`."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"Int32"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":73,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"nth",
        "loc":{
          "name":"Array.flix",
          "beginLine":79,
          "endLine":79
        }
      },
      "ann":[],
      "doc":["Optionally returns the element at position `i` in the array `a`."],
      "name":"nth",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":79,
        "endLine":83
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"partition",
        "loc":{
          "name":"Array.flix",
          "beginLine":992,
          "endLine":992
        }
      },
      "ann":[],
      "doc":["Returns a pair of lists `(a1, a2)`.","","`a1` contains all elements of `a` that satisfy the predicate `f`.","`a2` contains all elements of `a` that do not satisfy the predicate `f`."],
      "name":"partition",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"(Array[a, r], Array[a, r])",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":992,
        "endLine":999
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"patch",
        "loc":{
          "name":"Array.flix",
          "beginLine":579,
          "endLine":579
        }
      },
      "ann":[],
      "doc":["Returns `b` with the `n` elements starting at index `i` replaced with the elements of `a`.","","If any of the indices `i, i+1, i+2, ... , i+n-1` are out of range in `b` then no patching is done at these indices.","If `a` becomes depleted then no further patching is done.","If patching occurs at index `i+j` in `b`, then the element at index `j` in `a` is used."],
      "name":"patch",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Array[a, r2]",
      "eff":"r1 and r2 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":579,
        "endLine":584
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"patch!",
        "loc":{
          "name":"Array.flix",
          "beginLine":593,
          "endLine":593
        }
      },
      "ann":[],
      "doc":["Update the mutable array `b` replacing `n` elements starting at index `i` with the corresponding elements of array `a`.","","If any of the indices `i, i+1, i+2, ... , i+n-1` are out of range in `b` then no patching is done at these indices.","If `a` becomes depleted then no further patching is done.","If patching occurs at index `i+j` in `b`, then the element at index `j` in `a` is used."],
      "name":"patch!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Unit",
      "eff":"r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":593,
        "endLine":598
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"product",
        "loc":{
          "name":"Array.flix",
          "beginLine":895,
          "endLine":895
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the array `a`."],
      "name":"product",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":895,
        "endLine":899
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"productWith",
        "loc":{
          "name":"Array.flix",
          "beginLine":904,
          "endLine":904
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the array `a` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":904,
        "endLine":908
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"put",
        "loc":{
          "name":"Array.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":[],
      "doc":["Stores the value `x` at position `i` in the array `a`.","","Equivalent to the expression `a[i] = x`."],
      "name":"put",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":90,
        "endLine":91
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"range",
        "loc":{
          "name":"Array.flix",
          "beginLine":343,
          "endLine":343
        }
      },
      "ann":[],
      "doc":["Returns an array of all integers between `b` (inclusive) and `e` (exclusive).","","Returns `[]` if `b >= e`."],
      "name":"range",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"Array[Int32, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":343,
        "endLine":349
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"reduceLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":843,
          "endLine":843
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `a` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","Returns `None` if `a` is empty."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":843,
        "endLine":854
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"reduceRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":861,
          "endLine":861
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `arr` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","Returns `None` if `arr` is empty."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":861,
        "endLine":872
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"repeat",
        "loc":{
          "name":"Array.flix",
          "beginLine":356,
          "endLine":356
        }
      },
      "ann":[],
      "doc":["Returns an array with the element `x` repeated `n` times.","","Returns `[]` if `n <= 0`."],
      "name":"repeat",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":356,
        "endLine":360
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"replace",
        "loc":{
          "name":"Array.flix",
          "beginLine":563,
          "endLine":563
        }
      },
      "ann":[],
      "doc":["Returns a copy of `a` with every occurrence of `from` replaced by `to`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":563,
        "endLine":564
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"replace!",
        "loc":{
          "name":"Array.flix",
          "beginLine":569,
          "endLine":569
        }
      },
      "ann":[],
      "doc":["Replace every occurrence of `from` by `to` in the array `a`, mutating it in place."],
      "name":"replace!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":569,
        "endLine":570
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"reverse",
        "loc":{
          "name":"Array.flix",
          "beginLine":471,
          "endLine":471
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `a`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":471,
        "endLine":475
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"reverse!",
        "loc":{
          "name":"Array.flix",
          "beginLine":480,
          "endLine":480
        }
      },
      "ann":[],
      "doc":["Reverse the array `arr`, mutating it in place."],
      "name":"reverse!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":480,
        "endLine":494
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"rotateLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":499,
          "endLine":499
        }
      },
      "ann":[],
      "doc":["Rotate the contents of array `arr` by `n` steps to the left."],
      "name":"rotateLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":499,
        "endLine":507
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"rotateRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":525,
          "endLine":525
        }
      },
      "ann":[],
      "doc":["Rotate the contents of array `arr` by `n` steps to the right."],
      "name":"rotateRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":525,
        "endLine":532
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sameElements",
        "loc":{
          "name":"Array.flix",
          "beginLine":1413,
          "endLine":1413
        }
      },
      "ann":[],
      "doc":["Returns `true` if arrays `a` and `b` have the same elements in the same order, i.e. are structurally equal."],
      "name":"sameElements",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1413,
        "endLine":1427
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"scan",
        "loc":{
          "name":"Array.flix",
          "beginLine":365,
          "endLine":365
        }
      },
      "ann":[],
      "doc":["Alias for `scanLeft`."],
      "name":"scan",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":365,
        "endLine":366
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"scanLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":373,
          "endLine":373
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `arr` going left to right.","","That is, the result is of the form: `[s , f(s, x1), f(f(s, x1), x2),  ...]`."],
      "name":"scanLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":373,
        "endLine":387
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"scanRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":394,
          "endLine":394
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `xs` going right to left.","","That is, the result is of the form: `[..., f(xn-1, f(xn, s)), f(xn, s), s]`."],
      "name":"scanRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":394,
        "endLine":408
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"shuffle",
        "loc":{
          "name":"Array.flix",
          "beginLine":1709,
          "endLine":1709
        }
      },
      "ann":[],
      "doc":["Shuffles `a` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1709,
        "endLine":1720
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"slice",
        "loc":{
          "name":"Array.flix",
          "beginLine":108,
          "endLine":108
        }
      },
      "ann":[],
      "doc":["Returns a fresh array with the elements from the array `a` from index `b` (inclusive) until index `e` (exclusive).","","Equivalent to the expression `a[b..e]`."],
      "name":"slice",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":108,
        "endLine":108
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sort",
        "loc":{
          "name":"Array.flix",
          "beginLine":1533,
          "endLine":1533
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of array `a`, where the elements are ordered from low to high according to","their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1533,
        "endLine":1534
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sort!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1570,
          "endLine":1570
        }
      },
      "ann":[],
      "doc":["Sort array `a` so that elements are ordered from low to high according to their `Order` instance.","The array is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sort!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1570,
        "endLine":1571
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sortBy",
        "loc":{
          "name":"Array.flix",
          "beginLine":1544,
          "endLine":1544
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of array `a`, where the elements are ordered from low to high according to","the `Order` instance for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1544,
        "endLine":1545
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sortBy!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1581,
          "endLine":1581
        }
      },
      "ann":[],
      "doc":["Sort array `a` so that elements are ordered from low to high according to the `Order` instance for","the values obtained by applying `f` to each element. The array is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sortBy!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1581,
        "endLine":1582
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sortWith",
        "loc":{
          "name":"Array.flix",
          "beginLine":1555,
          "endLine":1555
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of array `a`, where the elements are ordered from low to high according to","the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1555,
        "endLine":1560
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sortWith!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1592,
          "endLine":1592
        }
      },
      "ann":[],
      "doc":["Sort array `a` so that elements are ordered from low to high according to the comparison function `cmp`.","The array is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sortWith!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1592,
        "endLine":1593
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sortWithin!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1604,
          "endLine":1604
        }
      },
      "ann":[],
      "doc":["Sort array `a` between the indices `lo` and `hi` (both inclusive) so that elements in that range are ordered","from low to high according to the comparison function `cmp`. The array is mutated in-place where elements","outside the specified range are not changed. If `lo >= hi`, this does nothing.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `a`.","","The sort implementation is a Quicksort."],
      "name":"sortWithin!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"lo",
        "tpe":"Int32"
      },{
        "name":"hi",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1604,
        "endLine":1611
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"span",
        "loc":{
          "name":"Array.flix",
          "beginLine":1007,
          "endLine":1007
        }
      },
      "ann":[],
      "doc":["Returns a pair of arrays `(a1, a2)`.","","`a1` is the longest prefix of `a` that satisfies the predicate `f`.","`a2` is the remainder of `a`."],
      "name":"span",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"(Array[a, r], Array[a, r])",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1007,
        "endLine":1012
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sum",
        "loc":{
          "name":"Array.flix",
          "beginLine":883,
          "endLine":883
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the array `a`."],
      "name":"sum",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":883,
        "endLine":884
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"sumWith",
        "loc":{
          "name":"Array.flix",
          "beginLine":889,
          "endLine":889
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the array `a` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":889,
        "endLine":890
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"swap!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1618,
          "endLine":1618
        }
      },
      "ann":[],
      "doc":["Swap the elements at `i` and `j` (helper for sorting).","","Precondition: `i` and `j` are within bounds."],
      "name":"swap!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"j",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1618,
        "endLine":1623
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"take",
        "loc":{
          "name":"Array.flix",
          "beginLine":1079,
          "endLine":1079
        }
      },
      "ann":[],
      "doc":["Alias for `takeLeft`."],
      "name":"take",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1079,
        "endLine":1080
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"takeLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":1087,
          "endLine":1087
        }
      },
      "ann":[],
      "doc":["Returns a fresh array taking first `n` elements of `a`.","","Returns `a` if `n > length(xs)`."],
      "name":"takeLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1087,
        "endLine":1095
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"takeRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":1102,
          "endLine":1102
        }
      },
      "ann":[],
      "doc":["Returns a fresh array taking last `n` elements of `a`.","","Returns `a` if `n > length(xs)`."],
      "name":"takeRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1102,
        "endLine":1110
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"takeWhile",
        "loc":{
          "name":"Array.flix",
          "beginLine":1117,
          "endLine":1117
        }
      },
      "ann":[],
      "doc":["Alias for `takeWhileLeft`.","","The function `f` must be pure."],
      "name":"takeWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1117,
        "endLine":1118
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"takeWhileLeft",
        "loc":{
          "name":"Array.flix",
          "beginLine":1125,
          "endLine":1125
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `a` that satisfies the predicate `f`.","","The function `f` must be pure."],
      "name":"takeWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1125,
        "endLine":1129
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"takeWhileRight",
        "loc":{
          "name":"Array.flix",
          "beginLine":1136,
          "endLine":1136
        }
      },
      "ann":[],
      "doc":["Returns the longest suffix of `a` that satisfies the predicate `f`.","","The function `f` must be pure."],
      "name":"takeWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1136,
        "endLine":1141
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toChain",
        "loc":{
          "name":"Array.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Returns the array `arr` as a chain."],
      "name":"toChain",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Chain[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":160,
        "endLine":169
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toDelayList",
        "loc":{
          "name":"Array.flix",
          "beginLine":148,
          "endLine":148
        }
      },
      "ann":[],
      "doc":["Returns the array `a` as a `DelayList`."],
      "name":"toDelayList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"DelayList[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":148,
        "endLine":155
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toList",
        "loc":{
          "name":"Array.flix",
          "beginLine":113,
          "endLine":113
        }
      },
      "ann":[],
      "doc":["Returns the array `a` as a list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":113,
        "endLine":122
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toMap",
        "loc":{
          "name":"Array.flix",
          "beginLine":1316,
          "endLine":1316
        }
      },
      "ann":[],
      "doc":["Returns the association list `xs` as a map.","","If `xs` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[(a, b), r]"
      }],
      "tpe":"Map[a, b]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1316,
        "endLine":1317
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toMutDeque",
        "loc":{
          "name":"Array.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Returns `a` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"a",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"MutDeque[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":195,
        "endLine":198
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toMutList",
        "loc":{
          "name":"Array.flix",
          "beginLine":1322,
          "endLine":1322
        }
      },
      "ann":[],
      "doc":["Returns the array `a` as a MutList."],
      "name":"toMutList",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"a",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"MutList[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1322,
        "endLine":1327
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toNec",
        "loc":{
          "name":"Array.flix",
          "beginLine":176,
          "endLine":176
        }
      },
      "ann":[],
      "doc":["Optionally returns the array `arr` as a non-empty chain.","","If `arr` is empty return `None`, otherwise return the Nec wrapped in `Some`."],
      "name":"toNec",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Nec[a]]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":176,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toNel",
        "loc":{
          "name":"Array.flix",
          "beginLine":129,
          "endLine":129
        }
      },
      "ann":[],
      "doc":["Optionally returns the array `arr` as a non-empty list.","","If `arr` is empty return `None`, otherwise return the Nel wrapped in `Some`."],
      "name":"toNel",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Option[Nel[a]]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":129,
        "endLine":143
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toSet",
        "loc":{
          "name":"Array.flix",
          "beginLine":1307,
          "endLine":1307
        }
      },
      "ann":[],
      "doc":["Returns the array `a` as a set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Set[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":1307,
        "endLine":1308
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"toString",
        "loc":{
          "name":"Array.flix",
          "beginLine":52,
          "endLine":52
        }
      },
      "ann":[],
      "doc":["Returns a string representation of the given array `a`."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Array.flix",
        "beginLine":52,
        "endLine":66
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"transform!",
        "loc":{
          "name":"Array.flix",
          "beginLine":423,
          "endLine":423
        }
      },
      "ann":[],
      "doc":["Apply `f` to every element in array `arr`. Array `arr` is mutated."],
      "name":"transform!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> a & ef \\ ef'"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":423,
        "endLine":433
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"transformWithIndex!",
        "loc":{
          "name":"Array.flix",
          "beginLine":448,
          "endLine":448
        }
      },
      "ann":[],
      "doc":["Apply `f` to every element in array `a` along with that element's index. Array `a` is mutated."],
      "name":"transformWithIndex!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> a & ef \\ ef')"
      },{
        "name":"arr",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":448,
        "endLine":458
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"transpose",
        "loc":{
          "name":"Array.flix",
          "beginLine":685,
          "endLine":685
        }
      },
      "ann":[],
      "doc":["Returns the transpose of `a`.","","Returns `a` if the dimensions of the elements of `a` are mismatched."],
      "name":"transpose",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[Array[a, r1], r2]"
      }],
      "tpe":"Array[Array[a, r1], r2]",
      "eff":"r1 and r2 and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":685,
        "endLine":697
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"unzip",
        "loc":{
          "name":"Array.flix",
          "beginLine":1219,
          "endLine":1219
        }
      },
      "ann":[],
      "doc":["Returns a pair of arrays, the first containing all first components in `a`","and the second containing all second components in `a`."],
      "name":"unzip",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r3",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"r2",
        "tpe":"Region[r2]"
      },{
        "name":"a",
        "tpe":"Array[(a, b), r3]"
      }],
      "tpe":"(Array[a, r1], Array[b, r2])",
      "eff":"r1 and r2 and r3",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1219,
        "endLine":1238
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"update",
        "loc":{
          "name":"Array.flix",
          "beginLine":554,
          "endLine":554
        }
      },
      "ann":[],
      "doc":["Returns a copy of `a` with the element at index `i` replaced by `x`.","","Returns a shallow copy of `a` if `i < 0` or `i > length(xs)-1`."],
      "name":"update",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"a",
        "tpe":"Array[a, r]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":554,
        "endLine":558
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"updateSequence",
        "loc":{
          "name":"Array.flix",
          "beginLine":1486,
          "endLine":1486
        }
      },
      "ann":[],
      "doc":["Returns a copy of `a` with the elements starting at index `i` replaced by `sub`."],
      "name":"updateSequence",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"sub",
        "tpe":"Array[a, r1]"
      },{
        "name":"a",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Array[a, r2]",
      "eff":"r1 and r2 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1486,
        "endLine":1491
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"updateSequence!",
        "loc":{
          "name":"Array.flix",
          "beginLine":1496,
          "endLine":1496
        }
      },
      "ann":[],
      "doc":["Update the mutable array `a` with the elements starting at index `i` replaced by `sub`."],
      "name":"updateSequence!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"sub",
        "tpe":"Array[a, r1]"
      },{
        "name":"a",
        "tpe":"Array[a, r2]"
      }],
      "tpe":"Unit",
      "eff":"r1 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1496,
        "endLine":1504
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"zip",
        "loc":{
          "name":"Array.flix",
          "beginLine":1199,
          "endLine":1199
        }
      },
      "ann":[],
      "doc":["Returns an array where the element at index `i` is `(x, y)` where","`x` is the element at index `i` in `a` and `y` is the element at index `i` in `b`.","","If either `a` or `b` becomes depleted, then no further elements are added to the resulting array."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[b, r2]"
      }],
      "tpe":"Array[(a, b), r2]",
      "eff":"r1 and r2 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1199,
        "endLine":1202
      }
    },{
      "sym":{
        "namespace":["Array"],
        "name":"zipWith",
        "loc":{
          "name":"Array.flix",
          "beginLine":1210,
          "endLine":1210
        }
      },
      "ann":[],
      "doc":["Returns an array where the element at index `i` is `f(x, y)` where","`x` is the element at index `i` in `a` and `y` is the element at index `i` in `b`.","","If either `a` or `b` becomes depleted, then no further elements are added to the resulting array."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"b",
        "tpe":"Array[b, r2]"
      }],
      "tpe":"Array[c, r2]",
      "eff":"ef and r1 and r2 and r2",
      "tcs":[],
      "loc":{
        "name":"Array.flix",
        "beginLine":1210,
        "endLine":1213
      }
    }],
    "Nel":[{
      "sym":{
        "namespace":["Nel"],
        "name":"ap",
        "loc":{
          "name":"Nel.flix",
          "beginLine":271,
          "endLine":271
        }
      },
      "ann":[],
      "doc":["Apply every function from `f` to every argument from `l` and return a non-empty list with all results.","For `f = f1, f2, ...` and `x = x1, x2, ...` the results appear in the order","`f1(x1), f1(x2), ..., f2(x1), f2(x2), ...`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Nel[a -> b & ef \\ ef']"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":271,
        "endLine":284
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"append",
        "loc":{
          "name":"Nel.flix",
          "beginLine":188,
          "endLine":188
        }
      },
      "ann":[],
      "doc":["Returns `l2` appended to `l1`."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"Nel[a]"
      },{
        "name":"l2",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":188,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"cons",
        "loc":{
          "name":"Nel.flix",
          "beginLine":142,
          "endLine":142
        }
      },
      "ann":[],
      "doc":["Returns the non-empty list `l` prefixed with the new element `x`."],
      "name":"cons",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":142,
        "endLine":144
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"count",
        "loc":{
          "name":"Nel.flix",
          "beginLine":436,
          "endLine":436
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `l` that satisfy the predicate `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":436,
        "endLine":438
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"dropWhile",
        "loc":{
          "name":"Nel.flix",
          "beginLine":676,
          "endLine":676
        }
      },
      "ann":[],
      "doc":["Returns `l` without the longest prefix that satisfies the predicate `f`."],
      "name":"dropWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":676,
        "endLine":678
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"exists",
        "loc":{
          "name":"Nel.flix",
          "beginLine":474,
          "endLine":474
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `l` satisfies the predicate `f`."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":474,
        "endLine":476
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"filter",
        "loc":{
          "name":"Nel.flix",
          "beginLine":488,
          "endLine":488
        }
      },
      "ann":[],
      "doc":["Returns a list of every element in `l` that satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":488,
        "endLine":494
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"find",
        "loc":{
          "name":"Nel.flix",
          "beginLine":226,
          "endLine":226
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":226,
        "endLine":226
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"findLeft",
        "loc":{
          "name":"Nel.flix",
          "beginLine":231,
          "endLine":231
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":231,
        "endLine":233
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"findRight",
        "loc":{
          "name":"Nel.flix",
          "beginLine":238,
          "endLine":238
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":238,
        "endLine":243
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"flatMap",
        "loc":{
          "name":"Nel.flix",
          "beginLine":289,
          "endLine":289
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l` and concatenating the results."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Nel[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":289,
        "endLine":293
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"flatten",
        "loc":{
          "name":"Nel.flix",
          "beginLine":467,
          "endLine":467
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `l`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[Nel[a]]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":467,
        "endLine":469
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"fold",
        "loc":{
          "name":"Nel.flix",
          "beginLine":346,
          "endLine":346
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `l`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":346,
        "endLine":346
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"foldLeft",
        "loc":{
          "name":"Nel.flix",
          "beginLine":353,
          "endLine":353
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":353,
        "endLine":355
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"foldMap",
        "loc":{
          "name":"Nel.flix",
          "beginLine":379,
          "endLine":379
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":379,
        "endLine":380
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"foldRight",
        "loc":{
          "name":"Nel.flix",
          "beginLine":362,
          "endLine":362
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":362,
        "endLine":364
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Nel.flix",
          "beginLine":372,
          "endLine":372
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":372,
        "endLine":374
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"forAll",
        "loc":{
          "name":"Nel.flix",
          "beginLine":481,
          "endLine":481
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `l` satisfy the predicate `f`."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":481,
        "endLine":483
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"forEach",
        "loc":{
          "name":"Nel.flix",
          "beginLine":574,
          "endLine":574
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `l`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":574,
        "endLine":576
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"head",
        "loc":{
          "name":"Nel.flix",
          "beginLine":149,
          "endLine":149
        }
      },
      "ann":[],
      "doc":["Returns the first element of `l`."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":149,
        "endLine":151
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"init",
        "loc":{
          "name":"Nel.flix",
          "beginLine":163,
          "endLine":163
        }
      },
      "ann":[],
      "doc":["Returns all elements in `l` without the last element."],
      "name":"init",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":163,
        "endLine":169
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"intersperse",
        "loc":{
          "name":"Nel.flix",
          "beginLine":338,
          "endLine":338
        }
      },
      "ann":[],
      "doc":["Returns `l` with `a` inserted between every two adjacent elements."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":338,
        "endLine":341
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"iterator",
        "loc":{
          "name":"Nel.flix",
          "beginLine":629,
          "endLine":629
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":629,
        "endLine":631
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"join",
        "loc":{
          "name":"Nel.flix",
          "beginLine":663,
          "endLine":663
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `l` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":663,
        "endLine":664
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"joinWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":670,
          "endLine":670
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `l` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":670,
        "endLine":671
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"last",
        "loc":{
          "name":"Nel.flix",
          "beginLine":156,
          "endLine":156
        }
      },
      "ann":[],
      "doc":["Returns the last element of `l`."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":156,
        "endLine":158
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"length",
        "loc":{
          "name":"Nel.flix",
          "beginLine":181,
          "endLine":181
        }
      },
      "ann":[],
      "doc":["Returns the length of `l`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":181,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"map",
        "loc":{
          "name":"Nel.flix",
          "beginLine":250,
          "endLine":250
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l`.","","That is, the result is of the form: `f(x1) :: f(x2) :: ...`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":250,
        "endLine":252
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"mapWithIndex",
        "loc":{
          "name":"Nel.flix",
          "beginLine":259,
          "endLine":259
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l` along with that element's index.","","That is, the result is of the form: `f(x1, 0) :: f(x2, 1) :: ...`."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":259,
        "endLine":264
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"maximum",
        "loc":{
          "name":"Nel.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Finds the largest element of `l` according to the `Order` on `a`."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":214,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"maximumBy",
        "loc":{
          "name":"Nel.flix",
          "beginLine":220,
          "endLine":220
        }
      },
      "ann":[],
      "doc":["Finds the largest element of `l` according to the given comparator `cmp`."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":220,
        "endLine":221
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"memberOf",
        "loc":{
          "name":"Nel.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `l` contains the element `a`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":195,
        "endLine":197
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"minimum",
        "loc":{
          "name":"Nel.flix",
          "beginLine":202,
          "endLine":202
        }
      },
      "ann":[],
      "doc":["Finds the smallest element of `l` according to the `Order` on `a`."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":202,
        "endLine":203
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"minimumBy",
        "loc":{
          "name":"Nel.flix",
          "beginLine":208,
          "endLine":208
        }
      },
      "ann":[],
      "doc":["Finds the smallest element of `l` according to the given comparator `cmp`."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":208,
        "endLine":209
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"permutations",
        "loc":{
          "name":"Nel.flix",
          "beginLine":316,
          "endLine":316
        }
      },
      "ann":[],
      "doc":["Returns all permutations of `l` in lexicographical order by element indices in `l`.","","That is, `l` is the first permutation and `reverse(l)` is the last permutation."],
      "name":"permutations",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":316,
        "endLine":321
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"product",
        "loc":{
          "name":"Nel.flix",
          "beginLine":455,
          "endLine":455
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":455,
        "endLine":456
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"productWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":461,
          "endLine":461
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":461,
        "endLine":462
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reduce",
        "loc":{
          "name":"Nel.flix",
          "beginLine":408,
          "endLine":408
        }
      },
      "ann":[],
      "doc":["Applies `combine` to all elements in `l` until a single value is obtained."],
      "name":"reduce",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":408,
        "endLine":410
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reduceLeft",
        "loc":{
          "name":"Nel.flix",
          "beginLine":417,
          "endLine":417
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `l` going from left to right until a single value `v` is obtained.","","That is, the result is of the form: `f(...f(f(x1, x2), x3)..., xn)`"],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":417,
        "endLine":419
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reduceLeftTo",
        "loc":{
          "name":"Nel.flix",
          "beginLine":387,
          "endLine":387
        }
      },
      "ann":[],
      "doc":["Left-associative reduction of a structure.","Applies `g` to the initial element of `l` and combines it","with the remainder of `l` using `f` going from left to right."],
      "name":"reduceLeftTo",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef1 \\ ef1')"
      },{
        "name":"g",
        "tpe":"a -> b & ef2 \\ ef2'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":387,
        "endLine":389
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reduceRight",
        "loc":{
          "name":"Nel.flix",
          "beginLine":426,
          "endLine":426
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `l` going from right to left until a single value `v` is obtained.","","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`"],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":426,
        "endLine":431
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reduceRightTo",
        "loc":{
          "name":"Nel.flix",
          "beginLine":396,
          "endLine":396
        }
      },
      "ann":[],
      "doc":["Right-associative reduction of a structure.","Applies `g` to the initial element of `l` and combines it","with the remainder of `l` using `f` going from right to left."],
      "name":"reduceRightTo",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1_",
        "kind":"Effect"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2_",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef1 \\ ef1_)"
      },{
        "name":"g",
        "tpe":"a -> b & ef2 \\ ef2_"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"b",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":396,
        "endLine":403
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"replace",
        "loc":{
          "name":"Nel.flix",
          "beginLine":308,
          "endLine":308
        }
      },
      "ann":[],
      "doc":["Returns `l` with every occurrence of `from` replaced by `to`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":308,
        "endLine":309
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"reverse",
        "loc":{
          "name":"Nel.flix",
          "beginLine":298,
          "endLine":298
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `l`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":298,
        "endLine":303
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sequence",
        "loc":{
          "name":"Nel.flix",
          "beginLine":637,
          "endLine":637
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","non-empty list `l`."],
      "name":"sequence",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[m[a]]"
      }],
      "tpe":"m[Nel[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":637,
        "endLine":640
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"shuffle",
        "loc":{
          "name":"Nel.flix",
          "beginLine":690,
          "endLine":690
        }
      },
      "ann":[],
      "doc":["Optionally returns the Nel `l` shuffled using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Option[Nel[a]]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":690,
        "endLine":692
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"singleton",
        "loc":{
          "name":"Nel.flix",
          "beginLine":137,
          "endLine":137
        }
      },
      "ann":[],
      "doc":["Returns a new non-empty list containing the single element `x`."],
      "name":"singleton",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":137,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sort",
        "loc":{
          "name":"Nel.flix",
          "beginLine":586,
          "endLine":586
        }
      },
      "ann":[],
      "doc":["Sort the non-empty list `l` so that elements are ordered from low to high according","to their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":586,
        "endLine":592
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sortBy",
        "loc":{
          "name":"Nel.flix",
          "beginLine":602,
          "endLine":602
        }
      },
      "ann":[],
      "doc":["Sort the non-empty list `l` so that elements are ordered from low to high according","to the `Order` instance for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":602,
        "endLine":608
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sortWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":618,
          "endLine":618
        }
      },
      "ann":[],
      "doc":["Sort the non-empty list `l` so that elements are ordered from low to high according","to the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":618,
        "endLine":624
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"subsequences",
        "loc":{
          "name":"Nel.flix",
          "beginLine":328,
          "endLine":328
        }
      },
      "ann":[],
      "doc":["Returns all subsequences of `l` in lexicographical order by element indices in `l`.","","That is, `l` is the first subsequence and `Nil` is the last subsequence."],
      "name":"subsequences",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":328,
        "endLine":333
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sum",
        "loc":{
          "name":"Nel.flix",
          "beginLine":443,
          "endLine":443
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the list `l`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":443,
        "endLine":444
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"sumWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":449,
          "endLine":449
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the list `l` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":449,
        "endLine":450
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"tail",
        "loc":{
          "name":"Nel.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":[],
      "doc":["Returns all elements in `l` without the first element."],
      "name":"tail",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":174,
        "endLine":176
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"takeWhile",
        "loc":{
          "name":"Nel.flix",
          "beginLine":683,
          "endLine":683
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `l` that satisfies the predicate `f`."],
      "name":"takeWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":683,
        "endLine":685
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"toArray",
        "loc":{
          "name":"Nel.flix",
          "beginLine":560,
          "endLine":560
        }
      },
      "ann":[],
      "doc":["Returns `l` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":560,
        "endLine":561
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"toList",
        "loc":{
          "name":"Nel.flix",
          "beginLine":553,
          "endLine":553
        }
      },
      "ann":[],
      "doc":["Returns `l` as a normal list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":553,
        "endLine":555
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"toMapWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":656,
          "endLine":656
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `l` as keys and `f` applied as values.","","If `l` contains multiple mappings with the same key, `toMapWith` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":656,
        "endLine":657
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"toMutDeque",
        "loc":{
          "name":"Nel.flix",
          "beginLine":566,
          "endLine":566
        }
      },
      "ann":[],
      "doc":["Returns `l` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":566,
        "endLine":569
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"toString",
        "loc":{
          "name":"Nel.flix",
          "beginLine":122,
          "endLine":122
        }
      },
      "ann":[],
      "doc":["Returns a string representation of the given non-empty list `l`."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":122,
        "endLine":132
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"traverse",
        "loc":{
          "name":"Nel.flix",
          "beginLine":645,
          "endLine":645
        }
      },
      "ann":[],
      "doc":["Returns the result of running all the actions in the non-empty list `l`."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"m[Nel[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":645,
        "endLine":648
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"unzip",
        "loc":{
          "name":"Nel.flix",
          "beginLine":520,
          "endLine":520
        }
      },
      "ann":[],
      "doc":["Returns a pair of non-empty lists, the first containing all first components in `l`","and the second containing all second components in `l`."],
      "name":"unzip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[(a, b)]"
      }],
      "tpe":"(Nel[a], Nel[b])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":520,
        "endLine":523
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"zip",
        "loc":{
          "name":"Nel.flix",
          "beginLine":502,
          "endLine":502
        }
      },
      "ann":[],
      "doc":["Returns a non-empty list where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` becomes depleted, then no further elements are added to the resulting list."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"Nel[a]"
      },{
        "name":"l2",
        "tpe":"Nel[b]"
      }],
      "tpe":"Nel[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":502,
        "endLine":504
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"zipWith",
        "loc":{
          "name":"Nel.flix",
          "beginLine":512,
          "endLine":512
        }
      },
      "ann":[],
      "doc":["Returns a non-empty list where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` becomes depleted, then no further elements are added to the resulting list."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"l1",
        "tpe":"Nel[a]"
      },{
        "name":"l2",
        "tpe":"Nel[b]"
      }],
      "tpe":"Nel[c]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":512,
        "endLine":514
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"zipWithA",
        "loc":{
          "name":"Nel.flix",
          "beginLine":541,
          "endLine":541
        }
      },
      "ann":[],
      "doc":["Generalize `zipWith` to an applicative functor `f`."],
      "name":"zipWithA",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> m[c] & ef \\ ef')"
      },{
        "name":"xs",
        "tpe":"Nel[a]"
      },{
        "name":"ys",
        "tpe":"Nel[b]"
      }],
      "tpe":"m[Nel[c]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Nel.flix",
        "beginLine":541,
        "endLine":546
      }
    },{
      "sym":{
        "namespace":["Nel"],
        "name":"zipWithIndex",
        "loc":{
          "name":"Nel.flix",
          "beginLine":529,
          "endLine":529
        }
      },
      "ann":[],
      "doc":["Returns a new non-empty list where each element `e` is mapped to `(e, i)`","where `i` is the index of `e`."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nel[a]"
      }],
      "tpe":"Nel[(a, Int32)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nel.flix",
        "beginLine":529,
        "endLine":536
      }
    }],
    "RedBlackTree":[{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"blackHeight",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":593,
          "endLine":593
        }
      },
      "ann":[],
      "doc":["Returns the black height of `t`."],
      "name":"blackHeight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":593,
        "endLine":599
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"empty",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":138,
          "endLine":138
        }
      },
      "ann":[],
      "doc":["Returns the empty tree."],
      "name":"empty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":138,
        "endLine":138
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"exists",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":355,
          "endLine":355
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one key-value pair in `t` satisfies the predicate `f`.","","Returns `false` if `t` is the empty tree."],
      "name":"exists",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":355,
        "endLine":358
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"filter",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":997,
          "endLine":997
        }
      },
      "ann":[],
      "doc":["Returns a new copy of tree `t` with just the nodes that satisfy the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Bool & ef \\ ef'"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":997,
        "endLine":998
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"filterMap",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":1014,
          "endLine":1014
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `t`.","This traverses tree `t` and produces a new tree with just nodes where applying f","produces `Some(_)`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, a]"
      }],
      "tpe":"RedBlackTree[k, b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":1014,
        "endLine":1015
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"findLeft",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":258,
          "endLine":258
        }
      },
      "ann":[],
      "doc":["Optionally returns the first key-value pair in `t` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":258,
        "endLine":269
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"findRight",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":274,
          "endLine":274
        }
      },
      "ann":[],
      "doc":["Optionally returns the first key-value pair in `t` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":274,
        "endLine":285
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"foldLeft",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":292,
          "endLine":292
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `t` going from left to right.","","That is, the result is of the form: `f(...f(f(s, k1, v1), k2, v2)..., vn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":292,
        "endLine":295
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"foldMap",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":310,
          "endLine":310
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each key-value pair and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> b & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":310,
        "endLine":311
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"foldRight",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":302,
          "endLine":302
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `tree` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`."],
      "name":"foldRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (b -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":302,
        "endLine":305
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":319,
          "endLine":319
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all key-value pairs in `t` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef'))"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":319,
        "endLine":322
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"forAll",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":406,
          "endLine":406
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all key-value pairs in `t` satisfy the predicate `f`.","","Returns `true` if `t` is the empty tree."],
      "name":"forAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":406,
        "endLine":409
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"forEach",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":455,
          "endLine":455
        }
      },
      "ann":[],
      "doc":["Applies `f` to every key-value pair of `t`."],
      "name":"forEach",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":455,
        "endLine":458
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"get",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":234,
          "endLine":234
        }
      },
      "ann":[],
      "doc":["Returns `Some(v)` if `k => v` is in `t`.","","Otherwise returns `None`."],
      "name":"get",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":234,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"insert",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":153,
          "endLine":153
        }
      },
      "ann":[],
      "doc":["Updates `t` with `k => v` if `k => v1` is in `t`.","","Otherwise, updates `t` with `k => v`."],
      "name":"insert",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":153,
        "endLine":163
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"insertWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":170,
          "endLine":170
        }
      },
      "ann":[],
      "doc":["Updates `t` with `k => f(k, v, v1)` if `k => v1` is in `t`.","","Otherwise, updates `t` with `k => v`."],
      "name":"insertWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":170,
        "endLine":180
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"isEmpty",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":143,
          "endLine":143
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `t` is the empty tree."],
      "name":"isEmpty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":143,
        "endLine":146
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"iterator",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":1031,
          "endLine":1031
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `t`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Iterator[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":1031,
        "endLine":1045
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"joinKeys",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":972,
          "endLine":972
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key `k`","in `t` with `sep` inserted between each element."],
      "name":"joinKeys",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":972,
        "endLine":973
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"joinValues",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":979,
          "endLine":979
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each value `v`","in `t` with `sep` inserted between each element."],
      "name":"joinValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":979,
        "endLine":980
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"joinWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":986,
          "endLine":986
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key-value pair","`k => v` in `t` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> String & ef \\ ef')"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":986,
        "endLine":992
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"mapAWithKey",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":885,
          "endLine":885
        }
      },
      "ann":[],
      "doc":["Returns a RedBlackTree with mappings `k => f(v)` for every `k => v` in `t`."],
      "name":"mapAWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> m[v2] & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v1]"
      }],
      "tpe":"m[RedBlackTree[k, v2]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":885,
        "endLine":890
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"mapWithKey",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":607,
          "endLine":607
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a RedBlackTree with mappings `k => f(k, v)` for every `k => v` in `t`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"mapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> v2 & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v1]"
      }],
      "tpe":"RedBlackTree[k, v2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":607,
        "endLine":616
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"maximumKey",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":584,
          "endLine":584
        }
      },
      "ann":[],
      "doc":["Extracts `k => v` where `k` is the rightmost (i.e. largest) key in the tree."],
      "name":"maximumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":584,
        "endLine":588
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"memberOf",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":246,
          "endLine":246
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `t` contains the key `k`."],
      "name":"memberOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":246,
        "endLine":253
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"minimumKey",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":575,
          "endLine":575
        }
      },
      "ann":[],
      "doc":["Extracts `k => v` where `k` is the leftmost (i.e. smallest) key in the tree."],
      "name":"minimumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":575,
        "endLine":579
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parCount",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":682,
          "endLine":682
        }
      },
      "ann":["@Parallel"],
      "doc":["Applies `f` over the tree `t` in parallel and returns the number of elements","that satisfy the predicate `f`.","","The implementation spawns `n` threads each applying `f` sequentially","from left to right on some subtree that is disjoint from the rest of","the threads."],
      "name":"parCount",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":682,
        "endLine":695
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parExists",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":370,
          "endLine":370
        }
      },
      "ann":["@Parallel"],
      "doc":["Returns `true` if and only if at least one key-value pair in `t` satisfies the predicate `f`.","","Returns `false` if `t` is the empty tree.","","The function `f` must be pure.","","Traverses the tree `t` in parallel."],
      "name":"parExists",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":370,
        "endLine":384
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parForAll",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":421,
          "endLine":421
        }
      },
      "ann":["@Parallel"],
      "doc":["Returns `true` if and only if all key-value pairs in `t` satisfy the predicate `f`.","","Returns `true` if `t` is the empty tree.","","The function `f` must be pure.","","Traverses the tree `t` in parallel."],
      "name":"parForAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":421,
        "endLine":435
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parMaximumBy",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":914,
          "endLine":914
        }
      },
      "ann":["@Parallel"],
      "doc":["Applies `cmp` over the tree `t` in parallel and optionally returns the largest","element according to `cmp`.","","The implementation spawns `n` threads each applying `cmp` sequentially","from left to right on some subtree that is disjoint from the rest of","the threads."],
      "name":"parMaximumBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"cmp",
        "tpe":"k -> (v -> (k -> (v -> Comparison)))"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":914,
        "endLine":915
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parMinimumBy",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":902,
          "endLine":902
        }
      },
      "ann":["@Parallel"],
      "doc":["Applies `cmp` over the tree `t` in parallel and optionally returns the lowest","element according to `cmp`.","","The implementation spawns `n` threads each applying `cmp` sequentially","from left to right on some subtree that is disjoint from the rest of","the threads."],
      "name":"parMinimumBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"cmp",
        "tpe":"k -> (v -> (k -> (v -> Comparison)))"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":902,
        "endLine":903
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parProductWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":819,
          "endLine":819
        }
      },
      "ann":["@Parallel"],
      "doc":["Returns the product of all key-value pairs `k => v` in the tree `t`","according to the function `f`.","","The implementation spawns `n` threads each applying `f` sequentially","from left to right on some subtree that is disjoint from the rest of","the threads."],
      "name":"parProductWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"k -> (v -> Int32)"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":819,
        "endLine":833
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"parSumWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":746,
          "endLine":746
        }
      },
      "ann":["@Parallel"],
      "doc":["Returns the sum of all key-value pairs `k => v` in the tree `t`","according to the function `f`.","","The implementation spawns `n` threads each applying `f` sequentially","from left to right on some subtree that is disjoint from the rest of","the threads."],
      "name":"parSumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"k -> (v -> Int32)"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":746,
        "endLine":759
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"productKeys",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":781,
          "endLine":781
        }
      },
      "ann":[],
      "doc":["Returns the product of all keys in the tree `t`."],
      "name":"productKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":781,
        "endLine":782
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"productValues",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":787,
          "endLine":787
        }
      },
      "ann":[],
      "doc":["Returns the product of all values in the tree `t`."],
      "name":"productValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":787,
        "endLine":788
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"productWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":794,
          "endLine":794
        }
      },
      "ann":[],
      "doc":["Returns the product of all key-value pairs `k => v` in the tree `t`","according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":794,
        "endLine":808
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"query",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":565,
          "endLine":565
        }
      },
      "ann":[],
      "doc":["Extracts a range of key-value pairs from `t`.","","That is, the result is a list of all pairs `f(k, v)` where `p(k)` returns `Equal`."],
      "name":"query",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef1 \\ ef1'"
      },{
        "name":"f",
        "tpe":"k -> (v -> a & ef2 \\ ef2')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"List[a]",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":565,
        "endLine":570
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"queryWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":550,
          "endLine":550
        }
      },
      "ann":[],
      "doc":["Applies `f` to all key-value pairs from `t` where `p(k)` returns `EqualTo`.","","The function `f` must be impure."],
      "name":"queryWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef1 \\ ef1'"
      },{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef2 \\ ef2')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":550,
        "endLine":558
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"reduceLeft",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":331,
          "endLine":331
        }
      },
      "ann":[],
      "doc":["Applies `f` to all key-value pairs in `tree` going from left to right until a single pair `(k, v)` is obtained.","","That is, the result is of the form: `Some(f(...f(f(k1, v1, k2, v2), k3, v3)..., kn, vn))`","","Returns `None` if `t` is the empty tree."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":331,
        "endLine":335
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"reduceRight",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":344,
          "endLine":344
        }
      },
      "ann":[],
      "doc":["Applies `f` to all key-value pairs in `t` going from right to left until a single pair `(k, v)` is obtained.","","That is, the result is of the form: `Some(f(k1, v1, ...f(kn-2, vn-2, f(kn-1, vn-1, kn, vn))...))`.","","Returns `None` if `t` is the empty tree."],
      "name":"reduceRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":344,
        "endLine":348
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"remove",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":207,
          "endLine":207
        }
      },
      "ann":[],
      "doc":["Removes `k => v` from `t` if `t` contains the key `k`.","","Otherwise, returns `t`."],
      "name":"remove",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":207,
        "endLine":227
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"size",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":128,
          "endLine":128
        }
      },
      "ann":[],
      "doc":["Returns the number of nodes in `t`."],
      "name":"size",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":128,
        "endLine":133
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"sumKeys",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":714,
          "endLine":714
        }
      },
      "ann":[],
      "doc":["Returns the sum of all keys in the tree `t`."],
      "name":"sumKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":714,
        "endLine":715
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"sumValues",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":720,
          "endLine":720
        }
      },
      "ann":[],
      "doc":["Returns the sum of all values in the tree `t`."],
      "name":"sumValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":720,
        "endLine":721
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"sumWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":727,
          "endLine":727
        }
      },
      "ann":[],
      "doc":["Returns the sum of all key-value pairs `k => v` in the tree `t`","according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":727,
        "endLine":735
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"toList",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":861,
          "endLine":861
        }
      },
      "ann":[],
      "doc":["Returns the tree `t` as a list. Elements are ordered from smallest (left) to largest (right)."],
      "name":"toList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":861,
        "endLine":862
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"toMutDeque",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":867,
          "endLine":867
        }
      },
      "ann":[],
      "doc":["Returns the tree `t` as a MutDeque. Elements are ordered from smallest (left) to largest (right)."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"MutDeque[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":867,
        "endLine":870
      }
    },{
      "sym":{
        "namespace":["RedBlackTree"],
        "name":"updateWith",
        "loc":{
          "name":"RedBlackTree.flix",
          "beginLine":187,
          "endLine":187
        }
      },
      "ann":[],
      "doc":["Updates `t` with `k => v1` if `k => v` is in `t` and `f(k, v) = Some(v1)`.","","Otherwise, returns `t`."],
      "name":"updateWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Option[v] & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"t",
        "tpe":"RedBlackTree[k, v]"
      }],
      "tpe":"RedBlackTree[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"RedBlackTree.flix",
        "beginLine":187,
        "endLine":200
      }
    }],
    "Map":[{
      "sym":{
        "namespace":["Map"],
        "name":"adjust",
        "loc":{
          "name":"Map.flix",
          "beginLine":364,
          "endLine":364
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => f(v)` if `k => v` is in `m`.","","Otherwise, returns `m`."],
      "name":"adjust",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> v & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":364,
        "endLine":365
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"adjustWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":370,
          "endLine":370
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => f(k, v)` if `k => v` is in `m`. Otherwise, returns `m`."],
      "name":"adjustWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":370,
        "endLine":371
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"count",
        "loc":{
          "name":"Map.flix",
          "beginLine":592,
          "endLine":592
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the number of mappings `k => v` in `m` that satisfy the predicate `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":592,
        "endLine":603
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"difference",
        "loc":{
          "name":"Map.flix",
          "beginLine":763,
          "endLine":763
        }
      },
      "ann":[],
      "doc":["Returns the difference of `m1` and `m2`, i.e. `m1 - m2`.","","That is, returns the map `m1` with the keys removed that are in `m2`."],
      "name":"difference",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":763,
        "endLine":764
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"differenceWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":773,
          "endLine":773
        }
      },
      "ann":[],
      "doc":["Returns the difference of `m1` and `m2`, i.e. `m1 - m2`.","","When a key `k` is in both `m1` and `m2`, the associated values are passed to the merge function `f`.","If `f` returns `None` the mapping with `k` is thrown away (proper set difference).","If `f` returns `Some(v)` the mapping `k => v` is included in the result."],
      "name":"differenceWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> Option[v] & ef \\ ef')"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":773,
        "endLine":774
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"differenceWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":783,
          "endLine":783
        }
      },
      "ann":[],
      "doc":["Returns the difference of `m1` and `m2`, i.e. `m1 - m2`.","","When a key `k` is in both `m1` and `m2`, `k` and the associated values are passed to the merge function `f`.","If `f` returns `None` the mapping with `k` is thrown away (proper set difference).","If `f` returns `Some(v)` the mapping `k => v` is included in the result."],
      "name":"differenceWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> Option[v] & ef \\ ef'))"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":783,
        "endLine":794
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"empty",
        "loc":{
          "name":"Map.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Returns the empty map.","","`Map#{}` is syntactic sugar for `empty` (`Map#{} = empty()`)."],
      "name":"empty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":160,
        "endLine":160
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"exists",
        "loc":{
          "name":"Map.flix",
          "beginLine":677,
          "endLine":677
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns `true` if and only if at least one mapping in `m` satisfies the predicate `f`.","","Returns `false` if `m` is the empty map.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"exists",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":677,
        "endLine":688
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"explode",
        "loc":{
          "name":"Map.flix",
          "beginLine":889,
          "endLine":889
        }
      },
      "ann":[],
      "doc":["Returns the set of tuples `(k, v)` where `v` is a value in `t` and `k => t`."],
      "name":"explode",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, t[v]]"
      }],
      "tpe":"Set[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":889,
        "endLine":890
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"filter",
        "loc":{
          "name":"Map.flix",
          "beginLine":426,
          "endLine":426
        }
      },
      "ann":[],
      "doc":["Returns a map of all mappings `k => v` in `m` where `v` satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Bool & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":426,
        "endLine":426
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"filterMap",
        "loc":{
          "name":"Map.flix",
          "beginLine":438,
          "endLine":438
        }
      },
      "ann":[],
      "doc":["Returns a map of all mappings `k => v1` in `m` where applying the function `f` to `v` produces","a `Some(v1)`. Elements that produce `None` are discarded."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, a]"
      }],
      "tpe":"Map[k, b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":438,
        "endLine":443
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"filterMapWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":449,
          "endLine":449
        }
      },
      "ann":[],
      "doc":["Returns a map of all mappings `k => v1` in `m` where applying the function `f` to `(k, v)` produces","`Some(v1)`. Elements that produce `None` are discarded."],
      "name":"filterMapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (a -> Option[b] & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, a]"
      }],
      "tpe":"Map[k, b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":449,
        "endLine":454
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"filterWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":431,
          "endLine":431
        }
      },
      "ann":[],
      "doc":["Returns a map of all mappings `k => v` in `m` where `(k, v)` satisfies the predicate `f`."],
      "name":"filterWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":431,
        "endLine":432
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"find",
        "loc":{
          "name":"Map.flix",
          "beginLine":407,
          "endLine":407
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":407,
        "endLine":407
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"findLeft",
        "loc":{
          "name":"Map.flix",
          "beginLine":412,
          "endLine":412
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of `m` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":412,
        "endLine":414
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"findRight",
        "loc":{
          "name":"Map.flix",
          "beginLine":419,
          "endLine":419
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of `m` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":419,
        "endLine":421
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldLeft",
        "loc":{
          "name":"Map.flix",
          "beginLine":484,
          "endLine":484
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, v1), v2)..., vn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (v -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":484,
        "endLine":485
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldLeftWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":492,
          "endLine":492
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, k1, v1), k2, v2)..., vn)`."],
      "name":"foldLeftWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":492,
        "endLine":494
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldMap",
        "loc":{
          "name":"Map.flix",
          "beginLine":541,
          "endLine":541
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each value and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> b & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":541,
        "endLine":542
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldMapWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":535,
          "endLine":535
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each key-value pair and combining the results."],
      "name":"foldMapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> b & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":535,
        "endLine":536
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldRight",
        "loc":{
          "name":"Map.flix",
          "beginLine":501,
          "endLine":501
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, s)))`."],
      "name":"foldRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":501,
        "endLine":502
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Map.flix",
          "beginLine":519,
          "endLine":519
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, z)))`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":519,
        "endLine":520
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldRightWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":509,
          "endLine":509
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`."],
      "name":"foldRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (b -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":509,
        "endLine":511
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldRightWithKeyCont",
        "loc":{
          "name":"Map.flix",
          "beginLine":528,
          "endLine":528
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, z)))`.","A `foldRightWithKeyCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithKeyCont",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef'))"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":528,
        "endLine":530
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"foldWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":477,
          "endLine":477
        }
      },
      "ann":[],
      "doc":["Alias for `foldLeftWithKey`."],
      "name":"foldWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":477,
        "endLine":477
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"forAll",
        "loc":{
          "name":"Map.flix",
          "beginLine":698,
          "endLine":698
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns `true` if and only if all mappings in `m` satisfy the predicate `f`.","","Returns `true` if `m` is the empty map.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"forAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":698,
        "endLine":709
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"forEach",
        "loc":{
          "name":"Map.flix",
          "beginLine":853,
          "endLine":853
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `xs`."],
      "name":"forEach",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":853,
        "endLine":855
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"get",
        "loc":{
          "name":"Map.flix",
          "beginLine":181,
          "endLine":181
        }
      },
      "ann":[],
      "doc":["Returns `Some(v)` if `k => v` is in `m`.","","Otherwise returns `None`."],
      "name":"get",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":181,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"getWithDefault",
        "loc":{
          "name":"Map.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns `v` if `k => v` is in `m`.","","Otherwise, returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"d",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"v",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":190,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"insert",
        "loc":{
          "name":"Map.flix",
          "beginLine":338,
          "endLine":338
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v`."],
      "name":"insert",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":338,
        "endLine":340
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"insertWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":347,
          "endLine":347
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => f(v, v1)` if `k => v1` is in `m`.","","Otherwise, updates `m` with `k => v`."],
      "name":"insertWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":347,
        "endLine":348
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"insertWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":355,
          "endLine":355
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => f(k, v, v1)` if `k => v1` is in `m`.","","Otherwise, updates `m` with `k => v`."],
      "name":"insertWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":355,
        "endLine":357
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"intersection",
        "loc":{
          "name":"Map.flix",
          "beginLine":742,
          "endLine":742
        }
      },
      "ann":[],
      "doc":["Returns the left-biased intersection of `m1` and `m2`.","","That is, key collisions are resolved by taking the mapping from `m1`."],
      "name":"intersection",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":742,
        "endLine":743
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"intersectionWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":748,
          "endLine":748
        }
      },
      "ann":[],
      "doc":["Returns the intersection of `m1` and `m2` where key collisions are resolved with the merge function `f`."],
      "name":"intersectionWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":748,
        "endLine":749
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"intersectionWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":754,
          "endLine":754
        }
      },
      "ann":[],
      "doc":["Returns the intersection of `m1` and `m2` where key collisions are resolved with the merge function `f`, taking both the key and values."],
      "name":"intersectionWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":754,
        "endLine":756
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"invert",
        "loc":{
          "name":"Map.flix",
          "beginLine":802,
          "endLine":802
        }
      },
      "ann":[],
      "doc":["Returns the inverse map of `m`.","","That is, given a `Map[k, v]` returns a map `Map[v, Set[k]]`","where every value is mapped to its key(s) in the original map."],
      "name":"invert",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[v, Set[k]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":802,
        "endLine":804
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"isEmpty",
        "loc":{
          "name":"Map.flix",
          "beginLine":172,
          "endLine":172
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `m` is the empty map, i.e. `Map(Nil)`."],
      "name":"isEmpty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":172,
        "endLine":174
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"isProperSubmapOf",
        "loc":{
          "name":"Map.flix",
          "beginLine":401,
          "endLine":401
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in `m1` occur in `m2` and `m1 != m2`."],
      "name":"isProperSubmapOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":401,
        "endLine":402
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"isSubmapOf",
        "loc":{
          "name":"Map.flix",
          "beginLine":396,
          "endLine":396
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in `m1` occur in `m2`."],
      "name":"isSubmapOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":396,
        "endLine":396
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"iterator",
        "loc":{
          "name":"Map.flix",
          "beginLine":911,
          "endLine":911
        }
      },
      "ann":[],
      "doc":["Returns an iterator over all key-value pairs in `m`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Iterator[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":911,
        "endLine":913
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"iteratorKeys",
        "loc":{
          "name":"Map.flix",
          "beginLine":918,
          "endLine":918
        }
      },
      "ann":[],
      "doc":["Returns an iterator over keys in `m`."],
      "name":"iteratorKeys",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Iterator[k, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":918,
        "endLine":919
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"iteratorValues",
        "loc":{
          "name":"Map.flix",
          "beginLine":924,
          "endLine":924
        }
      },
      "ann":[],
      "doc":["Returns an iterator over values in `m`."],
      "name":"iteratorValues",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Iterator[v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":924,
        "endLine":925
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"joinKeys",
        "loc":{
          "name":"Map.flix",
          "beginLine":962,
          "endLine":962
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key `k`","in `m` with `sep` inserted between each element."],
      "name":"joinKeys",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":962,
        "endLine":964
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"joinValues",
        "loc":{
          "name":"Map.flix",
          "beginLine":970,
          "endLine":970
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each value `v`","in `m` with `sep` inserted between each element."],
      "name":"joinValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":970,
        "endLine":972
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"joinWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":978,
          "endLine":978
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key-value pair","`k => v` in `m` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> String & ef \\ ef')"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":978,
        "endLine":980
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"keysOf",
        "loc":{
          "name":"Map.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":[],
      "doc":["Returns the keys of `m`."],
      "name":"keysOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Set[k]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":326,
        "endLine":327
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"map",
        "loc":{
          "name":"Map.flix",
          "beginLine":462,
          "endLine":462
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a map with mappings `k => f(v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"map",
      "tparams":[{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v1 -> v2 & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, v1]"
      }],
      "tpe":"Map[k, v2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":462,
        "endLine":462
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"mapWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":470,
          "endLine":470
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a map with mappings `k => f(k, v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"mapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> v2 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v1]"
      }],
      "tpe":"Map[k, v2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":470,
        "endLine":472
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"maximumKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":266,
          "endLine":266
        }
      },
      "ann":[],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"maximumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":266,
        "endLine":268
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"maximumKeyBy",
        "loc":{
          "name":"Map.flix",
          "beginLine":278,
          "endLine":278
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"maximumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":278,
        "endLine":290
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"maximumValue",
        "loc":{
          "name":"Map.flix",
          "beginLine":298,
          "endLine":298
        }
      },
      "ann":["@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the largest value.","","Returns `None` if `m` is empty."],
      "name":"maximumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":298,
        "endLine":299
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"maximumValueBy",
        "loc":{
          "name":"Map.flix",
          "beginLine":309,
          "endLine":309
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `v` is the largest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"maximumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":309,
        "endLine":321
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"memberOf",
        "loc":{
          "name":"Map.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `m` contains the key `k`."],
      "name":"memberOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":195,
        "endLine":197
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"minimumKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":204,
          "endLine":204
        }
      },
      "ann":[],
      "doc":["Optionally finds `k => v` where `k` is the smallest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"minimumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":204,
        "endLine":206
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"minimumKeyBy",
        "loc":{
          "name":"Map.flix",
          "beginLine":216,
          "endLine":216
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the smallest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":216,
        "endLine":228
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"minimumValue",
        "loc":{
          "name":"Map.flix",
          "beginLine":236,
          "endLine":236
        }
      },
      "ann":["@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the smallest value.","","Returns `None` if `m` is empty."],
      "name":"minimumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":236,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"minimumValueBy",
        "loc":{
          "name":"Map.flix",
          "beginLine":247,
          "endLine":247
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `v` is the smallest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":247,
        "endLine":259
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"productKeys",
        "loc":{
          "name":"Map.flix",
          "beginLine":639,
          "endLine":639
        }
      },
      "ann":[],
      "doc":["Returns the product of all keys in the map `m`."],
      "name":"productKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":639,
        "endLine":641
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"productValues",
        "loc":{
          "name":"Map.flix",
          "beginLine":646,
          "endLine":646
        }
      },
      "ann":[],
      "doc":["Returns the product of all values in the map `m`."],
      "name":"productValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":646,
        "endLine":648
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"productWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":656,
          "endLine":656
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the product of all key-value pairs `k => v` in the map `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":656,
        "endLine":667
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"query",
        "loc":{
          "name":"Map.flix",
          "beginLine":897,
          "endLine":897
        }
      },
      "ann":[],
      "doc":["Extracts a range of key-value pairs from the map `m`.","","That is, the result is a list of all pairs `(k, v)` where `p(k)` returns `Equal`."],
      "name":"query",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":897,
        "endLine":899
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"queryWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":904,
          "endLine":904
        }
      },
      "ann":[],
      "doc":["Applies `f` to all key-value pairs `(k, v)` from the map `m` where `p(k)` returns `EqualTo`."],
      "name":"queryWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef1 \\ ef1'"
      },{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef2 \\ ef2')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":904,
        "endLine":906
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"reduceLeft",
        "loc":{
          "name":"Map.flix",
          "beginLine":551,
          "endLine":551
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in `m` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(v1, v2), v3)..., vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":551,
        "endLine":552
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"reduceLeftWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":561,
          "endLine":561
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in `m` going from left to right until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(...f(f(k1, v1, k2, v2), k3, v3)..., kn, vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeftWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":561,
        "endLine":563
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"reduceRight",
        "loc":{
          "name":"Map.flix",
          "beginLine":572,
          "endLine":572
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in `m` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(v1, ...f(vn-2, f(vn-1, vn))...))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":572,
        "endLine":573
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"reduceRightWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":582,
          "endLine":582
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in `m` going from right to left until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(k1, v1, ...f(kn-2, vn-2, f(kn-1, vn-1, kn, vn))...))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":582,
        "endLine":584
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"remove",
        "loc":{
          "name":"Map.flix",
          "beginLine":389,
          "endLine":389
        }
      },
      "ann":[],
      "doc":["Removes the mapping `k` from the map `m`."],
      "name":"remove",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":389,
        "endLine":391
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"sequence",
        "loc":{
          "name":"Map.flix",
          "beginLine":938,
          "endLine":938
        }
      },
      "ann":[],
      "doc":["Returns the result of running all the actions in the map `m`."],
      "name":"sequence",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, m[v]]"
      }],
      "tpe":"m[Map[k, v]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":938,
        "endLine":940
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"singleton",
        "loc":{
          "name":"Map.flix",
          "beginLine":167,
          "endLine":167
        }
      },
      "ann":[],
      "doc":["Returns the singleton map where key `k` is mapped to value `v`.","","`Map#{k => v}` is syntactic sugar for `singleton` (`Map#{k => v} = singleton(k, v)`)."],
      "name":"singleton",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":167,
        "endLine":167
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"size",
        "loc":{
          "name":"Map.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Returns the size of `m`."],
      "name":"size",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":151,
        "endLine":153
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"sumKeys",
        "loc":{
          "name":"Map.flix",
          "beginLine":608,
          "endLine":608
        }
      },
      "ann":[],
      "doc":["Returns the sum of all keys in the map `m`."],
      "name":"sumKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":608,
        "endLine":609
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"sumValues",
        "loc":{
          "name":"Map.flix",
          "beginLine":614,
          "endLine":614
        }
      },
      "ann":[],
      "doc":["Returns the sum of all values in the map `m`."],
      "name":"sumValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":614,
        "endLine":615
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"sumWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":623,
          "endLine":623
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the sum of all key-value pairs `k => v` in the map `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":623,
        "endLine":634
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toChain",
        "loc":{
          "name":"Map.flix",
          "beginLine":833,
          "endLine":833
        }
      },
      "ann":[],
      "doc":["Returns the map `m` as a chain of key-value pairs."],
      "name":"toChain",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[a, b]"
      }],
      "tpe":"Chain[(a, b)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":833,
        "endLine":834
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toDelayList",
        "loc":{
          "name":"Map.flix",
          "beginLine":827,
          "endLine":827
        }
      },
      "ann":[],
      "doc":["Returns the map `m` as a `DelayList` of key-value pairs."],
      "name":"toDelayList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"DelayList[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":827,
        "endLine":828
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toDelayMap",
        "loc":{
          "name":"Map.flix",
          "beginLine":930,
          "endLine":930
        }
      },
      "ann":[],
      "doc":["Returns `m` as a `DelayMap`."],
      "name":"toDelayMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":930,
        "endLine":933
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toList",
        "loc":{
          "name":"Map.flix",
          "beginLine":815,
          "endLine":815
        }
      },
      "ann":[],
      "doc":["Returns the map `m` as a list of key-value pairs."],
      "name":"toList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":815,
        "endLine":816
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toMultiMap",
        "loc":{
          "name":"Map.flix",
          "beginLine":839,
          "endLine":839
        }
      },
      "ann":[],
      "doc":["Returns a MultiMap where key `k` is mapped to the singleton set containing `v`."],
      "name":"toMultiMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":839,
        "endLine":840
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toMutDeque",
        "loc":{
          "name":"Map.flix",
          "beginLine":845,
          "endLine":845
        }
      },
      "ann":[],
      "doc":["Returns `m` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"MutDeque[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":845,
        "endLine":848
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toMutMap",
        "loc":{
          "name":"Map.flix",
          "beginLine":809,
          "endLine":809
        }
      },
      "ann":[],
      "doc":["Returns `m` as a mutable set."],
      "name":"toMutMap",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"MutMap[k, v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":809,
        "endLine":810
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toSet",
        "loc":{
          "name":"Map.flix",
          "beginLine":821,
          "endLine":821
        }
      },
      "ann":[],
      "doc":["Returns the map `m` as a set of key-value pairs."],
      "name":"toSet",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Set[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":821,
        "endLine":822
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"toString",
        "loc":{
          "name":"Map.flix",
          "beginLine":114,
          "endLine":114
        }
      },
      "ann":[],
      "doc":["Returns a string representation of the given map `m`."],
      "name":"toString",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":114,
        "endLine":128
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"traverse",
        "loc":{
          "name":"Map.flix",
          "beginLine":946,
          "endLine":946
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the values of the","map `m`."],
      "name":"traverse",
      "tparams":[{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v1 -> m[v2] & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"Map[k, v1]"
      }],
      "tpe":"m[Map[k, v2]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":946,
        "endLine":948
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"traverseWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":954,
          "endLine":954
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the key-value pairs","of the map `m`."],
      "name":"traverseWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> m[v2] & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"Map[k, v1]"
      }],
      "tpe":"m[Map[k, v2]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":954,
        "endLine":956
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"unfold",
        "loc":{
          "name":"Map.flix",
          "beginLine":864,
          "endLine":864
        }
      },
      "ann":[],
      "doc":["Build a map by applying `f` to the seed value `st`.","","`f` should return `Some(k,v,st1)` to signal a new key-value pair `k` and `v` and a new seed value `st1`.","","`f` should return `None` to signal the end of building the map."],
      "name":"unfold",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> Option[(k, v, s)] & ef \\ ef'"
      },{
        "name":"st",
        "tpe":"s"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":864,
        "endLine":869
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"unfoldWithIter",
        "loc":{
          "name":"Map.flix",
          "beginLine":879,
          "endLine":879
        }
      },
      "ann":[],
      "doc":["Build a map by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Some(k,v)` to signal a new key-value pair `k` and `v`.","","`next` should return `None` to signal the end of building the map."],
      "name":"unfoldWithIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"next",
        "tpe":"Unit -> Option[(k, v)] & ef \\ ef'"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":879,
        "endLine":884
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"union",
        "loc":{
          "name":"Map.flix",
          "beginLine":716,
          "endLine":716
        }
      },
      "ann":[],
      "doc":["Returns the left-biased union of `m1` and `m2`.","","That is, key collisions are resolved by taking the mapping from `m1`."],
      "name":"union",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":716,
        "endLine":717
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"unionWith",
        "loc":{
          "name":"Map.flix",
          "beginLine":722,
          "endLine":722
        }
      },
      "ann":[],
      "doc":["Returns the union of `m1` and `m2` where key collisions are resolved with the merge function `f`."],
      "name":"unionWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":722,
        "endLine":723
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"unionWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":728,
          "endLine":728
        }
      },
      "ann":[],
      "doc":["Returns the union of `m1` and `m2` where key collisions are resolved with the merge function `f`, taking both the key and values."],
      "name":"unionWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"m1",
        "tpe":"Map[k, v]"
      },{
        "name":"m2",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":728,
        "endLine":735
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"update",
        "loc":{
          "name":"Map.flix",
          "beginLine":376,
          "endLine":376
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(v) = Some(v1)`. Otherwise, returns `m`."],
      "name":"update",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Option[v] & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":376,
        "endLine":377
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"updateWithKey",
        "loc":{
          "name":"Map.flix",
          "beginLine":382,
          "endLine":382
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(k, v) = Some(v1)`. Otherwise, returns `m`."],
      "name":"updateWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Option[v] & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Map.flix",
        "beginLine":382,
        "endLine":384
      }
    },{
      "sym":{
        "namespace":["Map"],
        "name":"valuesOf",
        "loc":{
          "name":"Map.flix",
          "beginLine":332,
          "endLine":332
        }
      },
      "ann":[],
      "doc":["Returns the values of `m`."],
      "name":"valuesOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"Map[k, v]"
      }],
      "tpe":"List[v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Map.flix",
        "beginLine":332,
        "endLine":333
      }
    }],
    "Console":[{
      "sym":{
        "namespace":["Console"],
        "name":"bgBlack",
        "loc":{
          "name":"Console.flix",
          "beginLine":260,
          "endLine":260
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default black color."],
      "name":"bgBlack",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":260,
        "endLine":261
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgBlackBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":308,
          "endLine":308
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default black color."],
      "name":"bgBlackBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":308,
        "endLine":309
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgBlue",
        "loc":{
          "name":"Console.flix",
          "beginLine":284,
          "endLine":284
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default blue color."],
      "name":"bgBlue",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":284,
        "endLine":285
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgBlueBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":332,
          "endLine":332
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default blue color."],
      "name":"bgBlueBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":332,
        "endLine":333
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgCyan",
        "loc":{
          "name":"Console.flix",
          "beginLine":296,
          "endLine":296
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default cyan color."],
      "name":"bgCyan",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":296,
        "endLine":297
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgCyanBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":344,
          "endLine":344
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default cyan color."],
      "name":"bgCyanBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":344,
        "endLine":345
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgGreen",
        "loc":{
          "name":"Console.flix",
          "beginLine":272,
          "endLine":272
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default green color."],
      "name":"bgGreen",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":272,
        "endLine":273
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgGreenBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":320,
          "endLine":320
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default green color."],
      "name":"bgGreenBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":320,
        "endLine":321
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgMagenta",
        "loc":{
          "name":"Console.flix",
          "beginLine":290,
          "endLine":290
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default magenta color."],
      "name":"bgMagenta",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":290,
        "endLine":291
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgMagentaBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":338,
          "endLine":338
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default magenta color."],
      "name":"bgMagentaBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":338,
        "endLine":339
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgRed",
        "loc":{
          "name":"Console.flix",
          "beginLine":266,
          "endLine":266
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default red color."],
      "name":"bgRed",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":266,
        "endLine":267
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgRedBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":314,
          "endLine":314
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default red color."],
      "name":"bgRedBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":314,
        "endLine":315
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgWhite",
        "loc":{
          "name":"Console.flix",
          "beginLine":302,
          "endLine":302
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default white color."],
      "name":"bgWhite",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":302,
        "endLine":303
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgWhiteBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":350,
          "endLine":350
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default white color."],
      "name":"bgWhiteBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":350,
        "endLine":351
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgYellow",
        "loc":{
          "name":"Console.flix",
          "beginLine":278,
          "endLine":278
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default yellow color."],
      "name":"bgYellow",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":278,
        "endLine":279
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bgYellowBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":[],
      "doc":["Returns the string `s` with background color of the default yellow color."],
      "name":"bgYellowBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":326,
        "endLine":327
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"black",
        "loc":{
          "name":"Console.flix",
          "beginLine":206,
          "endLine":206
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default black color."],
      "name":"black",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":206,
        "endLine":207
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"blackBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":212,
          "endLine":212
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright black color."],
      "name":"blackBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":212,
        "endLine":213
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"blue",
        "loc":{
          "name":"Console.flix",
          "beginLine":164,
          "endLine":164
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default blue color."],
      "name":"blue",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":164,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"blueBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":236,
          "endLine":236
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright blue color."],
      "name":"blueBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":236,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"bold",
        "loc":{
          "name":"Console.flix",
          "beginLine":98,
          "endLine":98
        }
      },
      "ann":[],
      "doc":["Returns `s` formatted as bold."],
      "name":"bold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":98,
        "endLine":106
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"cyan",
        "loc":{
          "name":"Console.flix",
          "beginLine":170,
          "endLine":170
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default cyan color."],
      "name":"cyan",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":170,
        "endLine":171
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"cyanBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright cyan color."],
      "name":"cyanBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":248,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"flush",
        "loc":{
          "name":"Console.flix",
          "beginLine":91,
          "endLine":91
        }
      },
      "ann":[],
      "doc":["Flushes the console output.","","Note: This function does not flush standard out.","","Warning: If no console is attached nothing happens.","","See also `System/StdOut.flush`."],
      "name":"flush",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Console.flix",
        "beginLine":91,
        "endLine":93
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"green",
        "loc":{
          "name":"Console.flix",
          "beginLine":176,
          "endLine":176
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default green color."],
      "name":"green",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":176,
        "endLine":177
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"greenBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright green color."],
      "name":"greenBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":224,
        "endLine":225
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"hasConsole",
        "loc":{
          "name":"Console.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "ann":[],
      "doc":["Returns true if there is a `Console` object associated with the current JVM."],
      "name":"hasConsole",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Bool",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Console.flix",
        "beginLine":22,
        "endLine":24
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"hex",
        "loc":{
          "name":"Console.flix",
          "beginLine":114,
          "endLine":114
        }
      },
      "ann":[],
      "doc":["Returns `s` formatted with color `hexCode`","or if there's an error, returns the original string.","Expected format of `hexCode`: \"#\" + \"--\" + \"--\" + \"--\"","where each -- is a hex number between 00 and FF."],
      "name":"hex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"hexCode",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":114,
        "endLine":126
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"magenta",
        "loc":{
          "name":"Console.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default magenta color."],
      "name":"magenta",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":182,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"magentaBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":242,
          "endLine":242
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright magenta color."],
      "name":"magentaBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":242,
        "endLine":243
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"print",
        "loc":{
          "name":"Console.flix",
          "beginLine":61,
          "endLine":61
        }
      },
      "ann":[],
      "doc":["Converts `x` to a string and prints it to the console.","","Note: This function does not print to standard out.","","Warning: If no console is attached nothing is printed.","","Use `print` instead.","","See also `System/StdOut.print`."],
      "name":"print",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":61,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"printLine",
        "loc":{
          "name":"Console.flix",
          "beginLine":77,
          "endLine":77
        }
      },
      "ann":[],
      "doc":["Converts `x` to a string and prints it to the console followed by a new line.","","Note: This function does not print to standard out.","","Warning: If no console is attached nothing is printed.","","Use `print` instead.","","See also `System/StdOut.println`."],
      "name":"printLine",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":77,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"readLine",
        "loc":{
          "name":"Console.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "ann":[],
      "doc":["Reads a single line from the console.","","Returns `Err` if no console is present, there is an IO error, or EOF is found.","","See also `System/StdIn.readLines`."],
      "name":"readLine",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[String, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Console.flix",
        "beginLine":33,
        "endLine":48
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"red",
        "loc":{
          "name":"Console.flix",
          "beginLine":188,
          "endLine":188
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default red color."],
      "name":"red",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":188,
        "endLine":189
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"redBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":218,
          "endLine":218
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright red color."],
      "name":"redBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":218,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"rgb",
        "loc":{
          "name":"Console.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the given RGB color `c`."],
      "name":"rgb",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"(Int32, Int32, Int32)"
      },{
        "name":"s",
        "tpe":"String"
      },{
        "name":"opts",
        "tpe":"{ isFg = Bool }"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Console.flix",
        "beginLine":151,
        "endLine":159
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"white",
        "loc":{
          "name":"Console.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default white color."],
      "name":"white",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":200,
        "endLine":201
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"whiteBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":254,
          "endLine":254
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright white color."],
      "name":"whiteBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":254,
        "endLine":255
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"yellow",
        "loc":{
          "name":"Console.flix",
          "beginLine":194,
          "endLine":194
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default yellow color."],
      "name":"yellow",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":194,
        "endLine":195
      }
    },{
      "sym":{
        "namespace":["Console"],
        "name":"yellowBright",
        "loc":{
          "name":"Console.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["Returns the string `s` formatted with the default bright yellow color."],
      "name":"yellowBright",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Console.flix",
        "beginLine":230,
        "endLine":231
      }
    }],
    "Reflect":[{
      "sym":{
        "namespace":["Reflect"],
        "name":"default",
        "loc":{
          "name":"Reflect.flix",
          "beginLine":9,
          "endLine":9
        }
      },
      "ann":["@Unsafe"],
      "doc":["Returns a default value for the inferred type.","The value returned should not be depended on;","it acts as a placeholder to be replaced by a proper value."],
      "name":"default",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Reflect.flix",
        "beginLine":9,
        "endLine":22
      }
    }],
    "File":[{
      "sym":{
        "namespace":["File"],
        "name":"accessTime",
        "loc":{
          "name":"File.flix",
          "beginLine":31,
          "endLine":31
        }
      },
      "ann":[],
      "doc":["Returns the last access time of the given file `f` in milliseconds."],
      "name":"accessTime",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Int64, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":31,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"append",
        "loc":{
          "name":"File.flix",
          "beginLine":676,
          "endLine":676
        }
      },
      "ann":[],
      "doc":["Appends `data` to the given file `f`.","","Returns `true` if the file `f` was created, and `false` if `data` was appended to an existing `f`."],
      "name":"append",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"t"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":676,
        "endLine":705
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"appendBytes",
        "loc":{
          "name":"File.flix",
          "beginLine":786,
          "endLine":786
        }
      },
      "ann":[],
      "doc":["Appends `data` to the given `f`.","","Returns `true` if the file `f` was created, and `false` if `data` was appended to an existing `f`."],
      "name":"appendBytes",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"f[Int8]"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":786,
        "endLine":817
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"appendLines",
        "loc":{
          "name":"File.flix",
          "beginLine":712,
          "endLine":712
        }
      },
      "ann":[],
      "doc":["Appends `data` to the given file `f`.","","Returns `true` if the file `f` was created, and `false` if `data` was appended to an existing `f`."],
      "name":"appendLines",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"f[String]"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":712,
        "endLine":741
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"copy",
        "loc":{
          "name":"File.flix",
          "beginLine":1084,
          "endLine":1084
        }
      },
      "ann":[],
      "doc":["Copies a file or directory from path `src` to path `dst`.","","Returns `Ok(())` if `src` was copied, and `dst` did not already exist.","Returns `Err(msg)` if `src` was not copied because:","- `dst` already exists, or","- `dst` is a subpath of `src`, or","- an I/O error occurred."],
      "name":"copy",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1084,
        "endLine":1100
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"copyInto",
        "loc":{
          "name":"File.flix",
          "beginLine":1112,
          "endLine":1112
        }
      },
      "ann":[],
      "doc":["Copies a file or directory from path `src` to directory `dst`.","","Returns `Ok(())` if `src` was copied, and `dst` is a directory.","Returns `Err(msg)` if:","- `src` was not copied, or","- `dst` is a subpath of `src`, or","- `dst` is not a directory, or","- an I/O error occurred."],
      "name":"copyInto",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1112,
        "endLine":1135
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"copyOver",
        "loc":{
          "name":"File.flix",
          "beginLine":1143,
          "endLine":1143
        }
      },
      "ann":[],
      "doc":["Copies a file or directory from path `src` to path `dst`. Overwrites if `dst` already exists.","","Returns `Ok(())` if `src` was copied.","Returns `Err(msg)` if `src` was not copied, or an I/O error occurred."],
      "name":"copyOver",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1143,
        "endLine":1162
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"creationTime",
        "loc":{
          "name":"File.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":[],
      "doc":["Returns the creation time of the given file `f` in milliseconds."],
      "name":"creationTime",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Int64, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":51,
        "endLine":66
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"delete",
        "loc":{
          "name":"File.flix",
          "beginLine":1169,
          "endLine":1169
        }
      },
      "ann":[],
      "doc":["Deletes the given file or directory `f`.","","If `f` is a directory it must be empty."],
      "name":"delete",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1169,
        "endLine":1183
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"deleteIfExists",
        "loc":{
          "name":"File.flix",
          "beginLine":1191,
          "endLine":1191
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file or directory `f` was deleted","and `false` if `f` was not deleted because it did not exist.","","If `f` is a directory it must be empty."],
      "name":"deleteIfExists",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1191,
        "endLine":1205
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"exists",
        "loc":{
          "name":"File.flix",
          "beginLine":176,
          "endLine":176
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` exists."],
      "name":"exists",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":176,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"fileType",
        "loc":{
          "name":"File.flix",
          "beginLine":130,
          "endLine":130
        }
      },
      "ann":[],
      "doc":["Returns the type of the given file `f`."],
      "name":"fileType",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[FileType, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":130,
        "endLine":140
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isDirectory",
        "loc":{
          "name":"File.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns `true` is the given file `f` is a directory."],
      "name":"isDirectory",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":190,
        "endLine":199
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isExecutable",
        "loc":{
          "name":"File.flix",
          "beginLine":268,
          "endLine":268
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` is executable."],
      "name":"isExecutable",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":268,
        "endLine":277
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isReadable",
        "loc":{
          "name":"File.flix",
          "beginLine":222,
          "endLine":222
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` is readable."],
      "name":"isReadable",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":222,
        "endLine":231
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isRegularFile",
        "loc":{
          "name":"File.flix",
          "beginLine":204,
          "endLine":204
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` is a regular file."],
      "name":"isRegularFile",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":204,
        "endLine":217
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isSymbolicLink",
        "loc":{
          "name":"File.flix",
          "beginLine":236,
          "endLine":236
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` is a symbolic link."],
      "name":"isSymbolicLink",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":236,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"isWritable",
        "loc":{
          "name":"File.flix",
          "beginLine":254,
          "endLine":254
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given file `f` is writable."],
      "name":"isWritable",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":254,
        "endLine":263
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"list",
        "loc":{
          "name":"File.flix",
          "beginLine":894,
          "endLine":894
        }
      },
      "ann":[],
      "doc":["Returns a list naming the files and directories in the directory `f`.","The full paths of the files and directories are specified.","","Does not recursively traverse the directory."],
      "name":"list",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[List[String], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":894,
        "endLine":913
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"listWithIter",
        "loc":{
          "name":"File.flix",
          "beginLine":921,
          "endLine":921
        }
      },
      "ann":[],
      "doc":["Returns an Iterator naming the files and directories in the directory `f`.","The full paths of the files and directories are specified.","","Does not recursively traverse the directory."],
      "name":"listWithIter",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Iterator[String, Static], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":921,
        "endLine":940
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"mkdir",
        "loc":{
          "name":"File.flix",
          "beginLine":855,
          "endLine":855
        }
      },
      "ann":[],
      "doc":["Creates the directory `d`.","","Returns `Ok(true)` if the directory `d` was created and did not already exist.","Returns `Ok(false)` if the directory `d` already existed and is a directory.","Returns `Err(msg)` if the directory could not be created."],
      "name":"mkdir",
      "tparams":[],
      "fparams":[{
        "name":"d",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":855,
        "endLine":866
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"mkdirs",
        "loc":{
          "name":"File.flix",
          "beginLine":875,
          "endLine":875
        }
      },
      "ann":[],
      "doc":["Creates the directory `d` along with all necessary parent directories.","","Returns `Ok(true)` if the directory `d` was created and did not already exist.","Returns `Ok(false)` if the directory `d` already existed and is a directory.","Returns `Err(msg)` if the directory could not be created."],
      "name":"mkdirs",
      "tparams":[],
      "fparams":[{
        "name":"d",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":875,
        "endLine":886
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"modificationTime",
        "loc":{
          "name":"File.flix",
          "beginLine":71,
          "endLine":71
        }
      },
      "ann":[],
      "doc":["Returns the last-modified timestamp of the given file `f` in milliseconds"],
      "name":"modificationTime",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Int64, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":71,
        "endLine":86
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"move",
        "loc":{
          "name":"File.flix",
          "beginLine":995,
          "endLine":995
        }
      },
      "ann":[],
      "doc":["Moves a file or directory from path `src` to path `dst`.","","Returns `Ok(())` if `src` was moved, and `dst` did not already exist.","Returns `Err(msg)` if `src` was not moved because:","- `dst` already exists, or","- `dst` is a subpath of `src`, or","- an I/O error occurred."],
      "name":"move",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":995,
        "endLine":1011
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"moveInto",
        "loc":{
          "name":"File.flix",
          "beginLine":1023,
          "endLine":1023
        }
      },
      "ann":[],
      "doc":["Moves a file or directory from path `src` to directory `dst`.","","Returns `Ok(())` if `src` was moved, and `dst` is a directory.","Returns `Err(msg)` if:","- `src` was not moved, or","- `dst` is a subpath of `src`, or","- `dst` is not a directory, or","- an I/O error occurred."],
      "name":"moveInto",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1023,
        "endLine":1046
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"moveOver",
        "loc":{
          "name":"File.flix",
          "beginLine":1054,
          "endLine":1054
        }
      },
      "ann":[],
      "doc":["Moves a file or directory from path `src` to path `dst`. Overwrites if `dst` already exists.","","Returns `Ok(())` if `src` was moved.","Returns `Err(msg)` if `src` was not moved, or an I/O error occurred."],
      "name":"moveOver",
      "tparams":[],
      "fparams":[{
        "name":"src",
        "tpe":"{ src = String }"
      },{
        "name":"dst",
        "tpe":"String"
      }],
      "tpe":"Result[Unit, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":1054,
        "endLine":1073
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"read",
        "loc":{
          "name":"File.flix",
          "beginLine":282,
          "endLine":282
        }
      },
      "ann":[],
      "doc":["Returns a string containing the given file `f`."],
      "name":"read",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[String, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":282,
        "endLine":295
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readBytes",
        "loc":{
          "name":"File.flix",
          "beginLine":489,
          "endLine":489
        }
      },
      "ann":[],
      "doc":["Returns an array of all the bytes in the given file `f`."],
      "name":"readBytes",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Array[Int8, Static], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":489,
        "endLine":504
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readBytesWith",
        "loc":{
          "name":"File.flix",
          "beginLine":512,
          "endLine":512
        }
      },
      "ann":[],
      "doc":["Returns an array of all the bytes in the given file `f` and applying the options `opts`.","The options `opts` to apply consists of","`offset` - the start offset in the given file `f`.","`count` - the number of bytes read."],
      "name":"readBytesWith",
      "tparams":[],
      "fparams":[{
        "name":"opts",
        "tpe":"{ count = Int32, offset = Int64 }"
      },{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Array[Int8, Static], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":512,
        "endLine":539
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readChunks",
        "loc":{
          "name":"File.flix",
          "beginLine":561,
          "endLine":561
        }
      },
      "ann":[],
      "doc":["Returns an iterator of the bytes in the given `file` in chunks of size `chunkSize`."],
      "name":"readChunks",
      "tparams":[],
      "fparams":[{
        "name":"chunkSize",
        "tpe":"Int32"
      },{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Iterator[Result[Array[Int8, Static], String], Static]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":561,
        "endLine":599
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readLines",
        "loc":{
          "name":"File.flix",
          "beginLine":361,
          "endLine":361
        }
      },
      "ann":[],
      "doc":["Returns a list of all the lines in the given file `f`."],
      "name":"readLines",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[List[String], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":361,
        "endLine":373
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readLinesIter",
        "loc":{
          "name":"File.flix",
          "beginLine":414,
          "endLine":414
        }
      },
      "ann":[],
      "doc":["Returns an iterator of the given file `f`"],
      "name":"readLinesIter",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Iterator[Result[String, String], Static]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":414,
        "endLine":445
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readLinesIterWith",
        "loc":{
          "name":"File.flix",
          "beginLine":452,
          "endLine":452
        }
      },
      "ann":[],
      "doc":["Returns an iterator of the given file `f` with the options `opts`.","The options `opts` to apply consists of","`charSet` - the specific charset to be used to decode the bytes."],
      "name":"readLinesIterWith",
      "tparams":[],
      "fparams":[{
        "name":"opts",
        "tpe":"{ charSet = String }"
      },{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Iterator[Result[String, String], Static]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":452,
        "endLine":484
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readLinesWith",
        "loc":{
          "name":"File.flix",
          "beginLine":394,
          "endLine":394
        }
      },
      "ann":[],
      "doc":["Returns a list of all the lines in the given file `f` with the options `opts`.","The options `opts` to apply consists of","`charSet` - the specific charset to be used to decode the bytes."],
      "name":"readLinesWith",
      "tparams":[],
      "fparams":[{
        "name":"opts",
        "tpe":"{ charSet = String }"
      },{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[List[String], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":394,
        "endLine":409
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"readWith",
        "loc":{
          "name":"File.flix",
          "beginLine":304,
          "endLine":304
        }
      },
      "ann":[],
      "doc":["Returns a string containing the given file `f` with the options `opts`.","The options `opts` to apply consists of","`offset` - the start offset in the given file `f`.","`count` - the number of bytes read.","`charSet` - the specific charset to be used to decode the bytes."],
      "name":"readWith",
      "tparams":[],
      "fparams":[{
        "name":"opts",
        "tpe":"{ charSet = String, count = Int32, offset = Int64 }"
      },{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[String, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":304,
        "endLine":334
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"size",
        "loc":{
          "name":"File.flix",
          "beginLine":91,
          "endLine":91
        }
      },
      "ann":[],
      "doc":["Returns the size of the given file `f` in bytes."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Int64, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":91,
        "endLine":104
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"stat",
        "loc":{
          "name":"File.flix",
          "beginLine":156,
          "endLine":156
        }
      },
      "ann":[],
      "doc":["Returns the statistics of the given file `f`."],
      "name":"stat",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[StatInfo, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":156,
        "endLine":171
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"truncate",
        "loc":{
          "name":"File.flix",
          "beginLine":822,
          "endLine":822
        }
      },
      "ann":[],
      "doc":["Returns `true` if the file `f` was created, and `false` if `f` was overwritten."],
      "name":"truncate",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":822,
        "endLine":846
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"walk",
        "loc":{
          "name":"File.flix",
          "beginLine":948,
          "endLine":948
        }
      },
      "ann":[],
      "doc":["Returns an Iterator over the files and directories recursively under the path `f`, including `f` itself.","The full paths of the files and directories are specified.","","Recursively traverses the directory."],
      "name":"walk",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      }],
      "tpe":"Result[Iterator[String, Static], String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"File.flix",
        "beginLine":948,
        "endLine":967
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"write",
        "loc":{
          "name":"File.flix",
          "beginLine":608,
          "endLine":608
        }
      },
      "ann":[],
      "doc":["Writes `data` to the given file `f`.","","Creates file `f` if it does not exist. Overwrites it if it exists.","","Returns `true` if the file was created."],
      "name":"write",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"t"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":608,
        "endLine":634
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"writeBytes",
        "loc":{
          "name":"File.flix",
          "beginLine":750,
          "endLine":750
        }
      },
      "ann":[],
      "doc":["Writes `data` to the given `f`.","","Creates `f` if it does not exist. Overwrites it if it exists.","","Returns `true` if the file `f` was created, and `false` if `f` was overwritten."],
      "name":"writeBytes",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"f[Int8]"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":750,
        "endLine":779
      }
    },{
      "sym":{
        "namespace":["File"],
        "name":"writeLines",
        "loc":{
          "name":"File.flix",
          "beginLine":643,
          "endLine":643
        }
      },
      "ann":[],
      "doc":["Writes `data` to the given `f`.","","Creates `f` if it does not exist. Overwrites it if it exists.","","Returns `true` if the file `f` was created, and `false` if `f` was overwritten."],
      "name":"writeLines",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"String"
      },{
        "name":"data",
        "tpe":"f[String]"
      }],
      "tpe":"Result[Bool, String]",
      "eff":"false",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"File.flix",
        "beginLine":643,
        "endLine":669
      }
    }],
    "Chain":[{
      "sym":{
        "namespace":["Chain"],
        "name":"ap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":144,
          "endLine":144
        }
      },
      "ann":[],
      "doc":["Apply every function from `f` to every argument from `x` and return a chain with all results.","For `f = f1, f2, ...` and `x = x1, x2, ...` the results appear in the order","`f1(x1), f1(x2), ..., f2(x1), f2(x2), ...`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Chain[a -> b & ef \\ ef']"
      },{
        "name":"x",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":144,
        "endLine":149
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"append",
        "loc":{
          "name":"Chain.flix",
          "beginLine":212,
          "endLine":212
        }
      },
      "ann":[],
      "doc":["Returns a new chain formed by appending the chains `c1` and `c2`."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Chain[a]"
      },{
        "name":"c2",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":212,
        "endLine":216
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"cons",
        "loc":{
          "name":"Chain.flix",
          "beginLine":162,
          "endLine":162
        }
      },
      "ann":[],
      "doc":["Add element `x` to the left end of chain `c`."],
      "name":"cons",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":162,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"count",
        "loc":{
          "name":"Chain.flix",
          "beginLine":414,
          "endLine":414
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `c` that satisfy the predicate `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":414,
        "endLine":419
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"dropLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":528,
          "endLine":528
        }
      },
      "ann":[],
      "doc":["Returns `c` without the first `n` elements.","","Returns `Nil` if `n > length(c)`.","Returns `c` if `n < 0`."],
      "name":"dropLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":528,
        "endLine":535
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"dropRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":543,
          "endLine":543
        }
      },
      "ann":[],
      "doc":["Returns `c` without the last `n` elements.","","Returns `Nil` if `n > length(c)`.","Returns `c` if `n < 0`."],
      "name":"dropRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":543,
        "endLine":550
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"dropWhileLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":555,
          "endLine":555
        }
      },
      "ann":[],
      "doc":["Returns `c` without the longest prefix that satisfies the predicate `f`."],
      "name":"dropWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":555,
        "endLine":558
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"dropWhileRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":563,
          "endLine":563
        }
      },
      "ann":[],
      "doc":["Returns `c` without the longest suffix that satisfies the predicate `f`."],
      "name":"dropWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":563,
        "endLine":566
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"empty",
        "loc":{
          "name":"Chain.flix",
          "beginLine":132,
          "endLine":132
        }
      },
      "ann":[],
      "doc":["Return the empty chain."],
      "name":"empty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":132,
        "endLine":132
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"enumerator",
        "loc":{
          "name":"Chain.flix",
          "beginLine":799,
          "endLine":799
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `c` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":799,
        "endLine":800
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"equals",
        "loc":{
          "name":"Chain.flix",
          "beginLine":823,
          "endLine":823
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `c1` and `c2` and equal."],
      "name":"equals",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Chain[a]"
      },{
        "name":"c2",
        "tpe":"Chain[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":823,
        "endLine":831
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"exists",
        "loc":{
          "name":"Chain.flix",
          "beginLine":456,
          "endLine":456
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `c` satisfies the predicate `f`.","","Returns `false` if `c` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":456,
        "endLine":460
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"filter",
        "loc":{
          "name":"Chain.flix",
          "beginLine":478,
          "endLine":478
        }
      },
      "ann":[],
      "doc":["Returns a list of every element in `c` that satisfies the predicate `f`.","","The function `f` must be pure."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":478,
        "endLine":483
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"filterMap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":625,
          "endLine":625
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `c`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":625,
        "endLine":630
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"find",
        "loc":{
          "name":"Chain.flix",
          "beginLine":274,
          "endLine":274
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`.","","The function `f` must be pure."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":274,
        "endLine":274
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"findLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":281,
          "endLine":281
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `c` that satisfies the predicate `f` when searching from left to right.","","The function `f` must be pure."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":281,
        "endLine":284
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"findMap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":637,
          "endLine":637
        }
      },
      "ann":[],
      "doc":["Returns the first non-None result of applying the partial function `f` to each element of `c`.","","Returns `None` if every element of `c` is `None`."],
      "name":"findMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":637,
        "endLine":643
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"findRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":291,
          "endLine":291
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `c` that satisfies the predicate `f` when searching from right to left.","","The function `f` must be pure."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":291,
        "endLine":294
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"flatMap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":381,
          "endLine":381
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c` and concatenating the results."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Chain[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":381,
        "endLine":386
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"flatten",
        "loc":{
          "name":"Chain.flix",
          "beginLine":448,
          "endLine":448
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `c`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[Chain[a]]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":448,
        "endLine":449
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"foldLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":490,
          "endLine":490
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `c` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":490,
        "endLine":493
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"foldMap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":519,
          "endLine":519
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":519,
        "endLine":520
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"foldRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":500,
          "endLine":500
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `c` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":500,
        "endLine":503
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Chain.flix",
          "beginLine":511,
          "endLine":511
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `c` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":511,
        "endLine":514
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"forAll",
        "loc":{
          "name":"Chain.flix",
          "beginLine":467,
          "endLine":467
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `c` satisfy the predicate `f`.","","Returns `true` if `c` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":467,
        "endLine":471
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"forEach",
        "loc":{
          "name":"Chain.flix",
          "beginLine":726,
          "endLine":726
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `c`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":726,
        "endLine":729
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"head",
        "loc":{
          "name":"Chain.flix",
          "beginLine":180,
          "endLine":180
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the first element of `c`.","","Returns `None` if `c` is empty."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":180,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"indexOf",
        "loc":{
          "name":"Chain.flix",
          "beginLine":262,
          "endLine":262
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of `a` in `c`."],
      "name":"indexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":262,
        "endLine":267
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"init",
        "loc":{
          "name":"Chain.flix",
          "beginLine":199,
          "endLine":199
        }
      },
      "ann":[],
      "doc":["Returns the subchain of `c` without the last element.","Returns `None` if the chain `c` is empty."],
      "name":"init",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[Chain[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":199,
        "endLine":202
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"intersperse",
        "loc":{
          "name":"Chain.flix",
          "beginLine":401,
          "endLine":401
        }
      },
      "ann":[],
      "doc":["Returns `c` with `a` inserted between every two adjacent elements."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":401,
        "endLine":409
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"isEmpty",
        "loc":{
          "name":"Chain.flix",
          "beginLine":154,
          "endLine":154
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `c` is the empty chain."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":154,
        "endLine":157
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"iterator",
        "loc":{
          "name":"Chain.flix",
          "beginLine":781,
          "endLine":781
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `c`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":781,
        "endLine":794
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"join",
        "loc":{
          "name":"Chain.flix",
          "beginLine":900,
          "endLine":900
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `c` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":900,
        "endLine":901
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"joinWith",
        "loc":{
          "name":"Chain.flix",
          "beginLine":907,
          "endLine":907
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `c` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":907,
        "endLine":908
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"last",
        "loc":{
          "name":"Chain.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the last element of `c`.","","Returns `None` if `c` is empty."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":190,
        "endLine":193
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"length",
        "loc":{
          "name":"Chain.flix",
          "beginLine":207,
          "endLine":207
        }
      },
      "ann":[],
      "doc":["Returns the length of `c`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":207,
        "endLine":207
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"map",
        "loc":{
          "name":"Chain.flix",
          "beginLine":357,
          "endLine":357
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c`.","","That is, the result is of the form: `f(x1) :: f(x2) :: ...`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":357,
        "endLine":362
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"mapAccumLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":699,
          "endLine":699
        }
      },
      "ann":[],
      "doc":["`mapAccumLeft` is a stateful version of `map`. The accumulating paramter `s` is updated at each","step in a left-to-right traversal."],
      "name":"mapAccumLeft",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> (a -> (s, b) & ef \\ ef')"
      },{
        "name":"start",
        "tpe":"s"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"(s, Chain[b])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":699,
        "endLine":707
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"mapAccumRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":713,
          "endLine":713
        }
      },
      "ann":[],
      "doc":["`mapAccumRight` is a stateful version of `map`. The accumulating parameter `s` is updated at each","step in a right-to-left traversal."],
      "name":"mapAccumRight",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> (a -> (s, b) & ef \\ ef')"
      },{
        "name":"start",
        "tpe":"s"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"(s, Chain[b])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":713,
        "endLine":721
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"mapWithIndex",
        "loc":{
          "name":"Chain.flix",
          "beginLine":369,
          "endLine":369
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c` along with that element's index.","","That is, the result is of the form: `f(x1, 0) :: f(x2, 1) :: ...`."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":369,
        "endLine":376
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"memberOf",
        "loc":{
          "name":"Chain.flix",
          "beginLine":253,
          "endLine":253
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `c` contains the element `a`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":253,
        "endLine":257
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"product",
        "loc":{
          "name":"Chain.flix",
          "beginLine":436,
          "endLine":436
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":436,
        "endLine":437
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"productWith",
        "loc":{
          "name":"Chain.flix",
          "beginLine":442,
          "endLine":442
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":442,
        "endLine":443
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"range",
        "loc":{
          "name":"Chain.flix",
          "beginLine":301,
          "endLine":301
        }
      },
      "ann":[],
      "doc":["Returns a list of all integers between `b` (inclusive) and `e` (exclusive).","","Returns `Nil` if `b >= e`."],
      "name":"range",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"Chain[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":301,
        "endLine":303
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"repeat",
        "loc":{
          "name":"Chain.flix",
          "beginLine":310,
          "endLine":310
        }
      },
      "ann":[],
      "doc":["Returns a list with the element `a` repeated `n` times.","","Returns `Nil` if `n < 0`."],
      "name":"repeat",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"a"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":310,
        "endLine":317
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"reverse",
        "loc":{
          "name":"Chain.flix",
          "beginLine":391,
          "endLine":391
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `c`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":391,
        "endLine":396
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"scan",
        "loc":{
          "name":"Chain.flix",
          "beginLine":322,
          "endLine":322
        }
      },
      "ann":[],
      "doc":["Alias for `scanLeft`."],
      "name":"scan",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":322,
        "endLine":322
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"scanLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":329,
          "endLine":329
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `c` going left to right.","","That is, the result is of the form: `s :: f(s, x1) :: f(f(s, x1), x2)  ...`."],
      "name":"scanLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":329,
        "endLine":336
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"scanRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":343,
          "endLine":343
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `c` going right to left.","","That is, the result is of the form: `... f(xn-1, f(xn, s)) :: f(xn, s) :: s`."],
      "name":"scanRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":343,
        "endLine":350
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sequence",
        "loc":{
          "name":"Chain.flix",
          "beginLine":878,
          "endLine":878
        }
      },
      "ann":[],
      "doc":["Returns the result of running all the actions in the chain `c`."],
      "name":"sequence",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[m[a]]"
      }],
      "tpe":"m[Chain[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":878,
        "endLine":883
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"shuffle",
        "loc":{
          "name":"Chain.flix",
          "beginLine":924,
          "endLine":924
        }
      },
      "ann":[],
      "doc":["Shuffles `c` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":924,
        "endLine":926
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"singleton",
        "loc":{
          "name":"Chain.flix",
          "beginLine":137,
          "endLine":137
        }
      },
      "ann":[],
      "doc":["Return the singleton chain with element `x`."],
      "name":"singleton",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":137,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"snoc",
        "loc":{
          "name":"Chain.flix",
          "beginLine":170,
          "endLine":170
        }
      },
      "ann":[],
      "doc":["Add element `x` to the right end of chain `c`."],
      "name":"snoc",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":170,
        "endLine":173
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sort",
        "loc":{
          "name":"Chain.flix",
          "beginLine":840,
          "endLine":840
        }
      },
      "ann":[],
      "doc":["Sort chain `c` so that elements are ordered from low to high according to their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":840,
        "endLine":842
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sortBy",
        "loc":{
          "name":"Chain.flix",
          "beginLine":851,
          "endLine":851
        }
      },
      "ann":[],
      "doc":["Sort chain `c` so that elements are ordered from low to high according to the `Order` instance","for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":851,
        "endLine":853
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sortWith",
        "loc":{
          "name":"Chain.flix",
          "beginLine":862,
          "endLine":862
        }
      },
      "ann":[],
      "doc":["Sort chain `c` so that elements are ordered from low to high according to the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":862,
        "endLine":864
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sum",
        "loc":{
          "name":"Chain.flix",
          "beginLine":424,
          "endLine":424
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the chain `c`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":424,
        "endLine":425
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"sumWith",
        "loc":{
          "name":"Chain.flix",
          "beginLine":430,
          "endLine":430
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the chain `c` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":430,
        "endLine":431
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"takeLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":574,
          "endLine":574
        }
      },
      "ann":[],
      "doc":["Returns the first `n` elements of `c`.","","Returns `c` if `n > length(c)`.","Returns `Nil` if `n < 0`."],
      "name":"takeLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":574,
        "endLine":583
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"takeRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":591,
          "endLine":591
        }
      },
      "ann":[],
      "doc":["Returns the last `n` elements of `c`.","","Returns `c` if `n > length(c)`.","Returns `Nil` if `n < 0`."],
      "name":"takeRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":591,
        "endLine":600
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"takeWhileLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":605,
          "endLine":605
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `c` that satisfies the predicate `f`."],
      "name":"takeWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":605,
        "endLine":610
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"takeWhileRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":615,
          "endLine":615
        }
      },
      "ann":[],
      "doc":["Returns the longest suffix of `c` that satisfies the predicate `f`."],
      "name":"takeWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":615,
        "endLine":620
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toArray",
        "loc":{
          "name":"Chain.flix",
          "beginLine":770,
          "endLine":770
        }
      },
      "ann":[],
      "doc":["Returns the chain `c` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":770,
        "endLine":776
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toList",
        "loc":{
          "name":"Chain.flix",
          "beginLine":734,
          "endLine":734
        }
      },
      "ann":[],
      "doc":["Returns `c` as a list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":734,
        "endLine":735
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toMap",
        "loc":{
          "name":"Chain.flix",
          "beginLine":764,
          "endLine":764
        }
      },
      "ann":[],
      "doc":["Returns the chain of pairs `c` that represents an association list as a map.","","If `c` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[(a, b)]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":764,
        "endLine":765
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toMutDeque",
        "loc":{
          "name":"Chain.flix",
          "beginLine":740,
          "endLine":740
        }
      },
      "ann":[],
      "doc":["Returns `c` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":740,
        "endLine":743
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toMutList",
        "loc":{
          "name":"Chain.flix",
          "beginLine":748,
          "endLine":748
        }
      },
      "ann":[],
      "doc":["Returns `c` as a mutable list."],
      "name":"toMutList",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":748,
        "endLine":750
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toNec",
        "loc":{
          "name":"Chain.flix",
          "beginLine":814,
          "endLine":814
        }
      },
      "ann":[],
      "doc":["Returns the chain `c` as a Nec."],
      "name":"toNec",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[Nec[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":814,
        "endLine":818
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toNel",
        "loc":{
          "name":"Chain.flix",
          "beginLine":805,
          "endLine":805
        }
      },
      "ann":[],
      "doc":["Returns the chain `c` as a Nel."],
      "name":"toNel",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Option[Nel[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":805,
        "endLine":809
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"toSet",
        "loc":{
          "name":"Chain.flix",
          "beginLine":755,
          "endLine":755
        }
      },
      "ann":[],
      "doc":["Returns the list `c` as a set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":755,
        "endLine":756
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"traverse",
        "loc":{
          "name":"Chain.flix",
          "beginLine":889,
          "endLine":889
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","chain `c`."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"m[Chain[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":889,
        "endLine":894
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"unzip",
        "loc":{
          "name":"Chain.flix",
          "beginLine":688,
          "endLine":688
        }
      },
      "ann":[],
      "doc":["Returns a pair of chains, the first containing all first components in `c`","and the second containing all second components in `c`."],
      "name":"unzip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[(a, b)]"
      }],
      "tpe":"(Chain[a], Chain[b])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":688,
        "endLine":693
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"viewLeft",
        "loc":{
          "name":"Chain.flix",
          "beginLine":226,
          "endLine":226
        }
      },
      "ann":[],
      "doc":["Deconstruct a Chain from left-to-right.","","Returns `ViewLeft(x, rs)` if the chain is non-empty, where `x` is the leftmost","element of the chain `c`, and `rs` is the rest of the chain.","","Returns `NoneLeft` if the chain is empty."],
      "name":"viewLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"ViewLeft[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":226,
        "endLine":232
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"viewRight",
        "loc":{
          "name":"Chain.flix",
          "beginLine":242,
          "endLine":242
        }
      },
      "ann":[],
      "doc":["Deconstruct a Chain from right-to-left.","","Returns `ViewRight(rs, x)` if the chain is non-empty, where `x` is the rightmost","element of the chain `c``, and `rs` is the front of the chain.","","Returns `NoneRight` if the chain is empty."],
      "name":"viewRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"ViewRight[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":242,
        "endLine":248
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"zip",
        "loc":{
          "name":"Chain.flix",
          "beginLine":651,
          "endLine":651
        }
      },
      "ann":[],
      "doc":["Returns a chain where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `c1` and `b` is the element at index `i` in `c2`.","","If either `c1` or `c2` becomes depleted, then no further elements are added to the resulting chain."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Chain[a]"
      },{
        "name":"c2",
        "tpe":"Chain[b]"
      }],
      "tpe":"Chain[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":651,
        "endLine":656
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"zipWith",
        "loc":{
          "name":"Chain.flix",
          "beginLine":664,
          "endLine":664
        }
      },
      "ann":[],
      "doc":["Returns a chain where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `c1` and `b` is the element at index `i` in `c2`.","","If either `c1` or `c2` becomes depleted, then no further elements are added to the resulting chain."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"c1",
        "tpe":"Chain[a]"
      },{
        "name":"c2",
        "tpe":"Chain[b]"
      }],
      "tpe":"Chain[c]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":664,
        "endLine":669
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"zipWithA",
        "loc":{
          "name":"Chain.flix",
          "beginLine":674,
          "endLine":674
        }
      },
      "ann":[],
      "doc":["Generalize `zipWith` to an applicative functor `f`."],
      "name":"zipWithA",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> m[c] & ef \\ ef')"
      },{
        "name":"xs",
        "tpe":"Chain[a]"
      },{
        "name":"ys",
        "tpe":"Chain[b]"
      }],
      "tpe":"m[Chain[c]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Chain.flix",
        "beginLine":674,
        "endLine":681
      }
    },{
      "sym":{
        "namespace":["Chain"],
        "name":"zipWithIndex",
        "loc":{
          "name":"Chain.flix",
          "beginLine":914,
          "endLine":914
        }
      },
      "ann":[],
      "doc":["Returns a chain where each element `e` is mapped to `(e, i)` where `i`","is the index of `e`."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Chain[a]"
      }],
      "tpe":"Chain[(a, Int32)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Chain.flix",
        "beginLine":914,
        "endLine":919
      }
    }],
    "Thread":[{
      "sym":{
        "namespace":["Thread"],
        "name":"sleep",
        "loc":{
          "name":"Thread.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":[],
      "doc":[],
      "name":"sleep",
      "tparams":[],
      "fparams":[{
        "name":"d",
        "tpe":"Duration"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Thread.flix",
        "beginLine":23,
        "endLine":30
      }
    }],
    "Int8":[{
      "sym":{
        "namespace":["Int8"],
        "name":"abs",
        "loc":{
          "name":"Int8.flix",
          "beginLine":56,
          "endLine":56
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`.","If the absolute value exceeds maxValue(), -1 is returned."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":56,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"bitCount",
        "loc":{
          "name":"Int8.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Returns the number of one-bits in the two's complement binary","representation of `x`."],
      "name":"bitCount",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":105,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"clearBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":241,
          "endLine":241
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` cleared (to 0).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 7 (leftmost bit)"],
      "name":"clearBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":241,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"compare",
        "loc":{
          "name":"Int8.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > y, -1 if x < y, and 0 if x = y.","The sign of x - y."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      },{
        "name":"y",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":78,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"dist",
        "loc":{
          "name":"Int8.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`.","If this distance exceeds maxValue(), -1 is returned."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      },{
        "name":"y",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":66,
        "endLine":72
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"factorial",
        "loc":{
          "name":"Int8.flix",
          "beginLine":265,
          "endLine":265
        }
      },
      "ann":[],
      "doc":["Returns the factorial of `x`."],
      "name":"factorial",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":265,
        "endLine":265
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"flipBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` flipped.","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 7 (leftmost bit)"],
      "name":"flipBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":248,
        "endLine":248
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"fromString",
        "loc":{
          "name":"Int8.flix",
          "beginLine":276,
          "endLine":276
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int8, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":276,
        "endLine":282
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"getBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":226,
          "endLine":226
        }
      },
      "ann":[],
      "doc":["Returns the bit of `x` at `pos` (either 0 or 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 7 (leftmost bit)"],
      "name":"getBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":226,
        "endLine":227
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"highestOneBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":186,
          "endLine":186
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"highestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":186,
        "endLine":187
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"highestOneBitPosition",
        "loc":{
          "name":"Int8.flix",
          "beginLine":155,
          "endLine":155
        }
      },
      "ann":[],
      "doc":["Returns the position of the highest-order/leftmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 7 (leftmost bit)","-1 if x = 0"],
      "name":"highestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":155,
        "endLine":157
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"log2",
        "loc":{
          "name":"Int8.flix",
          "beginLine":254,
          "endLine":254
        }
      },
      "ann":[],
      "doc":["Returns the integer binary logarithm of `x`.","If the given value is 0 or negative, 0 is returned."],
      "name":"log2",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":254,
        "endLine":260
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"logicalRightShift",
        "loc":{
          "name":"Int8.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the logical right shift of `x` by `distance`.","Only the rightmost 5 bits of `distance` are considered (ie. `distance rem 32`).","A zero is shifted into the leftmost position regardless of sign extension."],
      "name":"logicalRightShift",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":95,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"lowestOneBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":194,
          "endLine":194
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"lowestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":194,
        "endLine":195
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"lowestOneBitPosition",
        "loc":{
          "name":"Int8.flix",
          "beginLine":164,
          "endLine":164
        }
      },
      "ann":[],
      "doc":["Returns the position of the lowest-order/rightmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 7 (leftmost bit)","-1 if x = 0"],
      "name":"lowestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":164,
        "endLine":166
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"max",
        "loc":{
          "name":"Int8.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      },{
        "name":"y",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"maxValue",
        "loc":{
          "name":"Int8.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by an `Int8`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"min",
        "loc":{
          "name":"Int8.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      },{
        "name":"y",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"minValue",
        "loc":{
          "name":"Int8.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by an `Int8`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"numberOfLeadingZeros",
        "loc":{
          "name":"Int8.flix",
          "beginLine":210,
          "endLine":210
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits preceding the","highest-order/leftmost one-bit in `x`.","Returns 8 if x=0."],
      "name":"numberOfLeadingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":210,
        "endLine":211
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"numberOfTrailingZeros",
        "loc":{
          "name":"Int8.flix",
          "beginLine":218,
          "endLine":218
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits following the","lowest-order/rightmost one-bit in `x`.","Returns 8 if x=0."],
      "name":"numberOfTrailingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":218,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"reverse",
        "loc":{
          "name":"Int8.flix",
          "beginLine":133,
          "endLine":133
        }
      },
      "ann":[],
      "doc":["Returns the value obtained by reversing the bits in the","two's complement binary representation of `x`."],
      "name":"reverse",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":133,
        "endLine":133
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"rotateLeft",
        "loc":{
          "name":"Int8.flix",
          "beginLine":124,
          "endLine":124
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` left by `distance` bits."],
      "name":"rotateLeft",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":124,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"rotateRight",
        "loc":{
          "name":"Int8.flix",
          "beginLine":115,
          "endLine":115
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` right by `distance` bits."],
      "name":"rotateRight",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":115,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"setBit",
        "loc":{
          "name":"Int8.flix",
          "beginLine":234,
          "endLine":234
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `pos` set (to 1).","Considers the 5 rightmost bits of `pos` (`pos` mod 32).","The bits of x have positions: 0 (rightmost bit) - 7 (leftmost bit)"],
      "name":"setBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":234,
        "endLine":234
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"signum",
        "loc":{
          "name":"Int8.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > 0, -1 if x < 0, and 0 if x = 0.","The sign of x."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":88,
        "endLine":88
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"size",
        "loc":{
          "name":"Int8.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent an `Int8`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toBigDecimal",
        "loc":{
          "name":"Int8.flix",
          "beginLine":350,
          "endLine":350
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigDecimal.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":350,
        "endLine":352
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toBigInt",
        "loc":{
          "name":"Int8.flix",
          "beginLine":319,
          "endLine":319
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigInt.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":319,
        "endLine":323
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toFloat32",
        "loc":{
          "name":"Int8.flix",
          "beginLine":330,
          "endLine":330
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float32.","","The numeric value of `x` is preserved exactly."],
      "name":"toFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":330,
        "endLine":333
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toFloat64",
        "loc":{
          "name":"Int8.flix",
          "beginLine":340,
          "endLine":340
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float64.","","The numeric value of `x` is preserved exactly."],
      "name":"toFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":340,
        "endLine":343
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toInt16",
        "loc":{
          "name":"Int8.flix",
          "beginLine":289,
          "endLine":289
        }
      },
      "ann":[],
      "doc":["Convert `x` to an Int16.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":289,
        "endLine":292
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toInt32",
        "loc":{
          "name":"Int8.flix",
          "beginLine":299,
          "endLine":299
        }
      },
      "ann":[],
      "doc":["Convert `x` to an Int32.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":299,
        "endLine":302
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toInt64",
        "loc":{
          "name":"Int8.flix",
          "beginLine":309,
          "endLine":309
        }
      },
      "ann":[],
      "doc":["Convert `x` to an Int64.","","The numeric value of `x` is preserved exactly."],
      "name":"toInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":309,
        "endLine":312
      }
    },{
      "sym":{
        "namespace":["Int8"],
        "name":"toString",
        "loc":{
          "name":"Int8.flix",
          "beginLine":270,
          "endLine":270
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int8"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int8.flix",
        "beginLine":270,
        "endLine":270
      }
    }],
    "Char":[{
      "sym":{
        "namespace":["Char"],
        "name":"fromInt32",
        "loc":{
          "name":"Char.flix",
          "beginLine":129,
          "endLine":129
        }
      },
      "ann":[],
      "doc":["Returns the respective character for the int `i`."],
      "name":"fromInt32",
      "tparams":[],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      }],
      "tpe":"Char",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":129,
        "endLine":130
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isAscii",
        "loc":{
          "name":"Char.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is an ascii character."],
      "name":"isAscii",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":30,
        "endLine":33
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isAsciiDigit",
        "loc":{
          "name":"Char.flix",
          "beginLine":53,
          "endLine":53
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is strictly in the range of ASCII digits 0...9."],
      "name":"isAsciiDigit",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":53,
        "endLine":56
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isDigit",
        "loc":{
          "name":"Char.flix",
          "beginLine":46,
          "endLine":46
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is a recognized Unicode digit.","This includes the ASCII range 0..9 but also Arabic-Indic digits, Devagari digits and Fullwidth digits."],
      "name":"isDigit",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":46,
        "endLine":48
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isHexDigit",
        "loc":{
          "name":"Char.flix",
          "beginLine":69,
          "endLine":69
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is in the range 0...F."],
      "name":"isHexDigit",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":69,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isLetter",
        "loc":{
          "name":"Char.flix",
          "beginLine":38,
          "endLine":38
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is a letter character."],
      "name":"isLetter",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":38,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isLowerCase",
        "loc":{
          "name":"Char.flix",
          "beginLine":79,
          "endLine":79
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is lowercase."],
      "name":"isLowerCase",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":79,
        "endLine":81
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isOctDigit",
        "loc":{
          "name":"Char.flix",
          "beginLine":61,
          "endLine":61
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is in the range 0...7."],
      "name":"isOctDigit",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":61,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isUpperCase",
        "loc":{
          "name":"Char.flix",
          "beginLine":86,
          "endLine":86
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is uppercase."],
      "name":"isUpperCase",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":86,
        "endLine":88
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"isWhiteSpace",
        "loc":{
          "name":"Char.flix",
          "beginLine":93,
          "endLine":93
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given char `c` is a white space character."],
      "name":"isWhiteSpace",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":93,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"toInt32",
        "loc":{
          "name":"Char.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Returns the character `c` as an Int32."],
      "name":"toInt32",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":123,
        "endLine":124
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"toLowerCase",
        "loc":{
          "name":"Char.flix",
          "beginLine":102,
          "endLine":102
        }
      },
      "ann":[],
      "doc":["Converts a letter to its lowercase version.","","Returns the original character if it does not have a lowercase version."],
      "name":"toLowerCase",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Char",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":102,
        "endLine":104
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"toString",
        "loc":{
          "name":"Char.flix",
          "beginLine":118,
          "endLine":118
        }
      },
      "ann":[],
      "doc":["Returns the character `c` as a string."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":118,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["Char"],
        "name":"toUpperCase",
        "loc":{
          "name":"Char.flix",
          "beginLine":111,
          "endLine":111
        }
      },
      "ann":[],
      "doc":["Converts a letter to its uppercase version.","","Returns the original character if it does not have a uppercase version."],
      "name":"toUpperCase",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Char"
      }],
      "tpe":"Char",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Char.flix",
        "beginLine":111,
        "endLine":113
      }
    }],
    "Day08":[{
      "sym":{
        "namespace":["Day08"],
        "name":"partOne",
        "loc":{
          "name":"/Users/an/nw/flix/src/Day08.flix",
          "beginLine":10,
          "endLine":10
        }
      },
      "ann":[],
      "doc":[],
      "name":"partOne",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Result[Int32, String]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"/Users/an/nw/flix/src/Day08.flix",
        "beginLine":10,
        "endLine":13
      }
    }],
    "Object":[{
      "sym":{
        "namespace":["Object"],
        "name":"isNull",
        "loc":{
          "name":"Object.flix",
          "beginLine":21,
          "endLine":21
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given value `x` is `null`."],
      "name":"isNull",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Object.flix",
        "beginLine":21,
        "endLine":33
      }
    },{
      "sym":{
        "namespace":["Object"],
        "name":"toOption",
        "loc":{
          "name":"Object.flix",
          "beginLine":38,
          "endLine":38
        }
      },
      "ann":[],
      "doc":["Returns `None` if the given value `x` is `null`, otherwise returns `Some(x)`."],
      "name":"toOption",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Object.flix",
        "beginLine":38,
        "endLine":39
      }
    },{
      "sym":{
        "namespace":["Object"],
        "name":"toString",
        "loc":{
          "name":"Object.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":["@Unsafe"],
      "doc":["Unsafely converts `x` to a string using Java's built-in toString."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Object.flix",
        "beginLine":45,
        "endLine":47
      }
    }],
    "MultiMap":[{
      "sym":{
        "namespace":["MultiMap"],
        "name":"adjust",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => map(f, vs)` if `k => vs` is in `m`.","","Otherwise, returns `m`."],
      "name":"adjust",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> v & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":174,
        "endLine":175
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"adjustWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":180,
          "endLine":180
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => map(f(k), vs)` if `k => vs` is in `m`. Otherwise, returns `m`."],
      "name":"adjustWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":180,
        "endLine":181
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"count",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":407,
          "endLine":407
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the number of mappings `k => v` in `m` that satisfy the predicate `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":407,
        "endLine":408
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"difference",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":502,
          "endLine":502
        }
      },
      "ann":[],
      "doc":["Returns the difference of `m1` and `m2` i.e `m1 - m2` (left biased)."],
      "name":"difference",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MultiMap[k, v]"
      },{
        "name":"m2",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":502,
        "endLine":505
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"empty",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":102,
          "endLine":102
        }
      },
      "ann":[],
      "doc":["Returns the empty MultiMap."],
      "name":"empty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":102,
        "endLine":102
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"exists",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":461,
          "endLine":461
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one mapping in `m` satisfies the predicate `f`.","","Returns `false` if `m` is the empty MultiMap."],
      "name":"exists",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":461,
        "endLine":464
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"filter",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Returns a MultiMap of all mappings `k => v` in `m` where `v` satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Bool & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":248,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"filterWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":254,
          "endLine":254
        }
      },
      "ann":[],
      "doc":["Returns a MultiMap of all mappings `k => v` in `m` where `(k, v)` satisfies the predicate `f`."],
      "name":"filterWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":254,
        "endLine":255
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"find",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":219,
          "endLine":219
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":219,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"findLeft",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of `m` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":224,
        "endLine":231
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"findRight",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":236,
          "endLine":236
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of `m` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":236,
        "endLine":243
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldLeft",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":287,
          "endLine":287
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, v1), v2)..., vn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (v -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":287,
        "endLine":288
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldLeftWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":295,
          "endLine":295
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, k1, v1), k2, v2)..., vn)`."],
      "name":"foldLeftWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":295,
        "endLine":298
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldMap",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":346,
          "endLine":346
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each value and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> b & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":346,
        "endLine":347
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldMapWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":340,
          "endLine":340
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each key-value pair and combining the results."],
      "name":"foldMapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> b & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":340,
        "endLine":341
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldRight",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":305,
          "endLine":305
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, s)))`."],
      "name":"foldRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":305,
        "endLine":306
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":324,
          "endLine":324
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, z)))`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":324,
        "endLine":325
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldRightWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":313,
          "endLine":313
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`."],
      "name":"foldRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (b -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":313,
        "endLine":316
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldRightWithKeyCont",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":333,
          "endLine":333
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, z)))`.","A `foldRightWithKeyCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithKeyCont",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef'))"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":333,
        "endLine":335
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"foldWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":280,
          "endLine":280
        }
      },
      "ann":[],
      "doc":["Alias for `foldLeftWithKey`."],
      "name":"foldWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":280,
        "endLine":280
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"forAll",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":471,
          "endLine":471
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in `m` satisfy the predicate `f`.","","Returns `true` if `m` is the empty MultiMap."],
      "name":"forAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":471,
        "endLine":474
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"forEach",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":561,
          "endLine":561
        }
      },
      "ann":[],
      "doc":["Applies `f` to every `(key, value)` of MultiMap `m`."],
      "name":"forEach",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":561,
        "endLine":563
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"get",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":121,
          "endLine":121
        }
      },
      "ann":[],
      "doc":["Returns `Some(vs)` if `k => vs` is in `m`.","","Otherwise returns `Nil`."],
      "name":"get",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Set[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":121,
        "endLine":123
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"insert",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v`."],
      "name":"insert",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":151,
        "endLine":153
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"insertAll",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => vs`.","","Where `vs` is any foldable container. If `vs` is empty nothing is inserted."],
      "name":"insertAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"vs",
        "tpe":"t[v]"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":160,
        "endLine":167
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"intersection",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":487,
          "endLine":487
        }
      },
      "ann":[],
      "doc":["Returns the intersection of `m1` and `m2`."],
      "name":"intersection",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MultiMap[k, v]"
      },{
        "name":"m2",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":487,
        "endLine":497
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"isEmpty",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":112,
          "endLine":112
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `m` is the empty MultiMap."],
      "name":"isEmpty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":112,
        "endLine":114
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"iterator",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":568,
          "endLine":568
        }
      },
      "ann":[],
      "doc":["Returns an iterator over all key-value pairs in `m` i.e. `k => Set#{v_1, ..., v_n}`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Iterator[(k, Set[v]), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":568,
        "endLine":570
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"keysOf",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":135,
          "endLine":135
        }
      },
      "ann":[],
      "doc":["Returns the keys of `m`."],
      "name":"keysOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Set[k]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":135,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"map",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":263,
          "endLine":263
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a MultiMap with mappings `k => f(v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"map",
      "tparams":[{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v1 -> v2 & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v1]"
      }],
      "tpe":"MultiMap[k, v2]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v2"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":263,
        "endLine":264
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"mapWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":272,
          "endLine":272
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a MultiMap with mappings `k => f(k, v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"mapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> v2 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v1]"
      }],
      "tpe":"MultiMap[k, v2]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v2"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":272,
        "endLine":275
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"memberOf",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":128,
          "endLine":128
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `m` contains the key `k`."],
      "name":"memberOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":128,
        "endLine":130
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"productKeys",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":436,
          "endLine":436
        }
      },
      "ann":[],
      "doc":["Returns the product of all keys in the MultiMap `m`."],
      "name":"productKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":436,
        "endLine":437
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"productValues",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":442,
          "endLine":442
        }
      },
      "ann":[],
      "doc":["Returns the product of all values in the MultiMap `m`."],
      "name":"productValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":442,
        "endLine":443
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"productWith",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":451,
          "endLine":451
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the product of all key-value pairs `k => v` in the MultiMap `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":451,
        "endLine":454
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"reduceLeft",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":356,
          "endLine":356
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in `m` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(v1, v2), v3)..., vn))`","","Returns `None` if `m` is the empty MultiMap."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":356,
        "endLine":357
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"reduceLeftWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":366,
          "endLine":366
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in `m` going from left to right until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(...f(f(k1, v1, k2, v2), k3, v3)..., kn, vn))`","","Returns `None` if `m` is the empty MultiMap."],
      "name":"reduceLeftWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":366,
        "endLine":373
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"reduceRight",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":382,
          "endLine":382
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in `m` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(v1, ...f(vn-2, f(vn-1, vn))...))`","","Returns `None` if `m` is the empty MultiMap."],
      "name":"reduceRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":382,
        "endLine":383
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"reduceRightWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":392,
          "endLine":392
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in `m` going from right to left until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(k1, v1, ...f(kn-2, vn-2, f(kn-1, vn-1, kn, vn))...))`","","Returns `None` if `m` is the empty MultiMap."],
      "name":"reduceRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":392,
        "endLine":399
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"remove",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Removes the mapping `k` from the MultiMap `m`."],
      "name":"remove",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":200,
        "endLine":202
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"removeWithValue",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":207,
          "endLine":207
        }
      },
      "ann":[],
      "doc":["Removes the mapping of `(k, v)`  from the MultiMap `m` it it exists."],
      "name":"removeWithValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":207,
        "endLine":214
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"singleton",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":107,
          "endLine":107
        }
      },
      "ann":[],
      "doc":["Returns the singleton MultiMap where key `k` is mapped to value `v`."],
      "name":"singleton",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":107,
        "endLine":107
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"sumKeys",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":413,
          "endLine":413
        }
      },
      "ann":[],
      "doc":["Returns the sum of all keys in the MultiMap `m`."],
      "name":"sumKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":413,
        "endLine":414
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"sumValues",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":419,
          "endLine":419
        }
      },
      "ann":[],
      "doc":["Returns the sum of all values in the MultiMap `m`."],
      "name":"sumValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":419,
        "endLine":420
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"sumWith",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":428,
          "endLine":428
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the sum of all key-value pairs `k => v` in the MultiMap `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":428,
        "endLine":431
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toAscList",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":526,
          "endLine":526
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of singleton key-value pairs in ascending order."],
      "name":"toAscList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":526,
        "endLine":527
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toAssocList",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":538,
          "endLine":538
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of `(key, Set[value])` pairs in ascending order."],
      "name":"toAssocList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"List[(k, Set[v])]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":538,
        "endLine":540
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toDescList",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":532,
          "endLine":532
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of singleton key-value pairs in descending order."],
      "name":"toDescList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":532,
        "endLine":533
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toList",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":521,
          "endLine":521
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of singleton key-value pairs."],
      "name":"toList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":521,
        "endLine":521
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toMap",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":545,
          "endLine":545
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of singleton key-value pairs in ascending order."],
      "name":"toMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"Map[k, Set[v]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":545,
        "endLine":547
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toMutDeque",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":552,
          "endLine":552
        }
      },
      "ann":[],
      "doc":["Returns the MultiMap `m` as a list of singleton key-value pairs in ascending order."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MutDeque[(k, Set[v]), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":552,
        "endLine":554
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"toString",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":83,
          "endLine":83
        }
      },
      "ann":[],
      "doc":["Returns a string representation of `m`."],
      "name":"toString",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":83,
        "endLine":97
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"union",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":479,
          "endLine":479
        }
      },
      "ann":[],
      "doc":["Returns the union of `m1` and `m2`."],
      "name":"union",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MultiMap[k, v]"
      },{
        "name":"m2",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":479,
        "endLine":482
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"update",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":186,
          "endLine":186
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(v) = Some(v1)`. Otherwise, returns `m`."],
      "name":"update",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Option[v] & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":186,
        "endLine":187
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"updateWithKey",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":192,
          "endLine":192
        }
      },
      "ann":[],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(k, v) = Some(v1)`. Otherwise, returns `m`."],
      "name":"updateWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Option[v] & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"MultiMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":192,
        "endLine":195
      }
    },{
      "sym":{
        "namespace":["MultiMap"],
        "name":"valuesOf",
        "loc":{
          "name":"MultiMap.flix",
          "beginLine":144,
          "endLine":144
        }
      },
      "ann":[],
      "doc":["Returns the values of `m`.","","Answer may contain duplicates where values were ascribed to multiple keys."],
      "name":"valuesOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MultiMap[k, v]"
      }],
      "tpe":"List[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MultiMap.flix",
        "beginLine":144,
        "endLine":146
      }
    }],
    "MutList":[{
      "sym":{
        "namespace":["MutList"],
        "name":"append!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":631,
          "endLine":631
        }
      },
      "ann":[],
      "doc":["Appends `m` to `v` i.e. inserts all elements from `m` into the end of `v`."],
      "name":"append!",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"m[a]"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":631,
        "endLine":632
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"clear!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":528,
          "endLine":528
        }
      },
      "ann":[],
      "doc":["Removes all elements from the given mutable list `v`."],
      "name":"clear!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":528,
        "endLine":531
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"compress!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":855,
          "endLine":855
        }
      },
      "ann":[],
      "doc":["Compresses the given mutable list `v` if needed.","","The mutable list will be shrunk to 1/2 of its size if the load factor is less than 1/4."],
      "name":"compress!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":855,
        "endLine":866
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"copy",
        "loc":{
          "name":"MutList.flix",
          "beginLine":537,
          "endLine":537
        }
      },
      "ann":[],
      "doc":["Returns a shallow copy of the given mutable list `v`.","The capacity of the copy is equal to the length of the list."],
      "name":"copy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":537,
        "endLine":544
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"count",
        "loc":{
          "name":"MutList.flix",
          "beginLine":132,
          "endLine":132
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in the given mutable list `v` that satisfies the given predicate `f`.","","Returns `0` if the given mutable list `v` is empty."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":132,
        "endLine":133
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"exists",
        "loc":{
          "name":"MutList.flix",
          "beginLine":170,
          "endLine":170
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given predicate `f` holds for at least one element of the given mutable list `v`.","","Returns `false` if the given mutable list `v` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":170,
        "endLine":180
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"find",
        "loc":{
          "name":"MutList.flix",
          "beginLine":262,
          "endLine":262
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":262,
        "endLine":263
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"findLeft",
        "loc":{
          "name":"MutList.flix",
          "beginLine":271,
          "endLine":271
        }
      },
      "ann":[],
      "doc":["Optionally returns the left-most element in the given mutable list `v` that satisfies the given predicate `f`.","","Returns `None` if no element satisfies the given predicate `f`.","Returns `None` if the given mutable list `v` is empty."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":271,
        "endLine":282
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"findRight",
        "loc":{
          "name":"MutList.flix",
          "beginLine":290,
          "endLine":290
        }
      },
      "ann":[],
      "doc":["Optionally returns the right-most element in the given mutable list `v` that satisfies the given predicate `f`.","","Returns `None` if no element satisfies the given predicate `f`.","Returns `None` if the given mutable list `v` is empty."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":290,
        "endLine":300
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"foldLeft",
        "loc":{
          "name":"MutList.flix",
          "beginLine":443,
          "endLine":443
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `a` going from left to right.","","That is, the result is of the form: `f(...f(f(s, a[0]), a[1])..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":443,
        "endLine":455
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"foldMap",
        "loc":{
          "name":"MutList.flix",
          "beginLine":500,
          "endLine":500
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":500,
        "endLine":501
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"foldRight",
        "loc":{
          "name":"MutList.flix",
          "beginLine":464,
          "endLine":464
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `a` going from left to right.","","That is, the result is of the form: `f(...f(f(s, a[0]), a[1])..., xn)`.","","The implementation is tail recursive."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":464,
        "endLine":476
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"MutList.flix",
          "beginLine":484,
          "endLine":484
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `a` going from left to right.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef and r \\ ef') -> b & ef and r \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":484,
        "endLine":495
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"forAll",
        "loc":{
          "name":"MutList.flix",
          "beginLine":187,
          "endLine":187
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given predicate `f` holds for all elements of the given mutable list `v`.","","Returns `true` if the given mutable list `v` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":187,
        "endLine":197
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"forEach",
        "loc":{
          "name":"MutList.flix",
          "beginLine":819,
          "endLine":819
        }
      },
      "ann":[],
      "doc":["Applies `f` to all the elements in `v`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":819,
        "endLine":831
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"forEachWithIndex",
        "loc":{
          "name":"MutList.flix",
          "beginLine":836,
          "endLine":836
        }
      },
      "ann":[],
      "doc":["Applies `f` to all the elements in `v`."],
      "name":"forEachWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> Unit & ef \\ ef')"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":836,
        "endLine":848
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"head",
        "loc":{
          "name":"MutList.flix",
          "beginLine":204,
          "endLine":204
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of the given mutable list `v`.","","Returns `None` if the given mutable list `v` is empty."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":204,
        "endLine":209
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"indexOf",
        "loc":{
          "name":"MutList.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Alias for `IndexOfLeft`"],
      "name":"indexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":224,
        "endLine":225
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"indexOfLeft",
        "loc":{
          "name":"MutList.flix",
          "beginLine":231,
          "endLine":231
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first occurrence of `x` in `v`","searching from left to right."],
      "name":"indexOfLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":231,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"indexOfRight",
        "loc":{
          "name":"MutList.flix",
          "beginLine":247,
          "endLine":247
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first occurrence of `x` in `v`","searching from right to left."],
      "name":"indexOfRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[Int32]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":247,
        "endLine":257
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"insert!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":580,
          "endLine":580
        }
      },
      "ann":[],
      "doc":["Inserts the given element `x` at the given position `i` in the given mutable list `v`.","","Shifts elements as necessary. Possibly expensive operation.","","If the given index `i` exceeds the length of the mutable list, the element is inserted at the last position."],
      "name":"insert!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":580,
        "endLine":589
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"isEmpty",
        "loc":{
          "name":"MutList.flix",
          "beginLine":86,
          "endLine":86
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given mutable list `v` is empty."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":86,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"iterator",
        "loc":{
          "name":"MutList.flix",
          "beginLine":804,
          "endLine":804
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l`.","","Modifying `l` while using an iterator has undefined behavior and is dangerous."],
      "name":"iterator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":804,
        "endLine":814
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"join",
        "loc":{
          "name":"MutList.flix",
          "beginLine":779,
          "endLine":779
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `v` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":779,
        "endLine":780
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"joinWith",
        "loc":{
          "name":"MutList.flix",
          "beginLine":786,
          "endLine":786
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `v` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":786,
        "endLine":797
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"last",
        "loc":{
          "name":"MutList.flix",
          "beginLine":216,
          "endLine":216
        }
      },
      "ann":[],
      "doc":["Optionally returns the last element of the given mutable list `v`.","","Returns `None` if the given mutable list `v` is empty."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":216,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"length",
        "loc":{
          "name":"MutList.flix",
          "beginLine":79,
          "endLine":79
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in the given mutable list `v`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":79,
        "endLine":81
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"map",
        "loc":{
          "name":"MutList.flix",
          "beginLine":357,
          "endLine":357
        }
      },
      "ann":[],
      "doc":["Apply `f` to every element in `v`.","","The result is a new mutable list."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":357,
        "endLine":377
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"mapWithIndex",
        "loc":{
          "name":"MutList.flix",
          "beginLine":382,
          "endLine":382
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `v` along with that element's index."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":382,
        "endLine":402
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"maximum",
        "loc":{
          "name":"MutList.flix",
          "beginLine":116,
          "endLine":116
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `v` according to the `Order` on `a`.","","Returns `None` if `v` is empty."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":116,
        "endLine":117
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"maximumBy",
        "loc":{
          "name":"MutList.flix",
          "beginLine":124,
          "endLine":124
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `v` according to the given comparator `cmp`.","","Returns `None` if `v` is empty."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":124,
        "endLine":125
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"memberOf",
        "loc":{
          "name":"MutList.flix",
          "beginLine":92,
          "endLine":92
        }
      },
      "ann":[],
      "doc":["Returns `true` if the given element `x` is a member of the given mutable list `v`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":92,
        "endLine":93
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"minimum",
        "loc":{
          "name":"MutList.flix",
          "beginLine":100,
          "endLine":100
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `v` according to the `Order` on `a`.","","Returns `None` if `v` is empty."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":100,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"minimumBy",
        "loc":{
          "name":"MutList.flix",
          "beginLine":108,
          "endLine":108
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `v` according to the given comparator `cmp`.","","Returns `None` if `v` is empty."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":108,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"new",
        "loc":{
          "name":"MutList.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":[],
      "doc":["Returns a new empty mutable list with a default capacity."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":51,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"nth",
        "loc":{
          "name":"MutList.flix",
          "beginLine":69,
          "endLine":69
        }
      },
      "ann":[],
      "doc":["Optionally returns the element at position `i` in the mutable list `v`."],
      "name":"nth",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":69,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"pop!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":549,
          "endLine":549
        }
      },
      "ann":[],
      "doc":["Optionally removes and returns the last element in the given mutable list `v`."],
      "name":"pop!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":549,
        "endLine":559
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"product",
        "loc":{
          "name":"MutList.flix",
          "beginLine":150,
          "endLine":150
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the mutable list `v`."],
      "name":"product",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":150,
        "endLine":154
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"productWith",
        "loc":{
          "name":"MutList.flix",
          "beginLine":159,
          "endLine":159
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the mutable list `v` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":159,
        "endLine":163
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"push!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":564,
          "endLine":564
        }
      },
      "ann":[],
      "doc":["Inserts the given element `x` at the end of the given mutable list `v`."],
      "name":"push!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":564,
        "endLine":571
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"pushAll!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":625,
          "endLine":625
        }
      },
      "ann":[],
      "doc":["Appends `m` to `v` i.e. inserts all elements from `m` into the end of `v`."],
      "name":"pushAll!",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"m[a]"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":625,
        "endLine":626
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"range",
        "loc":{
          "name":"MutList.flix",
          "beginLine":59,
          "endLine":59
        }
      },
      "ann":[],
      "doc":["Returns a mutable list of all integers between `b` (inclusive) and `e` (exclusive).","","Returns an empty mutable list if `b >= e`."],
      "name":"range",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"MutList[Int32, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":59,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"reduceLeft",
        "loc":{
          "name":"MutList.flix",
          "beginLine":508,
          "endLine":508
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `v` going from left to right until a single value `v` is obtained. Returns `Some(v)`.","","Returns `None` if `v` is empty."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":508,
        "endLine":512
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"reduceRight",
        "loc":{
          "name":"MutList.flix",
          "beginLine":519,
          "endLine":519
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `v` going from right to left until a single value `v` is obtained. Returns `Some(v)`.","","Returns `None` if `v` is empty."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":519,
        "endLine":523
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"remove!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":598,
          "endLine":598
        }
      },
      "ann":[],
      "doc":["Removes the element at the given position `i` in the given mutable list `v`.","","Shifts elements as necessary. Possibly expensive operation.","","If the given index `i` exceeds the length of the mutable list, no element is removed."],
      "name":"remove!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":598,
        "endLine":620
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"replace!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":649,
          "endLine":649
        }
      },
      "ann":[],
      "doc":["Replaces all occurrences of the `from` with `to` in the given mutable list `v`."],
      "name":"replace!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":649,
        "endLine":650
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"reserve!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":724,
          "endLine":724
        }
      },
      "ann":[],
      "doc":["Increases the capacity of the given mutable list `v` by at least `n`.","","That is, after the call, the mutable list is guaranteed to have space for at least `n` additional elements.","","The content of the mutable list is unchanged."],
      "name":"reserve!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":724,
        "endLine":726
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"retain!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":637,
          "endLine":637
        }
      },
      "ann":[],
      "doc":["Removes all elements from the given mutable list `v` that do not satisfy the given predicate `f`."],
      "name":"retain!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":637,
        "endLine":644
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"reverse!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":655,
          "endLine":655
        }
      },
      "ann":[],
      "doc":["Reverses the order of the elements in the given mutable list `v`."],
      "name":"reverse!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":655,
        "endLine":671
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sameElements",
        "loc":{
          "name":"MutList.flix",
          "beginLine":758,
          "endLine":758
        }
      },
      "ann":[],
      "doc":["Returns `true` if the mutable lists `v1` and `v2` have the same elements in the same order, i.e. are structurally equal."],
      "name":"sameElements",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v1",
        "tpe":"MutList[a, r1]"
      },{
        "name":"v2",
        "tpe":"MutList[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":758,
        "endLine":773
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"scan",
        "loc":{
          "name":"MutList.flix",
          "beginLine":305,
          "endLine":305
        }
      },
      "ann":[],
      "doc":["Alias for `scanLeft`."],
      "name":"scan",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":305,
        "endLine":306
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"scanLeft",
        "loc":{
          "name":"MutList.flix",
          "beginLine":311,
          "endLine":311
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `v` going left to right."],
      "name":"scanLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":311,
        "endLine":328
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"scanRight",
        "loc":{
          "name":"MutList.flix",
          "beginLine":333,
          "endLine":333
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `v` going right to left."],
      "name":"scanRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[b, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":333,
        "endLine":350
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"shrink!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":694,
          "endLine":694
        }
      },
      "ann":[],
      "doc":["Shrinks the given mutable list `v` to its actual size."],
      "name":"shrink!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":694,
        "endLine":695
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"shuffle",
        "loc":{
          "name":"MutList.flix",
          "beginLine":947,
          "endLine":947
        }
      },
      "ann":[],
      "doc":["Shuffles `v` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"v",
        "tpe":"MutList[a, r1]"
      }],
      "tpe":"MutList[a, r1]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":947,
        "endLine":949
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sort",
        "loc":{
          "name":"MutList.flix",
          "beginLine":883,
          "endLine":883
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of MutList `v`, where the elements are ordered from low to high according to","their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":883,
        "endLine":884
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sort!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":918,
          "endLine":918
        }
      },
      "ann":[],
      "doc":["Sort MutList `v` so that elements are ordered from low to high according to their `Order` instance.","The MutList is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sort!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":918,
        "endLine":919
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sortBy",
        "loc":{
          "name":"MutList.flix",
          "beginLine":894,
          "endLine":894
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of MutList `v`, where the elements are ordered from low to high according to","the `Order` instance for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":894,
        "endLine":895
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sortBy!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":929,
          "endLine":929
        }
      },
      "ann":[],
      "doc":["Sort MutList `v` so that elements are ordered from low to high according to the `Order` instance for","the values obtained by applying `f` to each element. The MutList is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sortBy!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MutList.flix",
        "beginLine":929,
        "endLine":930
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sortWith",
        "loc":{
          "name":"MutList.flix",
          "beginLine":905,
          "endLine":905
        }
      },
      "ann":[],
      "doc":["Returns a sorted copy of MutList `v`, where the elements are ordered from low to high according to","the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":905,
        "endLine":908
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sortWith!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":940,
          "endLine":940
        }
      },
      "ann":[],
      "doc":["Sort MutList `v` so that elements are ordered from low to high according to the comparison function `cmp`.","The MutList is mutated in-place.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `v`.","","The sort implementation is a Quicksort."],
      "name":"sortWith!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":940,
        "endLine":942
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sum",
        "loc":{
          "name":"MutList.flix",
          "beginLine":138,
          "endLine":138
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the MutList `v`."],
      "name":"sum",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":138,
        "endLine":139
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"sumWith",
        "loc":{
          "name":"MutList.flix",
          "beginLine":144,
          "endLine":144
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the MutList `v` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":144,
        "endLine":145
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"toArray",
        "loc":{
          "name":"MutList.flix",
          "beginLine":737,
          "endLine":737
        }
      },
      "ann":[],
      "doc":["Returns `v` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"v",
        "tpe":"MutList[a, r2]"
      }],
      "tpe":"Array[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":737,
        "endLine":739
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"toChain",
        "loc":{
          "name":"MutList.flix",
          "beginLine":744,
          "endLine":744
        }
      },
      "ann":[],
      "doc":["Returns the mutable list `xs` as a chain."],
      "name":"toChain",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"xs",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Chain[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":744,
        "endLine":745
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"toList",
        "loc":{
          "name":"MutList.flix",
          "beginLine":731,
          "endLine":731
        }
      },
      "ann":[],
      "doc":["Returns `v` as an immutable list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":731,
        "endLine":732
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"toMutDeque",
        "loc":{
          "name":"MutList.flix",
          "beginLine":750,
          "endLine":750
        }
      },
      "ann":[],
      "doc":["Returns `v` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"v",
        "tpe":"MutList[a, r2]"
      }],
      "tpe":"MutDeque[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":750,
        "endLine":753
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"transform!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":407,
          "endLine":407
        }
      },
      "ann":[],
      "doc":["Apply `f` to every element in `v`."],
      "name":"transform!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> a"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":407,
        "endLine":419
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"transformWithIndex!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":424,
          "endLine":424
        }
      },
      "ann":[],
      "doc":["Apply `f` to every element in `v` along with that element's index."],
      "name":"transformWithIndex!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> a)"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":424,
        "endLine":436
      }
    },{
      "sym":{
        "namespace":["MutList"],
        "name":"truncate!",
        "loc":{
          "name":"MutList.flix",
          "beginLine":704,
          "endLine":704
        }
      },
      "ann":[],
      "doc":["Truncates the given mutable list `v` to the given length `l`.","","That is, after the operation, the mutable list has length at most `l`.","","If the given length `l` is negative, all elements are removed."],
      "name":"truncate!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Int32"
      },{
        "name":"v",
        "tpe":"MutList[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutList.flix",
        "beginLine":704,
        "endLine":715
      }
    }],
    "BigInt":[{
      "sym":{
        "namespace":["BigInt"],
        "name":"abs",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":32,
          "endLine":32
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":32,
        "endLine":32
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToFloat32",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":304,
          "endLine":304
        }
      },
      "ann":[],
      "doc":["Convert `x` to a `Float32`.","","Returns `x` clamped within the Float32 range `minimum` to `maximum`."],
      "name":"clampToFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Float32"
      },{
        "name":"maximum",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":304,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToFloat64",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":325,
          "endLine":325
        }
      },
      "ann":[],
      "doc":["Convert `x` to a `Float64`.","","Returns `x` clamped within the Float64 range `minimum` to `maximum`."],
      "name":"clampToFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Float64"
      },{
        "name":"maximum",
        "tpe":"Float64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":325,
        "endLine":339
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToInt16",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":256,
          "endLine":256
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int16`.","","Returns `x` clamped within the Int16 range `minimum` to `maximum`."],
      "name":"clampToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Int16"
      },{
        "name":"maximum",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":256,
        "endLine":265
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToInt32",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":272,
          "endLine":272
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int32`.","","Returns `x` clamped within the Int32 range `minimum` to `maximum`."],
      "name":"clampToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Int32"
      },{
        "name":"maximum",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":272,
        "endLine":281
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToInt64",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":288,
          "endLine":288
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int64`.","","Returns `x` clamped within the Int64 range `minimum` to `maximum`."],
      "name":"clampToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Int64"
      },{
        "name":"maximum",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":288,
        "endLine":297
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clampToInt8",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":240,
          "endLine":240
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `minimum` to `maximum`."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"minimum",
        "tpe":"Int8"
      },{
        "name":"maximum",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":240,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"clearBit",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":74,
          "endLine":74
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` cleared (to 0)."],
      "name":"clearBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"position",
        "tpe":"Int32"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":74,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"compare",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":42,
          "endLine":42
        }
      },
      "ann":[],
      "doc":["Returns `1` if `x > y`, `-1` if `x < y`, and `0` if `x = y`."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"y",
        "tpe":"BigInt"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":42,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"dist",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":37,
          "endLine":37
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"y",
        "tpe":"BigInt"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":37,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"flipBit",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":79,
          "endLine":79
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` flipped."],
      "name":"flipBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"position",
        "tpe":"Int32"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":79,
        "endLine":79
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"fromString",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":97,
          "endLine":97
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an BigInt, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[BigInt]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":97,
        "endLine":103
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"gcd",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":64,
          "endLine":64
        }
      },
      "ann":[],
      "doc":["Returns the greatest common non-negative divisor of `x` and `y`."],
      "name":"gcd",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"y",
        "tpe":"BigInt"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":64,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"getBit",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":[],
      "doc":["Returns the bit of `x` at `position` (either 0 or 1).","","The bits of x have positions: 0 (rightmost bit), 1, 2, ..."],
      "name":"getBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"position",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":58,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"log2",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":84,
          "endLine":84
        }
      },
      "ann":[],
      "doc":["Returns the integer binary logarithm of `x`."],
      "name":"log2",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":84,
        "endLine":86
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"max",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":27,
          "endLine":27
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"y",
        "tpe":"BigInt"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":27,
        "endLine":27
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"min",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"y",
        "tpe":"BigInt"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":22,
        "endLine":22
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"setBit",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":69,
          "endLine":69
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` set (to 1)."],
      "name":"setBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      },{
        "name":"position",
        "tpe":"Int32"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":69,
        "endLine":69
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"signum",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":[],
      "doc":["Returns `1` if `x > 0`, `-1` if `x < 0`, and `0` if `x = 0`."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":51,
        "endLine":51
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"toBigDecimal",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":219,
          "endLine":219
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `BigDecimal`."],
      "name":"toBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":219,
        "endLine":221
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"toString",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":91,
          "endLine":91
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":91,
        "endLine":91
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToFloat32",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":179,
          "endLine":179
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Float32]`.","","Returns `Some(x as Float32)` if the numeric value of `x` is within the range of Float32.","","Warning: even if `x` is in the range of Float32 it may lose precision.","","Returns `None` if the numeric value of `x` is outside the range of Float32","(i.e. 1.4E-45 to 3.4028235E38)."],
      "name":"tryToFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Float32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":179,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToFloat64",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":202,
          "endLine":202
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Float64]`.","","Returns `Some(x as Float64)` if the numeric value of `x` is within the range of Float32.","","Warning: even if `x` is in the range of Float64 it may lose precision.","","Returns `None` if the numeric value of `x` is outside the range of Float64","(i.e 4.9E-324 to 1.7976931348623157E308)."],
      "name":"tryToFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Float64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":202,
        "endLine":213
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToInt16",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":129,
          "endLine":129
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767)."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":129,
        "endLine":135
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToInt32",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":145,
          "endLine":145
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int32]`.","","Returns `Some(x as Int32)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int32","(i.e. -2147483648 to 2147483647)."],
      "name":"tryToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":145,
        "endLine":151
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToInt64",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":161,
          "endLine":161
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int64]`.","","Returns `Some(x as Int64)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int64","(i.e. -9223372036854775808 to 9223372036854775807)."],
      "name":"tryToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Int64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":161,
        "endLine":167
      }
    },{
      "sym":{
        "namespace":["BigInt"],
        "name":"tryToInt8",
        "loc":{
          "name":"BigInt.flix",
          "beginLine":113,
          "endLine":113
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127)."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigInt"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigInt.flix",
        "beginLine":113,
        "endLine":119
      }
    }],
    "Option":[{
      "sym":{
        "namespace":["Option"],
        "name":"ap",
        "loc":{
          "name":"Option.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["If both arguments are `Some`, return a `Some` containing the result of applying the function inside","`f` to the value inside `x`. Otherwise return `None`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Option[a -> b & ef \\ ef']"
      },{
        "name":"x",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":230,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"count",
        "loc":{
          "name":"Option.flix",
          "beginLine":250,
          "endLine":250
        }
      },
      "ann":[],
      "doc":["Returns `1` if `o` is `Some(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `0`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":250,
        "endLine":253
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"enumerator",
        "loc":{
          "name":"Option.flix",
          "beginLine":580,
          "endLine":580
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `o` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":580,
        "endLine":581
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"exists",
        "loc":{
          "name":"Option.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns `true` if `o` is `Some(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `false`."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":190,
        "endLine":193
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"filter",
        "loc":{
          "name":"Option.flix",
          "beginLine":208,
          "endLine":208
        }
      },
      "ann":[],
      "doc":["Returns `o` if `o` is `Some(v)` and the predicate `f(v)` is true. Otherwise returns `None`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":208,
        "endLine":211
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"find",
        "loc":{
          "name":"Option.flix",
          "beginLine":284,
          "endLine":284
        }
      },
      "ann":[],
      "doc":["Returns `o` if `o` is `Some(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `None`.","","The function `f` must be pure."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":284,
        "endLine":287
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"flatMap",
        "loc":{
          "name":"Option.flix",
          "beginLine":242,
          "endLine":242
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `o` is `Some(v)`. Otherwise returns `None`."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":242,
        "endLine":245
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"flatten",
        "loc":{
          "name":"Option.flix",
          "beginLine":292,
          "endLine":292
        }
      },
      "ann":[],
      "doc":["Returns `v` if `o` is `Some(v)`. Otherwise returns `None`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[Option[a]]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":292,
        "endLine":295
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"fold",
        "loc":{
          "name":"Option.flix",
          "beginLine":300,
          "endLine":300
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `o`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":300,
        "endLine":300
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldLeft",
        "loc":{
          "name":"Option.flix",
          "beginLine":305,
          "endLine":305
        }
      },
      "ann":[],
      "doc":["Returns `f(z, v)` if `o` is `Some(v)`. Otherwise returns `z`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":305,
        "endLine":308
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldLeftM",
        "loc":{
          "name":"Option.flix",
          "beginLine":382,
          "endLine":382
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to a start value `s` and the elements in `l`","going from left to right.","","If at any step applying `f` fails (i.e. it produces a `None` value) the traversal","of `l` is short-circuited and `None` is returned.","","If `f` is successfully applied to all the elements in `l` the result is of the form:","`Some(f(...f(f(s, x1), x2)..., xn))`."],
      "name":"foldLeftM",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> Option[b] & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":382,
        "endLine":388
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldMap",
        "loc":{
          "name":"Option.flix",
          "beginLine":331,
          "endLine":331
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":331,
        "endLine":332
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldRight",
        "loc":{
          "name":"Option.flix",
          "beginLine":313,
          "endLine":313
        }
      },
      "ann":[],
      "doc":["Returns `f(v, z)` if `o` is `Some(v)`. Otherwise returns `z`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"o",
        "tpe":"Option[a]"
      },{
        "name":"z",
        "tpe":"b"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":313,
        "endLine":316
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldRightM",
        "loc":{
          "name":"Option.flix",
          "beginLine":400,
          "endLine":400
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to a start value `s` and the elements in `l`","going from right to left.","","If at any step applying `f` fails (i.e. it produces a `None` value) the traversal","of `l` is short-circuited and `None` is returned.","","If `f` is successfully applied to al elements in `l` the result is of the form:","`Some(f(x1, ...f(xn-1, f(xn, s))...))`."],
      "name":"foldRightM",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> Option[b] & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":400,
        "endLine":408
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Option.flix",
          "beginLine":323,
          "endLine":323
        }
      },
      "ann":[],
      "doc":["Returns `f(v, z)` if `o` is `Some(v)`. Otherwise returns `z`.","","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"o",
        "tpe":"Option[a]"
      },{
        "name":"z",
        "tpe":"b"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":323,
        "endLine":326
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"forAll",
        "loc":{
          "name":"Option.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Returns `true` if `o` is `Some(v)` and the predicate `f(v)` evaluates to `true` or if `o` is `None`.","","Otherwise returns `false`."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":200,
        "endLine":203
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"forEach",
        "loc":{
          "name":"Option.flix",
          "beginLine":492,
          "endLine":492
        }
      },
      "ann":[],
      "doc":["Applies `f` to `v` if `o` is `Some(v)`. Otherwise does nothing."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":492,
        "endLine":495
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"getWithDefault",
        "loc":{
          "name":"Option.flix",
          "beginLine":166,
          "endLine":166
        }
      },
      "ann":[],
      "doc":["Returns `v` if `o` is `Some(v).` Otherwise returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"a"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":166,
        "endLine":169
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"isEmpty",
        "loc":{
          "name":"Option.flix",
          "beginLine":158,
          "endLine":158
        }
      },
      "ann":[],
      "doc":["Returns `true` iff `o` is `None`."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":158,
        "endLine":161
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"iterator",
        "loc":{
          "name":"Option.flix",
          "beginLine":572,
          "endLine":572
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `o` with 1 element or an empty iterator if `o` is `None`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":572,
        "endLine":575
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift10",
        "loc":{
          "name":"Option.flix",
          "beginLine":566,
          "endLine":566
        }
      },
      "ann":[],
      "doc":["Applies the 10-ary function `f` to the values in `o1`, `o2`, ... `o10`.","","Returns `None` if any of `o1`, `o2`, ... `o10` are `None`."],
      "name":"lift10",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"t10",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> (t10 -> u & ef \\ ef')))))))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      },{
        "name":"o6",
        "tpe":"Option[t6]"
      },{
        "name":"o7",
        "tpe":"Option[t7]"
      },{
        "name":"o8",
        "tpe":"Option[t8]"
      },{
        "name":"o9",
        "tpe":"Option[t9]"
      },{
        "name":"o10",
        "tpe":"Option[t10]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":566,
        "endLine":567
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift2",
        "loc":{
          "name":"Option.flix",
          "beginLine":502,
          "endLine":502
        }
      },
      "ann":[],
      "doc":["Applies the binary function `f` to the values in `o1` and `o2`.","","Returns `None` if either `o1` or `o2` are `None`."],
      "name":"lift2",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> u & ef \\ ef')"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":502,
        "endLine":503
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift3",
        "loc":{
          "name":"Option.flix",
          "beginLine":510,
          "endLine":510
        }
      },
      "ann":[],
      "doc":["Applies the ternary function `f` to the values in `o1`, `o2` and `o3`.","","Returns `None` if any of `o1`, `o2` and `o3` are `None`."],
      "name":"lift3",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> u & ef \\ ef'))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":510,
        "endLine":511
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift4",
        "loc":{
          "name":"Option.flix",
          "beginLine":518,
          "endLine":518
        }
      },
      "ann":[],
      "doc":["Applies the 4-ary function `f` to the values in `o1`, `o2`, `o3` and `o4`.","","Returns `None` if any of `o1`, `o2`, `o3` and `o4` are `None`."],
      "name":"lift4",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> u & ef \\ ef')))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":518,
        "endLine":519
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift5",
        "loc":{
          "name":"Option.flix",
          "beginLine":526,
          "endLine":526
        }
      },
      "ann":[],
      "doc":["Applies the 5-ary function `f` to the values in `o1`, `o2`, ... `o5`.","","Returns `None` if any of `o1`, `o2`, ... `o5` are `None`."],
      "name":"lift5",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> u & ef \\ ef'))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":526,
        "endLine":527
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift6",
        "loc":{
          "name":"Option.flix",
          "beginLine":534,
          "endLine":534
        }
      },
      "ann":[],
      "doc":["Applies the 6-ary function `f` to the values in `o1`, `o2`, ... `o6`.","","Returns `None` if any of `o1`, `o2`, ... `o6` are `None`."],
      "name":"lift6",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> u & ef \\ ef')))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      },{
        "name":"o6",
        "tpe":"Option[t6]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":534,
        "endLine":535
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift7",
        "loc":{
          "name":"Option.flix",
          "beginLine":542,
          "endLine":542
        }
      },
      "ann":[],
      "doc":["Applies the 7-ary function `f` to the values in `o1`, `o2`, ... `o7`.","","Returns `None` if any of `o1`, `o2`, ... `o7` are `None`."],
      "name":"lift7",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> u & ef \\ ef'))))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      },{
        "name":"o6",
        "tpe":"Option[t6]"
      },{
        "name":"o7",
        "tpe":"Option[t7]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":542,
        "endLine":543
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift8",
        "loc":{
          "name":"Option.flix",
          "beginLine":550,
          "endLine":550
        }
      },
      "ann":[],
      "doc":["Applies the 8-ary function `f` to the values in `o1`, `o2`, ... `o8`.","","Returns `None` if any of `o1`, `o2`, ... `o8` are `None`."],
      "name":"lift8",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> u & ef \\ ef')))))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      },{
        "name":"o6",
        "tpe":"Option[t6]"
      },{
        "name":"o7",
        "tpe":"Option[t7]"
      },{
        "name":"o8",
        "tpe":"Option[t8]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":550,
        "endLine":551
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"lift9",
        "loc":{
          "name":"Option.flix",
          "beginLine":558,
          "endLine":558
        }
      },
      "ann":[],
      "doc":["Applies the 9-ary function `f` to the values in `o1`, `o2`, ... `o9`.","","Returns `None` if any of `o1`, `o2`, ... `o9` are `None`."],
      "name":"lift9",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> u & ef \\ ef'))))))))"
      },{
        "name":"o1",
        "tpe":"Option[t1]"
      },{
        "name":"o2",
        "tpe":"Option[t2]"
      },{
        "name":"o3",
        "tpe":"Option[t3]"
      },{
        "name":"o4",
        "tpe":"Option[t4]"
      },{
        "name":"o5",
        "tpe":"Option[t5]"
      },{
        "name":"o6",
        "tpe":"Option[t6]"
      },{
        "name":"o7",
        "tpe":"Option[t7]"
      },{
        "name":"o8",
        "tpe":"Option[t8]"
      },{
        "name":"o9",
        "tpe":"Option[t9]"
      }],
      "tpe":"Option[u]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":558,
        "endLine":559
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"map",
        "loc":{
          "name":"Option.flix",
          "beginLine":216,
          "endLine":216
        }
      },
      "ann":[],
      "doc":["Returns `Some(f(v))` if `o` is `Some(v)`. Otherwise returns `None`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":216,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"point",
        "loc":{
          "name":"Option.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)`."],
      "name":"point",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":224,
        "endLine":224
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"product",
        "loc":{
          "name":"Option.flix",
          "beginLine":270,
          "endLine":270
        }
      },
      "ann":[],
      "doc":["Returns `v` if `o` is `Some(v)` else `0`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"o",
        "tpe":"Option[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":270,
        "endLine":271
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"productWith",
        "loc":{
          "name":"Option.flix",
          "beginLine":276,
          "endLine":276
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `o` is `Some(v)` else `0`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":276,
        "endLine":277
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"replace",
        "loc":{
          "name":"Option.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns `Some(to)` if `o` is `Some(from)`. Otherwise returns `o`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":182,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"sequence",
        "loc":{
          "name":"Option.flix",
          "beginLine":337,
          "endLine":337
        }
      },
      "ann":[],
      "doc":["Returns `Some(v1 :: v2 :: ... :: vn)` if each of `xs_i` is `Some(v_i)`. Otherwise returns `None`."],
      "name":"sequence",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[Option[a]]"
      }],
      "tpe":"Option[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":337,
        "endLine":343
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"sum",
        "loc":{
          "name":"Option.flix",
          "beginLine":258,
          "endLine":258
        }
      },
      "ann":[],
      "doc":["Returns `v` if `o` is `Some(v)` else `0`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"o",
        "tpe":"Option[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":258,
        "endLine":259
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"sumWith",
        "loc":{
          "name":"Option.flix",
          "beginLine":264,
          "endLine":264
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `o` is `Some(v)` else `0`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":264,
        "endLine":265
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toErr",
        "loc":{
          "name":"Option.flix",
          "beginLine":451,
          "endLine":451
        }
      },
      "ann":[],
      "doc":["Returns the Option value `Err(e)` if `o` is `Some(e)`. Otherwise returns `Ok(d)`."],
      "name":"toErr",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"t"
      },{
        "name":"o",
        "tpe":"Option[e]"
      }],
      "tpe":"Result[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":451,
        "endLine":454
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toFailure",
        "loc":{
          "name":"Option.flix",
          "beginLine":467,
          "endLine":467
        }
      },
      "ann":[],
      "doc":["Returns `e` into Validation's `Failure` if `o` is `Some(e)`. Otherwise returns `Success(d)`."],
      "name":"toFailure",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"t"
      },{
        "name":"o",
        "tpe":"Option[e]"
      }],
      "tpe":"Validation[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":467,
        "endLine":470
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toList",
        "loc":{
          "name":"Option.flix",
          "beginLine":413,
          "endLine":413
        }
      },
      "ann":[],
      "doc":["Returns a one-element list of the value `v` if `o` is `Some(v)`. Otherwise returns the empty list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":413,
        "endLine":416
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toMap",
        "loc":{
          "name":"Option.flix",
          "beginLine":429,
          "endLine":429
        }
      },
      "ann":[],
      "doc":["Returns a singleton map with the mapping `k -> v` if `o` is `Some((k, v))`. Otherwise returns the empty map."],
      "name":"toMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[(k, v)]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":429,
        "endLine":432
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toMapWith",
        "loc":{
          "name":"Option.flix",
          "beginLine":437,
          "endLine":437
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `s` as keys and `f` applied as values."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"s",
        "tpe":"Option[a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":437,
        "endLine":438
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toOk",
        "loc":{
          "name":"Option.flix",
          "beginLine":443,
          "endLine":443
        }
      },
      "ann":[],
      "doc":["Returns the Option value `Ok(v)` if `o` is `Some(v)`. Otherwise returns `Err(e)`."],
      "name":"toOk",
      "tparams":[{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"e",
        "tpe":"e"
      },{
        "name":"o",
        "tpe":"Option[t]"
      }],
      "tpe":"Result[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":443,
        "endLine":446
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toSet",
        "loc":{
          "name":"Option.flix",
          "beginLine":421,
          "endLine":421
        }
      },
      "ann":[],
      "doc":["Returns a one-element set of the value `v` if `o` is `Some(v)`. Otherwise returns the empty set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Option.flix",
        "beginLine":421,
        "endLine":424
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"toSuccess",
        "loc":{
          "name":"Option.flix",
          "beginLine":459,
          "endLine":459
        }
      },
      "ann":[],
      "doc":["Returns the Validation value `Success(v)` if `o` is `Some(v)`. Otherwise lifts `e` into Validation's `Failure`."],
      "name":"toSuccess",
      "tparams":[{
        "name":"e",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"e",
        "tpe":"e"
      },{
        "name":"o",
        "tpe":"Option[t]"
      }],
      "tpe":"Validation[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":459,
        "endLine":462
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"traverse",
        "loc":{
          "name":"Option.flix",
          "beginLine":348,
          "endLine":348
        }
      },
      "ann":[],
      "doc":["Returns `Some(v1 :: v2 :: ... v :: vn)` if each of `f(l_i)` is `Some(v_i)`. Otherwise returns `None`."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[List[b]]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":348,
        "endLine":356
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"traverseX",
        "loc":{
          "name":"Option.flix",
          "beginLine":364,
          "endLine":364
        }
      },
      "ann":[],
      "doc":["Returns `Some()` if each of `f(l_i)` is `Some(_)`. Otherwise returns `None`.","","This function is the \"forgetful\" version of `traverse`, use it when the you want the effect","of applying `f` to each element but do not care about collecting the results."],
      "name":"traverseX",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[Unit]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":364,
        "endLine":370
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"unzip",
        "loc":{
          "name":"Option.flix",
          "beginLine":484,
          "endLine":484
        }
      },
      "ann":[],
      "doc":["Returns `(Some(v1), Some(v2))` if `o` is `Some((v1, v2))`. Otherwise returns `(None, None)`."],
      "name":"unzip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o",
        "tpe":"Option[(a, b)]"
      }],
      "tpe":"(Option[a], Option[b])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":484,
        "endLine":487
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"withDefault",
        "loc":{
          "name":"Option.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":[],
      "doc":["Returns `o` if it is `Some(v)`. Otherwise returns `default`."],
      "name":"withDefault",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"default",
        "tpe":"{ default = Option[a] }"
      },{
        "name":"o",
        "tpe":"Option[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":174,
        "endLine":177
      }
    },{
      "sym":{
        "namespace":["Option"],
        "name":"zip",
        "loc":{
          "name":"Option.flix",
          "beginLine":475,
          "endLine":475
        }
      },
      "ann":[],
      "doc":["Returns `Some((v1, v2))` if `o1` is `Some(v1)` and `o2` is `Some(v2)`. Otherwise returns `None`."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"o1",
        "tpe":"Option[a]"
      },{
        "name":"o2",
        "tpe":"Option[b]"
      }],
      "tpe":"Option[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Option.flix",
        "beginLine":475,
        "endLine":479
      }
    }],
    "Benchmark":[{
      "sym":{
        "namespace":["Benchmark"],
        "name":"defBenchmark",
        "loc":{
          "name":"Benchmark.flix",
          "beginLine":48,
          "endLine":48
        }
      },
      "ann":["@Experimental"],
      "doc":["A smart constructor for a benchmark."],
      "name":"defBenchmark",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"name",
        "tpe":"String"
      },{
        "name":"f",
        "tpe":"Unit -> a & ef \\ ef'"
      }],
      "tpe":"Benchmark",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Benchmark.flix",
        "beginLine":48,
        "endLine":53
      }
    },{
      "sym":{
        "namespace":["Benchmark"],
        "name":"runWithBudget",
        "loc":{
          "name":"Benchmark.flix",
          "beginLine":64,
          "endLine":64
        }
      },
      "ann":["@Experimental"],
      "doc":["Runs all benchmarks in `bs`. Attempts to spend no more than `budget` nanoseconds.","One seconds is `1_000_000_000i64`."],
      "name":"runWithBudget",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"bs",
        "tpe":"Array[Benchmark, r]"
      },{
        "name":"budget",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Benchmark.flix",
        "beginLine":64,
        "endLine":82
      }
    }],
    "Time/Duration":[{
      "sym":{
        "namespace":["Time","Duration"],
        "name":"fromMicroSeconds",
        "loc":{
          "name":"Time/Duration.flix",
          "beginLine":32,
          "endLine":32
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a duration of `n` micro seconds."],
      "name":"fromMicroSeconds",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"Duration",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Duration.flix",
        "beginLine":32,
        "endLine":32
      }
    },{
      "sym":{
        "namespace":["Time","Duration"],
        "name":"fromMilliSeconds",
        "loc":{
          "name":"Time/Duration.flix",
          "beginLine":38,
          "endLine":38
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a duration of `n` milli seconds."],
      "name":"fromMilliSeconds",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"Duration",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Duration.flix",
        "beginLine":38,
        "endLine":38
      }
    },{
      "sym":{
        "namespace":["Time","Duration"],
        "name":"fromNanoSeconds",
        "loc":{
          "name":"Time/Duration.flix",
          "beginLine":26,
          "endLine":26
        }
      },
      "ann":["@Experimental"],
      "doc":[],
      "name":"fromNanoSeconds",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"Duration",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Duration.flix",
        "beginLine":26,
        "endLine":26
      }
    },{
      "sym":{
        "namespace":["Time","Duration"],
        "name":"fromSeconds",
        "loc":{
          "name":"Time/Duration.flix",
          "beginLine":44,
          "endLine":44
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a duration of `n` seconds."],
      "name":"fromSeconds",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      }],
      "tpe":"Duration",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Time/Duration.flix",
        "beginLine":44,
        "endLine":44
      }
    }],
    "System/StdErr":[{
      "sym":{
        "namespace":["System","StdErr"],
        "name":"flush",
        "loc":{
          "name":"System.flix",
          "beginLine":134,
          "endLine":134
        }
      },
      "ann":[],
      "doc":["Flushes the standard error stream."],
      "name":"flush",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":134,
        "endLine":136
      }
    },{
      "sym":{
        "namespace":["System","StdErr"],
        "name":"newLine",
        "loc":{
          "name":"System.flix",
          "beginLine":127,
          "endLine":127
        }
      },
      "ann":[],
      "doc":["Prints a newline to the standard error stream."],
      "name":"newLine",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":127,
        "endLine":129
      }
    },{
      "sym":{
        "namespace":["System","StdErr"],
        "name":"print",
        "loc":{
          "name":"System.flix",
          "beginLine":113,
          "endLine":113
        }
      },
      "ann":[],
      "doc":["Prints the given string `s` to the standard error stream."],
      "name":"print",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":113,
        "endLine":115
      }
    },{
      "sym":{
        "namespace":["System","StdErr"],
        "name":"println",
        "loc":{
          "name":"System.flix",
          "beginLine":120,
          "endLine":120
        }
      },
      "ann":[],
      "doc":["Prints the given string `s` and a newline to the standard error stream."],
      "name":"println",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Unit",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"System.flix",
        "beginLine":120,
        "endLine":122
      }
    }],
    "Float32":[{
      "sym":{
        "namespace":["Float32"],
        "name":"abs",
        "loc":{
          "name":"Float32.flix",
          "beginLine":304,
          "endLine":304
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":304,
        "endLine":306
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"ceil",
        "loc":{
          "name":"Float32.flix",
          "beginLine":311,
          "endLine":311
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded up to a Float32 representing the nearest larger integer value."],
      "name":"ceil",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":311,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"clampToInt16",
        "loc":{
          "name":"Float32.flix",
          "beginLine":255,
          "endLine":255
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int16`.","","Returns `x` clamped within the Int16 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int16 risks masking it."],
      "name":"clampToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"minimum",
        "tpe":"Int16"
      },{
        "name":"maximum",
        "tpe":"Int16"
      },{
        "name":"nanValue",
        "tpe":"Int16"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":255,
        "endLine":263
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"clampToInt32",
        "loc":{
          "name":"Float32.flix",
          "beginLine":273,
          "endLine":273
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int32`.","","Returns `x` clamped within the Int32 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int32 risks masking it."],
      "name":"clampToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"minimum",
        "tpe":"Int32"
      },{
        "name":"maximum",
        "tpe":"Int32"
      },{
        "name":"nanValue",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":273,
        "endLine":281
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"clampToInt64",
        "loc":{
          "name":"Float32.flix",
          "beginLine":291,
          "endLine":291
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int64`.","","Returns `x` clamped within the Int64 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int64 risks masking it."],
      "name":"clampToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"minimum",
        "tpe":"Int64"
      },{
        "name":"maximum",
        "tpe":"Int64"
      },{
        "name":"nanValue",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":291,
        "endLine":299
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"clampToInt8",
        "loc":{
          "name":"Float32.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `minimum` to `maximum`.","","Warning: it is recommended to test `x` for NaN (not-a-number) before calling this","function. Relying on `nanValue` to convert NaN to a permissable Int8 risks masking it."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"minimum",
        "tpe":"Int8"
      },{
        "name":"maximum",
        "tpe":"Int8"
      },{
        "name":"nanValue",
        "tpe":"Int8"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":237,
        "endLine":245
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"floor",
        "loc":{
          "name":"Float32.flix",
          "beginLine":323,
          "endLine":323
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded down to a Float32 representing the nearest smaller integer value."],
      "name":"floor",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":323,
        "endLine":330
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"fromString",
        "loc":{
          "name":"Float32.flix",
          "beginLine":106,
          "endLine":106
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as a Float32, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Float32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":106,
        "endLine":112
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"isFinite",
        "loc":{
          "name":"Float32.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is a non-infinite and non-Nan `Float32` value."],
      "name":"isFinite",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":75,
        "endLine":75
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"isInfinite",
        "loc":{
          "name":"Float32.flix",
          "beginLine":80,
          "endLine":80
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is an infinite and non-Nan `Float32` value."],
      "name":"isInfinite",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":80,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"isNan",
        "loc":{
          "name":"Float32.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is the NaN value of type `Float32`."],
      "name":"isNan",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":85,
        "endLine":85
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"max",
        "loc":{
          "name":"Float32.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"y",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":95,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"maxExponent",
        "loc":{
          "name":"Float32.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the maximum exponent that a `Float32` may have."],
      "name":"maxExponent",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"maxValue",
        "loc":{
          "name":"Float32.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by a `Float32`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"min",
        "loc":{
          "name":"Float32.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      },{
        "name":"y",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":90,
        "endLine":90
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"minExponent",
        "loc":{
          "name":"Float32.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the minimum exponent that a `Float32` may have."],
      "name":"minExponent",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"minPositiveValue",
        "loc":{
          "name":"Float32.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":[],
      "doc":["Returns the minimum positive number representable by a `Float32`."],
      "name":"minPositiveValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":55,
        "endLine":55
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"minValue",
        "loc":{
          "name":"Float32.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by a `Float32`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"nan",
        "loc":{
          "name":"Float32.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Returns the NaN (not a number) value of type `Float32`."],
      "name":"nan",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":60,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"negativeInfinity",
        "loc":{
          "name":"Float32.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["Returns the negative infinity value of type `Float32`."],
      "name":"negativeInfinity",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":70,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"positiveInfinity",
        "loc":{
          "name":"Float32.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Returns the positive infinity value of type `Float32`."],
      "name":"positiveInfinity",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":65,
        "endLine":65
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"round",
        "loc":{
          "name":"Float32.flix",
          "beginLine":338,
          "endLine":338
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded to a Float32 representing the nearest integer value.","","The rounding may be upwards or downwards. If the rounding up and rounding down are equally","close, `x` will be rounded to an even value (i.e. `round(0.5f32) == 0.0f32`)."],
      "name":"round",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":338,
        "endLine":345
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"size",
        "loc":{
          "name":"Float32.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent a `Float32`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"toFloat64",
        "loc":{
          "name":"Float32.flix",
          "beginLine":201,
          "endLine":201
        }
      },
      "ann":[],
      "doc":["Convert `x` to an Float64."],
      "name":"toFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":201,
        "endLine":204
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"toString",
        "loc":{
          "name":"Float32.flix",
          "beginLine":100,
          "endLine":100
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":100,
        "endLine":100
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToBigDecimal",
        "loc":{
          "name":"Float32.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[BigDecimal]`.","","Returns `Some(x as BigDecimal)` if the numeric value of `x` is representable","as a BigDecimal value.","","If `x` is NaN or infinity return `None`."],
      "name":"tryToBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[BigDecimal]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":214,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToBigInt",
        "loc":{
          "name":"Float32.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[BigInt]`.","","Returns `Some(x as BigInt)` if the numeric value of `x` is representable as a BigInt.","","Returns `None` if the value of `x` is NaN or infinity."],
      "name":"tryToBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[BigInt]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":195,
        "endLine":196
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToInt16",
        "loc":{
          "name":"Float32.flix",
          "beginLine":140,
          "endLine":140
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` is within the range of Int16,","rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767), or it is NaN or infinity."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":140,
        "endLine":146
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToInt32",
        "loc":{
          "name":"Float32.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int32]`.","","Returns `Some(x as Int32)` if the numeric value of `x` is within the range of Int32,","rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int32","(i.e. -2147483648 to 2147483647), or it is NaN or infinity.","","Note: while the range of an Int32 is precisely defined using Int32 values, converting this range to","Float32 values is imprecise."],
      "name":"tryToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":160,
        "endLine":166
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToInt64",
        "loc":{
          "name":"Float32.flix",
          "beginLine":180,
          "endLine":180
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int64]`.","","Returns `Some(x as Int64)` if the numeric value of `x` is within the range of Int64,","rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int64","(i.e. -9223372036854775808 to 9223372036854775807), or it is NaN or infinity.","","Note: while the range of an Int64 is precisely defined using Int64 values, converting","this range to Float32 values is imprecise."],
      "name":"tryToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[Int64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":180,
        "endLine":186
      }
    },{
      "sym":{
        "namespace":["Float32"],
        "name":"tryToInt8",
        "loc":{
          "name":"Float32.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` is within the range of Int8,","rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127), or it is NaN or infinity."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Float32"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Float32.flix",
        "beginLine":123,
        "endLine":129
      }
    }],
    "Traversable":[{
      "sym":{
        "namespace":["Traversable"],
        "name":"for",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","data structure `t`.","","`for` is `traverse` with it's arguments flipped."],
      "name":"for",
      "tparams":[{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"t[a]"
      },{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      }],
      "tpe":"m[t[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      },{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Traversable.flix",
        "beginLine":58,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["Traversable"],
        "name":"mapAccumLeft",
        "loc":{
          "name":"Traversable.flix",
          "beginLine":68,
          "endLine":68
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to the traversable structure `t` and the initial state `acc`.","The result is a pair of the final state and the updated copy of the structure.","","`mapAccumLeft` is essentially the combination of `map` and `foldLeft` - like map it returns an updated copy","of the initial structure, like `foldLeft` it passes an updating accumulator through each step of the traversal."],
      "name":"mapAccumLeft",
      "tparams":[{
        "name":"acc",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"acc -> (a -> (acc, b) & ef \\ ef')"
      },{
        "name":"start",
        "tpe":"acc"
      },{
        "name":"t",
        "tpe":"t[a]"
      }],
      "tpe":"(acc, t[b])",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Traversable",
          "loc":{
            "name":"Traversable.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Traversable.flix",
        "beginLine":68,
        "endLine":78
      }
    }],
    "Functor":[{
      "sym":{
        "namespace":["Functor"],
        "name":"$>",
        "loc":{
          "name":"Functor.flix",
          "beginLine":74,
          "endLine":74
        }
      },
      "ann":[],
      "doc":["`<$` is the operator `$>` with its arguments flipped."],
      "name":"$>",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"ma",
        "tpe":"f[a]"
      },{
        "name":"x",
        "tpe":"b"
      }],
      "tpe":"f[b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":74,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"<$",
        "loc":{
          "name":"Functor.flix",
          "beginLine":69,
          "endLine":69
        }
      },
      "ann":[],
      "doc":["`<$` is an operator alias for `as`."],
      "name":"<$",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"ma",
        "tpe":"f[b]"
      }],
      "tpe":"f[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":69,
        "endLine":69
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"<$$>",
        "loc":{
          "name":"Functor.flix",
          "beginLine":64,
          "endLine":64
        }
      },
      "ann":[],
      "doc":["`<$$>` is the operator `<$>` with its arguments flipped."],
      "name":"<$$>",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"m[a]"
      },{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":64,
        "endLine":64
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"<$>",
        "loc":{
          "name":"Functor.flix",
          "beginLine":59,
          "endLine":59
        }
      },
      "ann":[],
      "doc":["`<$>` is an operator alias for `map`."],
      "name":"<$>",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"x",
        "tpe":"m[a]"
      }],
      "tpe":"m[b]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":59,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"as",
        "loc":{
          "name":"Functor.flix",
          "beginLine":47,
          "endLine":47
        }
      },
      "ann":[],
      "doc":["Replaces the value `a` in `s` by the given value `x` preserving the structure of `s`."],
      "name":"as",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"m[a]"
      },{
        "name":"x",
        "tpe":"b"
      }],
      "tpe":"m[b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":47,
        "endLine":47
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"ignore",
        "loc":{
          "name":"Functor.flix",
          "beginLine":54,
          "endLine":54
        }
      },
      "ann":[],
      "doc":["Replaces the value `a` in `s` with `Unit` preserving the structure of `s`.","","This function is typically used to discard the return value of computing `s`."],
      "name":"ignore",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"m[a]"
      }],
      "tpe":"m[Unit]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":54,
        "endLine":54
      }
    },{
      "sym":{
        "namespace":["Functor"],
        "name":"lift",
        "loc":{
          "name":"Functor.flix",
          "beginLine":42,
          "endLine":42
        }
      },
      "ann":[],
      "doc":["Lifts the function `f` into the functor."],
      "name":"lift",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"m",
        "kind":"Type -> Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef"
      }],
      "tpe":"m[a] -> m[b] & ef",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Functor",
          "loc":{
            "name":"Functor.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Functor.flix",
        "beginLine":42,
        "endLine":42
      }
    }],
    "Order":[{
      "sym":{
        "namespace":["Order"],
        "name":"maxBy",
        "loc":{
          "name":"Order.flix",
          "beginLine":142,
          "endLine":142
        }
      },
      "ann":[],
      "doc":["Returns the maximum of `x` and `y` according to the given comparator `cmp`."],
      "name":"maxBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"y",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Order.flix",
        "beginLine":142,
        "endLine":143
      }
    },{
      "sym":{
        "namespace":["Order"],
        "name":"minBy",
        "loc":{
          "name":"Order.flix",
          "beginLine":136,
          "endLine":136
        }
      },
      "ann":[],
      "doc":["Returns the minimum of `x` and `y` according to the given comparator `cmp`."],
      "name":"minBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"y",
        "tpe":"a"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Order.flix",
        "beginLine":136,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["Order"],
        "name":"thenCompare",
        "loc":{
          "name":"Order.flix",
          "beginLine":150,
          "endLine":150
        }
      },
      "ann":[],
      "doc":["Lazily combines two comparisons.","","If `c1` is either `LessThan` or `GreaterThan` then `c2` is never evaluated."],
      "name":"thenCompare",
      "tparams":[],
      "fparams":[{
        "name":"c1",
        "tpe":"Comparison"
      },{
        "name":"c2",
        "tpe":"Lazy[Comparison]"
      }],
      "tpe":"Comparison",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Order.flix",
        "beginLine":150,
        "endLine":151
      }
    }],
    "Fixpoint/Tuple":[{
      "sym":{
        "namespace":["Fixpoint","Tuple"],
        "name":"length",
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":59,
          "endLine":59
        }
      },
      "ann":[],
      "doc":["Returns the length of `t`."],
      "name":"length",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"Tuple[v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Fixpoint/Tuple/Tuple.flix",
        "beginLine":59,
        "endLine":61
      }
    },{
      "sym":{
        "namespace":["Fixpoint","Tuple"],
        "name":"new",
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Creates an empty tuple consisting of the elements in `l`."],
      "name":"new",
      "tparams":[{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"f[v]"
      }],
      "tpe":"Tuple[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"Fixpoint/Tuple/Tuple.flix",
        "beginLine":45,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":["Fixpoint","Tuple"],
        "name":"toList",
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":[],
      "doc":["Converts `t` to a list."],
      "name":"toList",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"Tuple[v]"
      }],
      "tpe":"List[v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Fixpoint/Tuple/Tuple.flix",
        "beginLine":51,
        "endLine":54
      }
    },{
      "sym":{
        "namespace":["Fixpoint","Tuple"],
        "name":"valueAt",
        "loc":{
          "name":"Fixpoint/Tuple/Tuple.flix",
          "beginLine":67,
          "endLine":67
        }
      },
      "ann":[],
      "doc":["Returns the value at index `i` in `t`.","Throws a runtime exception if `v` is out of bounds."],
      "name":"valueAt",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"t",
        "tpe":"Tuple[v]"
      },{
        "name":"v",
        "tpe":"Int32"
      }],
      "tpe":"v",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Fixpoint/Tuple/Tuple.flix",
        "beginLine":67,
        "endLine":70
      }
    }],
    "Bool":[{
      "sym":{
        "namespace":["Bool"],
        "name":"<==>",
        "loc":{
          "name":"Bool.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":[],
      "doc":["Returns true if `x` implies `y` and vise versa."],
      "name":"<==>",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":75,
        "endLine":75
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"==>",
        "loc":{
          "name":"Bool.flix",
          "beginLine":70,
          "endLine":70
        }
      },
      "ann":[],
      "doc":["Returns `true` if `x` implies `y` logically holds."],
      "name":"==>",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":70,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"and",
        "loc":{
          "name":"Bool.flix",
          "beginLine":60,
          "endLine":60
        }
      },
      "ann":[],
      "doc":["Logical and."],
      "name":"and",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Lazy[Bool]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":60,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"not",
        "loc":{
          "name":"Bool.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":[],
      "doc":["Negation of `x`"],
      "name":"not",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":55,
        "endLine":55
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"or",
        "loc":{
          "name":"Bool.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Logical or."],
      "name":"or",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Lazy[Bool]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":65,
        "endLine":65
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"→",
        "loc":{
          "name":"Bool.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Alias for logical implication."],
      "name":"→",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"↔",
        "loc":{
          "name":"Bool.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Alias for logical bi-implication."],
      "name":"↔",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"∧",
        "loc":{
          "name":"Bool.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Alias for logical conjunction."],
      "name":"∧",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"∨",
        "loc":{
          "name":"Bool.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Alias for logical disjunction."],
      "name":"∨",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Bool"],
        "name":"⊕",
        "loc":{
          "name":"Bool.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Alias for exclusive or."],
      "name":"⊕",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Bool"
      },{
        "name":"y",
        "tpe":"Bool"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Bool.flix",
        "beginLine":50,
        "endLine":50
      }
    }],
    "MutMap":[{
      "sym":{
        "namespace":["MutMap"],
        "name":"adjust!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":204,
          "endLine":204
        }
      },
      "ann":[],
      "doc":["Updates the mutable map `m` with `k -> f(v)` if `k -> v` is in `m`.","","Otherwise leaves the map is unchanged."],
      "name":"adjust!",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> v & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":204,
        "endLine":205
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"adjustWithKey!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":212,
          "endLine":212
        }
      },
      "ann":[],
      "doc":["Updates the mutable map `m` with `k -> f(k, v)` if `k -> v` is in `m`.","","Otherwise leaves the map is unchanged."],
      "name":"adjustWithKey!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":212,
        "endLine":214
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"clear!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":219,
          "endLine":219
        }
      },
      "ann":[],
      "doc":["Removes all mappings from the mutable map `m`."],
      "name":"clear!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":219,
        "endLine":221
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"copy",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":541,
          "endLine":541
        }
      },
      "ann":[],
      "doc":["Returns a shallow copy of the mutable map `m`."],
      "name":"copy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"MutMap[k, v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":541,
        "endLine":543
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"count",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":468,
          "endLine":468
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the number of mappings in the mutable map `m` that satisfy the predicate function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":468,
        "endLine":470
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"exists",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":525,
          "endLine":525
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one mapping in the mutable map `m` satisfies the predicate function `f`.","","Returns `false` if `m` is the empty map."],
      "name":"exists",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":525,
        "endLine":527
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"find",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":318,
          "endLine":318
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`.","","The function `f` must be pure."],
      "name":"find",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":318,
        "endLine":319
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"findLeft",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of the mutable map `m` that satisfies the predicate function `f` when searching from left to right.","","The function `f` must be pure."],
      "name":"findLeft",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":326,
        "endLine":328
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"findRight",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":335,
          "endLine":335
        }
      },
      "ann":[],
      "doc":["Optionally returns the first mapping of the mutable map `m` that satisfies the predicate function `f` when searching from right to left.","","The function `f` must be pure."],
      "name":"findRight",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":335,
        "endLine":337
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldLeft",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":369,
          "endLine":369
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `i` and all values in the mutable map `m` going from left to right.","","That is, the result is of the form: `f(...f(f(i, v1), v2)..., vn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (v -> b & ef \\ ef')"
      },{
        "name":"i",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":369,
        "endLine":371
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldLeftWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":378,
          "endLine":378
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `i` and all key-value pairs in the mutable map `m` going from left to right.","","That is, the result is of the form: `f(...f(k2, f(k1, i, v1), v2)..., vn)`."],
      "name":"foldLeftWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"i",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":378,
        "endLine":380
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldRight",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":387,
          "endLine":387
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all values in the mutable map `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, s)))`."],
      "name":"foldRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":387,
        "endLine":388
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":405,
          "endLine":405
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all values in the mutable map `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, z)))`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":405,
        "endLine":406
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldRightWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":395,
          "endLine":395
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in the mutable map `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`."],
      "name":"foldRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (b -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":395,
        "endLine":397
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldRightWithKeyCont",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":414,
          "endLine":414
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all key-value pairs in the mutable map `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, z)))`.","A `foldRightWithKeyCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithKeyCont",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef'))"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":414,
        "endLine":416
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"foldWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":361,
          "endLine":361
        }
      },
      "ann":[],
      "doc":["Alias for `foldLeftWithKey`."],
      "name":"foldWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"i",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":361,
        "endLine":362
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"forAll",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":534,
          "endLine":534
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in the mutable map `m` satisfy the predicate function `f`.","","Returns `true` if `m` is the empty map."],
      "name":"forAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":534,
        "endLine":536
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"forEach",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":576,
          "endLine":576
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element in the mutable map `m`."],
      "name":"forEach",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":576,
        "endLine":578
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"get",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":170,
          "endLine":170
        }
      },
      "ann":[],
      "doc":["Returns `Some(v)` if `k -> v` is in the mutable map `m`.","","Otherwise returns `None`."],
      "name":"get",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[v]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":170,
        "endLine":172
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"getOrElsePut!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":228,
          "endLine":228
        }
      },
      "ann":[],
      "doc":["Returns `v` if `k -> v` is in the mutable map `m`.","","Otherwise updates the mutable map `m` with a new mapping `k -> d` and returns d."],
      "name":"getOrElsePut!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"d",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"v",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":228,
        "endLine":233
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"getWithDefault",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":179,
          "endLine":179
        }
      },
      "ann":[],
      "doc":["Returns `v` if `k -> v` is in the mutable map `m`.","","Otherwise returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"d",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"v",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":179,
        "endLine":181
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"isEmpty",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":54,
          "endLine":54
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `m` is the empty map."],
      "name":"isEmpty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":54,
        "endLine":56
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"isProperSubmapOf",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":308,
          "endLine":308
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in the mutable map `m1` occur in the mutable map `m2` and `m1 != m2`."],
      "name":"isProperSubmapOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"m2",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":308,
        "endLine":311
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"isSubmapOf",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":300,
          "endLine":300
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all mappings in the mutable map `m1` occur in the mutable map `m2`."],
      "name":"isSubmapOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"m2",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":300,
        "endLine":303
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"iterator",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":583,
          "endLine":583
        }
      },
      "ann":[],
      "doc":["Returns an iterator over all key-value pairs in `m`."],
      "name":"iterator",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Iterator[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":583,
        "endLine":586
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"iteratorKeys",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":591,
          "endLine":591
        }
      },
      "ann":[],
      "doc":["Returns an iterator over keys in `m`."],
      "name":"iteratorKeys",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Iterator[k, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":591,
        "endLine":594
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"iteratorValues",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":599,
          "endLine":599
        }
      },
      "ann":[],
      "doc":["Returns an iterator over values in `m`."],
      "name":"iteratorValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Iterator[v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":599,
        "endLine":602
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"joinKeys",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":630,
          "endLine":630
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key `k`","in `m` with `sep` inserted between each element."],
      "name":"joinKeys",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":630,
        "endLine":632
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"joinValues",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":638,
          "endLine":638
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each value `v`","in `m` with `sep` inserted between each element."],
      "name":"joinValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":638,
        "endLine":640
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"joinWith",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":646,
          "endLine":646
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation of each key-value pair","`k => v` in `m` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> String & ef \\ ef')"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":646,
        "endLine":648
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"keysOf",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":147,
          "endLine":147
        }
      },
      "ann":[],
      "doc":["Returns the keys of the mutable map `m`."],
      "name":"keysOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Set[k]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":147,
        "endLine":149
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"map",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":345,
          "endLine":345
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a map with mappings `k => f(v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"map",
      "tparams":[{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v1 -> v2 & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MutMap[k, v1, r]"
      }],
      "tpe":"MutMap[k, v2, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":345,
        "endLine":346
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"mapWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":354,
          "endLine":354
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns a map with mappings `k => f(k, v)` for every `k => v` in `m`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"mapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> v2 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v1, r]"
      }],
      "tpe":"MutMap[k, v2, r]",
      "eff":"ef and r and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":354,
        "endLine":356
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"maximumKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":106,
          "endLine":106
        }
      },
      "ann":[],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"maximumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":106,
        "endLine":108
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"maximumKeyBy",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":118,
          "endLine":118
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"maximumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":118,
        "endLine":120
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"maximumValue",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":128,
          "endLine":128
        }
      },
      "ann":["@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the largest value.","","Returns `None` if `m` is empty."],
      "name":"maximumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":128,
        "endLine":130
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"maximumValueBy",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":140,
          "endLine":140
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `v` is the largest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"maximumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":140,
        "endLine":142
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"memberOf",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":47,
          "endLine":47
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if the mutable map `m` contains the key `k`."],
      "name":"memberOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":47,
        "endLine":49
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"merge!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":240,
          "endLine":240
        }
      },
      "ann":[],
      "doc":["Merges the mutable map `m1` into the mutable map `m2` in a left-biased manner.","","That is, key collisions are resolved by taking the mapping from `m1`."],
      "name":"merge!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"m2",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Unit",
      "eff":"r1 and r2 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":240,
        "endLine":241
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"mergeWith!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":246,
          "endLine":246
        }
      },
      "ann":[],
      "doc":["Merges the mutable map `m1` into the mutable map `m2` where key collisions are resolved with the merge function `f`."],
      "name":"mergeWith!",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m1",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"m2",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Unit",
      "eff":"ef and r1 and r2 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":246,
        "endLine":247
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"mergeWithKey!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":252,
          "endLine":252
        }
      },
      "ann":[],
      "doc":["Merges the mutable map `m1` into the mutable map `m2` where key collisions are resolved with the merge function `f`, taking both the key and values."],
      "name":"mergeWithKey!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"m1",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"m2",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Unit",
      "eff":"ef and r1 and r2 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":252,
        "endLine":255
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"minimumKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":63,
          "endLine":63
        }
      },
      "ann":[],
      "doc":["Optionally finds `k -> v` where `k` is the smallest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"minimumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":63,
        "endLine":65
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"minimumKeyBy",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":75,
          "endLine":75
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the smallest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":75,
        "endLine":77
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"minimumValue",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":["@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the smallest value.","","Returns `None` if `m` is empty."],
      "name":"minimumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":85,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"minimumValueBy",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":97,
          "endLine":97
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `v` is the smallest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":97,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"new",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns a fresh empty mutable map."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      }],
      "tpe":"MutMap[k, v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":35,
        "endLine":36
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"productKeys",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":499,
          "endLine":499
        }
      },
      "ann":[],
      "doc":["Returns the product of all keys in the mutable map `m`."],
      "name":"productKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[Int32, v, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":499,
        "endLine":501
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"productValues",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":506,
          "endLine":506
        }
      },
      "ann":[],
      "doc":["Returns the product of all values in the mutable map `m`."],
      "name":"productValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":506,
        "endLine":508
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"productWith",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":516,
          "endLine":516
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the product of all key-value pairs `k => v` in the mutable map `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":516,
        "endLine":518
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"put!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":186,
          "endLine":186
        }
      },
      "ann":[],
      "doc":["Updates the mutable map `m` with the binding `k -> v`. Replaces any existing binding."],
      "name":"put!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":186,
        "endLine":188
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"putWith!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Updates the mutable map `m` with the binding `k -> f(v, v1)` if `k -> v1` is in `m`.","","Otherwise updates the mutable map `m` with the binding `k -> v`."],
      "name":"putWith!",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":195,
        "endLine":197
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"query",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":609,
          "endLine":609
        }
      },
      "ann":[],
      "doc":["Extracts a range of key-value pairs from the mutable map `m`.","","That is, the result is a list of all pairs `(k, v)` where `p(k)` returns `Equal`."],
      "name":"query",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":609,
        "endLine":611
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"queryWith",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":616,
          "endLine":616
        }
      },
      "ann":[],
      "doc":["Applies `f` to all key-value pairs `(k, v)` in the mutable map `m` where `p(k)` returns `EqualTo`."],
      "name":"queryWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"p",
        "tpe":"k -> Comparison & ef1 \\ ef1'"
      },{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef2 \\ ef2')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef1 and ef2 and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":616,
        "endLine":618
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"reduceLeft",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":425,
          "endLine":425
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in the mutable map `m` going from left to right until a single value `v` is obtained. Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(v1, v2), v3)..., vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[v]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":425,
        "endLine":427
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"reduceLeftWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":436,
          "endLine":436
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in the mutable map `m` going from left to right until a single mapping `(k, v)` is obtained. Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(...f(f(k1, v1, k2, v2), k3, v3)..., kn, vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeftWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":436,
        "endLine":438
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"reduceRight",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":447,
          "endLine":447
        }
      },
      "ann":[],
      "doc":["Applies `f` to all values in the mutable map `m` going from right to left until a single value `v` is obtained. Returns `Some(v)`.","","That is, the result is of the form: `Some(f(v1, ...f(vn-2, f(vn-1, vn))...))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[v]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":447,
        "endLine":449
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"reduceRightWithKey",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":458,
          "endLine":458
        }
      },
      "ann":[],
      "doc":["Applies `f` to all mappings in the mutable map `m` going from right to left until a single mapping `(k, v)` is obtained. Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(k1, v1, ...f(kn-2, vn-2, f(kn-1, vn-1, kn, vn))...))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":458,
        "endLine":460
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"refine!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":262,
          "endLine":262
        }
      },
      "ann":[],
      "doc":["Removes all mappings `k -> v` from the mutable map `m` where `v` does not satisfy the predicate function `f`.","","The function `f` must be pure."],
      "name":"refine!",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Bool"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":262,
        "endLine":263
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"refineWithKey!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":270,
          "endLine":270
        }
      },
      "ann":[],
      "doc":["Removes all mappings `k -> v` from the mutable map `m` where `(k, v)` does not satisfy the predicate function `f`.","","The function `f` must be pure."],
      "name":"refineWithKey!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool)"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":270,
        "endLine":272
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"remove!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":279,
          "endLine":279
        }
      },
      "ann":[],
      "doc":["Removes the mapping `k` from the mutable map `m`.","","Leaves the map unchanged if the mutable map `m` does not contain any mapping for `k`."],
      "name":"remove!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":279,
        "endLine":281
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"sameElements",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":623,
          "endLine":623
        }
      },
      "ann":[],
      "doc":["Returns `true` if MutMaps `a` and `b` have the same elements, i.e. are structurally equal."],
      "name":"sameElements",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"MutMap[k, v, r1]"
      },{
        "name":"b",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":623,
        "endLine":624
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"singleton",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":41,
          "endLine":41
        }
      },
      "ann":[],
      "doc":["Returns the singleton map where key `k` is mapped to value `v`."],
      "name":"singleton",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      }],
      "tpe":"MutMap[k, v, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":41,
        "endLine":42
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"size",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":161,
          "endLine":161
        }
      },
      "ann":[],
      "doc":["Returns the size of the mutable map `m`."],
      "name":"size",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":161,
        "endLine":163
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"sumKeys",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":475,
          "endLine":475
        }
      },
      "ann":[],
      "doc":["Returns the sum of all keys in the map `m`."],
      "name":"sumKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[Int32, v, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":475,
        "endLine":477
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"sumValues",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":482,
          "endLine":482
        }
      },
      "ann":[],
      "doc":["Returns the sum of all values in the map `m`."],
      "name":"sumValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":482,
        "endLine":484
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"sumWith",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":492,
          "endLine":492
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the sum of all key-value pairs `k => v` in the map `m` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":492,
        "endLine":494
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"toList",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":562,
          "endLine":562
        }
      },
      "ann":[],
      "doc":["Returns the mutable map `m` as a list of key-value pairs."],
      "name":"toList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":562,
        "endLine":564
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"toMap",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":548,
          "endLine":548
        }
      },
      "ann":[],
      "doc":["Returns the mutable map `m` as an immutable map."],
      "name":"toMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Map[k, v]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":548,
        "endLine":550
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"toMutDeque",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":555,
          "endLine":555
        }
      },
      "ann":[],
      "doc":["Returns `m` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r2]"
      }],
      "tpe":"MutDeque[(k, v), r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":555,
        "endLine":557
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"toSet",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":569,
          "endLine":569
        }
      },
      "ann":[],
      "doc":["Returns the mutable map `m` as a set of key-value pairs."],
      "name":"toSet",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Set[(k, v)]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":569,
        "endLine":571
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"transform!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":286,
          "endLine":286
        }
      },
      "ann":[],
      "doc":["Applies the function `f` to every value in the mutable map `m`."],
      "name":"transform!",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> v & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":286,
        "endLine":288
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"transformWithKey!",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":293,
          "endLine":293
        }
      },
      "ann":[],
      "doc":["Applies the function `f` to every value in the mutable map `m`."],
      "name":"transformWithKey!",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":293,
        "endLine":295
      }
    },{
      "sym":{
        "namespace":["MutMap"],
        "name":"valuesOf",
        "loc":{
          "name":"MutMap.flix",
          "beginLine":154,
          "endLine":154
        }
      },
      "ann":[],
      "doc":["Returns the values of the mutable map `m`."],
      "name":"valuesOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"MutMap[k, v, r]"
      }],
      "tpe":"List[v]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutMap.flix",
        "beginLine":154,
        "endLine":156
      }
    }],
    "Int64":[{
      "sym":{
        "namespace":["Int64"],
        "name":"abs",
        "loc":{
          "name":"Int64.flix",
          "beginLine":56,
          "endLine":56
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`.","If the absolute value exceeds maxValue(), -1 is returned."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":56,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"bitCount",
        "loc":{
          "name":"Int64.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Returns the number of one-bits in the two's complement binary","representation of `x`."],
      "name":"bitCount",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":105,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"clampToInt16",
        "loc":{
          "name":"Int64.flix",
          "beginLine":418,
          "endLine":418
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int16`.","","Returns `x` clamped within the Int16 range `min` to `max`."],
      "name":"clampToInt16",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int16 }"
      },{
        "name":"max",
        "tpe":"{ max = Int16 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int16",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":418,
        "endLine":423
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"clampToInt32",
        "loc":{
          "name":"Int64.flix",
          "beginLine":431,
          "endLine":431
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int32`.","","Returns `x` clamped within the Int32 range `min` to `max`."],
      "name":"clampToInt32",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int32 }"
      },{
        "name":"max",
        "tpe":"{ max = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":431,
        "endLine":436
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"clampToInt8",
        "loc":{
          "name":"Int64.flix",
          "beginLine":406,
          "endLine":406
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Int8`.","","Returns `x` clamped within the Int8 range `min` to `max`."],
      "name":"clampToInt8",
      "tparams":[],
      "fparams":[{
        "name":"min",
        "tpe":"{ min = Int8 }"
      },{
        "name":"max",
        "tpe":"{ max = Int8 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int8",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":406,
        "endLine":411
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"clearBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` cleared (to 0).","Considers the 6 rightmost bits of `position` (`position` mod 64).","The bits of x have positions: 0 (rightmost bit) - 63 (leftmost bit)"],
      "name":"clearBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":237,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"compare",
        "loc":{
          "name":"Int64.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > y, -1 if x < y, and 0 if x = y.","The sign of x - y."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      },{
        "name":"y",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":78,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"dist",
        "loc":{
          "name":"Int64.flix",
          "beginLine":66,
          "endLine":66
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`.","If this distance exceeds maxValue(), -1 is returned."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      },{
        "name":"y",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":66,
        "endLine":72
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"factorial",
        "loc":{
          "name":"Int64.flix",
          "beginLine":261,
          "endLine":261
        }
      },
      "ann":[],
      "doc":["Returns the factorial of `x`.","If the given value is negative, 0 is returned."],
      "name":"factorial",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":261,
        "endLine":270
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"flipBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":244,
          "endLine":244
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` flipped.","Considers the 6 rightmost bits of `position` (`position` mod 64).","The bits of x have positions: 0 (rightmost bit) - 63 (leftmost bit)"],
      "name":"flipBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":244,
        "endLine":244
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"fromString",
        "loc":{
          "name":"Int64.flix",
          "beginLine":281,
          "endLine":281
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int64, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":281,
        "endLine":287
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"getBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":222,
          "endLine":222
        }
      },
      "ann":[],
      "doc":["Returns the bit of `x` at `position` (either 0 or 1).","Considers the 6 rightmost bits of `position` (`position` mod 64).","The bits of x have positions: 0 (rightmost bit) - 63 (leftmost bit)."],
      "name":"getBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":222,
        "endLine":223
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"highestOneBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"highestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":182,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"highestOneBitPosition",
        "loc":{
          "name":"Int64.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Returns the position of the highest-order/leftmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 63 (leftmost bit)","-1 if x = 0"],
      "name":"highestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":151,
        "endLine":153
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"log2",
        "loc":{
          "name":"Int64.flix",
          "beginLine":250,
          "endLine":250
        }
      },
      "ann":[],
      "doc":["Returns the integer binary logarithm of `x`.","If the given value is 0 or negative, 0 is returned."],
      "name":"log2",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":250,
        "endLine":255
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"logicalRightShift",
        "loc":{
          "name":"Int64.flix",
          "beginLine":95,
          "endLine":95
        }
      },
      "ann":[],
      "doc":["Returns the logical right shift of `x` by `distance`.","Only the rightmost 6 bits of `distance` are considered (ie. `distance rem 64`).","A zero is shifted into the leftmost position regardless of sign extension."],
      "name":"logicalRightShift",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":95,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"lowestOneBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns a value with at most a single one-bit, in the position","of the highest-order/leftmost one-bit in `x`.","Returns 0 if x=0."],
      "name":"lowestOneBit",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":190,
        "endLine":191
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"lowestOneBitPosition",
        "loc":{
          "name":"Int64.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Returns the position of the lowest-order/rightmost one-bit in `x`.","Possible return values: 0 (rightmost bit) - 63 (leftmost bit)","-1 if x = 0"],
      "name":"lowestOneBitPosition",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":160,
        "endLine":162
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"max",
        "loc":{
          "name":"Int64.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      },{
        "name":"y",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":50,
        "endLine":50
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"maxValue",
        "loc":{
          "name":"Int64.flix",
          "beginLine":40,
          "endLine":40
        }
      },
      "ann":[],
      "doc":["Returns the maximum number representable by an `Int64`."],
      "name":"maxValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":40,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"min",
        "loc":{
          "name":"Int64.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      },{
        "name":"y",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"minValue",
        "loc":{
          "name":"Int64.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns the minimum number representable by an `Int64`."],
      "name":"minValue",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":35,
        "endLine":35
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"numberOfLeadingZeros",
        "loc":{
          "name":"Int64.flix",
          "beginLine":206,
          "endLine":206
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits preceding the","highest-order/leftmost one-bit in `x`.","Returns 64 if x=0."],
      "name":"numberOfLeadingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":206,
        "endLine":207
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"numberOfTrailingZeros",
        "loc":{
          "name":"Int64.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Returns the number of zero bits following the","lowest-order/rightmost one-bit in `x`.","Returns 64 if x=0."],
      "name":"numberOfTrailingZeros",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":214,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"parse",
        "loc":{
          "name":"Int64.flix",
          "beginLine":294,
          "endLine":294
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an Int64, where the `radix` is used while parsing.","Leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Ok(x)`, a parse failure is indicated by `Err(_)`."],
      "name":"parse",
      "tparams":[],
      "fparams":[{
        "name":"radix",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Result[Int64, String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":294,
        "endLine":300
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"reverse",
        "loc":{
          "name":"Int64.flix",
          "beginLine":129,
          "endLine":129
        }
      },
      "ann":[],
      "doc":["Returns the value obtained by reversing the bits in the","two's complement binary representation of `x`."],
      "name":"reverse",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":129,
        "endLine":129
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"rotateLeft",
        "loc":{
          "name":"Int64.flix",
          "beginLine":122,
          "endLine":122
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` left by `distance` bits."],
      "name":"rotateLeft",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":122,
        "endLine":123
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"rotateRight",
        "loc":{
          "name":"Int64.flix",
          "beginLine":115,
          "endLine":115
        }
      },
      "ann":[],
      "doc":["Returns the the value obtained by rotating the two's complement","binary representation of `x` right by `distance` bits."],
      "name":"rotateRight",
      "tparams":[],
      "fparams":[{
        "name":"dist",
        "tpe":"{ dist = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":115,
        "endLine":116
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"setBit",
        "loc":{
          "name":"Int64.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["Returns `x` with the bit at position `position` set (to 1).","Considers the 6 rightmost bits of `position` (`position` mod 64).","The bits of x have positions: 0 (rightmost bit) - 63 (leftmost bit)"],
      "name":"setBit",
      "tparams":[],
      "fparams":[{
        "name":"pos",
        "tpe":"{ pos = Int32 }"
      },{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":230,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"signum",
        "loc":{
          "name":"Int64.flix",
          "beginLine":88,
          "endLine":88
        }
      },
      "ann":[],
      "doc":["Returns 1 if x > 0, -1 if x < 0, and 0 if x = 0.","The sign of x."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":88,
        "endLine":88
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"size",
        "loc":{
          "name":"Int64.flix",
          "beginLine":30,
          "endLine":30
        }
      },
      "ann":[],
      "doc":["Returns the number of bits used to represent an `Int64`."],
      "name":"size",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":30,
        "endLine":30
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"toBigDecimal",
        "loc":{
          "name":"Int64.flix",
          "beginLine":385,
          "endLine":385
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float32.","","Warning: The numeric value of `x` may lose precision."],
      "name":"toBigDecimal",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":385,
        "endLine":387
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"toBigInt",
        "loc":{
          "name":"Int64.flix",
          "beginLine":354,
          "endLine":354
        }
      },
      "ann":[],
      "doc":["Convert `x` to a BigInt.","","The numeric value of `x` is preserved exactly."],
      "name":"toBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":354,
        "endLine":358
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"toFloat32",
        "loc":{
          "name":"Int64.flix",
          "beginLine":365,
          "endLine":365
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float32.","","Warning: The numeric value of `x` may lose precision."],
      "name":"toFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Float32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":365,
        "endLine":368
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"toFloat64",
        "loc":{
          "name":"Int64.flix",
          "beginLine":375,
          "endLine":375
        }
      },
      "ann":[],
      "doc":["Convert `x` to a Float32.","","Warning: The numeric value of `x` may lose precision."],
      "name":"toFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Float64",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":375,
        "endLine":378
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"toString",
        "loc":{
          "name":"Int64.flix",
          "beginLine":275,
          "endLine":275
        }
      },
      "ann":[],
      "doc":["Return a string representation of `x`."],
      "name":"toString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":275,
        "endLine":275
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"tryToInt16",
        "loc":{
          "name":"Int64.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767)."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":326,
        "endLine":332
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"tryToInt32",
        "loc":{
          "name":"Int64.flix",
          "beginLine":342,
          "endLine":342
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int32]`.","","Returns `Some(x as Int32)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int32","(i.e. -2147483648 to 2147483647)."],
      "name":"tryToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":342,
        "endLine":348
      }
    },{
      "sym":{
        "namespace":["Int64"],
        "name":"tryToInt8",
        "loc":{
          "name":"Int64.flix",
          "beginLine":310,
          "endLine":310
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` can be represented exactly.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127)."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"Int64"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Int64.flix",
        "beginLine":310,
        "endLine":316
      }
    }],
    "MutDeque":[{
      "sym":{
        "namespace":["MutDeque"],
        "name":"foldLeft",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":134,
          "endLine":134
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `d` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":134,
        "endLine":145
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"foldMap",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":190,
        "endLine":191
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"foldRight",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":152,
          "endLine":152
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `d` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":152,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":173,
          "endLine":173
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `d` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef and r \\ ef') -> b & ef and r \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":173,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"forEach",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":430,
          "endLine":430
        }
      },
      "ann":[],
      "doc":["Apply the effectful function `f` to all the elements in the MutDeque `d`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":430,
        "endLine":445
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"isEmpty",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":98,
          "endLine":98
        }
      },
      "ann":[],
      "doc":["Returns `true` if `d` is empty."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":98,
        "endLine":100
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"iterator",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":415,
          "endLine":415
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `d`.","","Modifying `d` while using an iterator has undefined behavior and is dangerous."],
      "name":"iterator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":415,
        "endLine":425
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"join",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":395,
          "endLine":395
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `d` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":395,
        "endLine":396
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"joinWith",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":402,
          "endLine":402
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `d` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":402,
        "endLine":408
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"new",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":76,
          "endLine":76
        }
      },
      "ann":[],
      "doc":["Returns an empty MutDeque."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":76,
        "endLine":77
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"peekBack",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":264,
          "endLine":264
        }
      },
      "ann":[],
      "doc":["Optionally returns the back element. Does *not* remove it."],
      "name":"peekBack",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":264,
        "endLine":273
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"peekFront",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":252,
          "endLine":252
        }
      },
      "ann":[],
      "doc":["Optionally returns the front element. Does *not* remove it."],
      "name":"peekFront",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":252,
        "endLine":259
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"popBack",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":213,
          "endLine":213
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` where `x` is the element at the back. Returns `None` if `d` is empty."],
      "name":"popBack",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":213,
        "endLine":225
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"popFront",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":196,
          "endLine":196
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` where `x` is the element at the front. Returns `None` if `d` is empty."],
      "name":"popFront",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":196,
        "endLine":208
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"product",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":117,
          "endLine":117
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the deque `d`."],
      "name":"product",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":117,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"productWith",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the deque `d` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":123,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"pushBack",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":241,
          "endLine":241
        }
      },
      "ann":[],
      "doc":["Pushes `x` to the back of `d`."],
      "name":"pushBack",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":241,
        "endLine":247
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"pushFront",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":230,
          "endLine":230
        }
      },
      "ann":[],
      "doc":["Pushes `x` to the front of `d`."],
      "name":"pushFront",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":230,
        "endLine":236
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"sameElements",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":356,
          "endLine":356
        }
      },
      "ann":[],
      "doc":["Returns `true` if `MutDeque`s `a` and `b` have the same elements in the same order, i.e. are structurally equal."],
      "name":"sameElements",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d1",
        "tpe":"MutDeque[t, r1]"
      },{
        "name":"d2",
        "tpe":"MutDeque[t, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":356,
        "endLine":368
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"shuffle",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":450,
          "endLine":450
        }
      },
      "ann":[],
      "doc":["Shuffles a copy of `d` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r2]"
      }],
      "tpe":"MutDeque[a, r1]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":450,
        "endLine":452
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"size",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":82,
          "endLine":82
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `d`."],
      "name":"size",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":82,
        "endLine":84
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"sum",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the deque `d`."],
      "name":"sum",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":105,
        "endLine":106
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"sumWith",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":111,
          "endLine":111
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the deque `d` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":111,
        "endLine":112
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"toArray",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":379,
          "endLine":379
        }
      },
      "ann":[],
      "doc":["Returns `d` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"d",
        "tpe":"MutDeque[a, r2]"
      }],
      "tpe":"Array[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":379,
        "endLine":389
      }
    },{
      "sym":{
        "namespace":["MutDeque"],
        "name":"toList",
        "loc":{
          "name":"MutDeque.flix",
          "beginLine":373,
          "endLine":373
        }
      },
      "ann":[],
      "doc":["Returns `d` as a `List`."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"MutDeque[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutDeque.flix",
        "beginLine":373,
        "endLine":374
      }
    }],
    "DelayMap":[{
      "sym":{
        "namespace":["DelayMap"],
        "name":"adjust",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":693,
          "endLine":693
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => f(v)` if `k => v` is in `m`. Otherwise, returns `m`.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"adjust",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> v & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":693,
        "endLine":694
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"adjustWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":702,
          "endLine":702
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => f(k, v)` if `k => v` is in `m`. Otherwise, returns `m`.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"adjustWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":702,
        "endLine":703
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"count",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":156,
          "endLine":156
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Returns the number of mappings `k => v` in `m` that satisfy the predicate `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":156,
        "endLine":168
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"empty",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":94,
          "endLine":94
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the empty map."],
      "name":"empty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":94,
        "endLine":95
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"filter",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":487,
          "endLine":487
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a map of all mappings `k => v` in `m` where `v` satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Bool & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":487,
        "endLine":488
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"filterWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":494,
          "endLine":494
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a map of all mappings `k => v` in `m` where `(k, v)` satisfies the predicate `f`."],
      "name":"filterWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Bool & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":494,
        "endLine":495
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldLeft",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":566,
          "endLine":566
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, v1), v2)..., vn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (v -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":566,
        "endLine":567
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldLeftWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":575,
          "endLine":575
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from left to right.","","That is, the result is of the form: `f(...f(f(s, k1, v1), k2, v2)..., vn)`."],
      "name":"foldLeftWithKey",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (k -> (v -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":575,
        "endLine":579
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldRight",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":587,
          "endLine":587
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, s)))`."],
      "name":"foldRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":587,
        "endLine":588
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":609,
          "endLine":609
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `z` and all values in `m` going from right to left.","","That is, the result is of the form: `f(v1, ...f(vn-1, f(vn, z)))`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":609,
        "endLine":610
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldRightWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":596,
          "endLine":596
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`."],
      "name":"foldRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (b -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":596,
        "endLine":600
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"foldRightWithKeyCont",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":619,
          "endLine":619
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to a start value `s` and all key-value pairs in `m` going from right to left.","","That is, the result is of the form: `f(k1, v1, ...f(kn-1, vn-1, f(kn, vn, s)))`.","A `foldRightWithKeyCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithKeyCont",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef'))"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":619,
        "endLine":623
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"forEach",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":813,
          "endLine":813
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to every element of `xs`."],
      "name":"forEach",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Unit & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":813,
        "endLine":817
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"forceAll",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":452,
          "endLine":452
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Forces **all values** in `m`."],
      "name":"forceAll",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Unit",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":452,
        "endLine":481
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"get",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":134,
          "endLine":134
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `Some(v)` if `k => v` is in `m`.","","Otherwise returns `None`."],
      "name":"get",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":134,
        "endLine":139
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"getWithDefault",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":147,
          "endLine":147
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `v` if `k => v` is in `m`.","","Otherwise, returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"d",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"v",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":147,
        "endLine":148
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"insert",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":124,
          "endLine":124
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `m` with `k => v`."],
      "name":"insert",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":124,
        "endLine":126
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"insertWith",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":353,
          "endLine":353
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => f(v, v1)` if `k => v1` is in `m`.","","Otherwise, updates `m` with `k => v`."],
      "name":"insertWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":353,
        "endLine":354
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"insertWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":362,
          "endLine":362
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => f(k, v, v1)` if `k => v1` is in `m`.","","Otherwise, updates `m` with `k => v`."],
      "name":"insertWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":362,
        "endLine":367
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"isEmpty",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":116,
          "endLine":116
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if and only if `m` is the empty map, i.e. `Map(Nil)`."],
      "name":"isEmpty",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":116,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"iterator",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":797,
          "endLine":797
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns an iterator over all key-value pairs in `m`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"DelayMap[a, b]"
      }],
      "tpe":"Iterator[(a, b), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":797,
        "endLine":799
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"joinKeys",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":900,
          "endLine":900
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the concatenation of the string representation of each key `k`","in `m` with `sep` inserted between each element."],
      "name":"joinKeys",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":900,
        "endLine":902
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"joinValues",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":909,
          "endLine":909
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the concatenation of the string representation of each value `v`","in `m` with `sep` inserted between each element."],
      "name":"joinValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":909,
        "endLine":910
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"joinWith",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":917,
          "endLine":917
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the concatenation of the string representation of each key-value pair","`k => v` in `m` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> String & ef \\ ef')"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":917,
        "endLine":920
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"keysOf",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":329,
          "endLine":329
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the keys of `m`."],
      "name":"keysOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Set[k]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":329,
        "endLine":330
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"map",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":397,
          "endLine":397
        }
      },
      "ann":["@Experimental","@ParallelWhenPure","@LazyWhenPure"],
      "doc":["Returns a map with mappings `k => f(v)` for every `k => v` in `m`.","","Purity reflective:","- Runs in parallel when given a pure function `f`.","- Applies `f` lazily if `f` is pure."],
      "name":"map",
      "tparams":[{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v1 -> v2 & ef \\ ef'"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v1]"
      }],
      "tpe":"DelayMap[k, v2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":397,
        "endLine":398
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"mapWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":408,
          "endLine":408
        }
      },
      "ann":["@Experimental","@ParallelWhenPure","@LazyWhenPure"],
      "doc":["Returns a map with mappings `k => f(k, v)` for every `k => v` in `m`.","","Purity reflective:","- Runs in parallel when given a pure function `f`.","- Applies `f` lazily if `f` is pure."],
      "name":"mapWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v2",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v1 -> v2 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v1]"
      }],
      "tpe":"DelayMap[k, v2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":408,
        "endLine":413
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"maximumKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":257,
          "endLine":257
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"maximumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":257,
        "endLine":262
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"maximumKeyBy",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":272,
          "endLine":272
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the largest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"maximumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":272,
        "endLine":288
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"maximumValue",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":296,
          "endLine":296
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the largest value.","","Returns `None` if `m` is empty."],
      "name":"maximumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":296,
        "endLine":297
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"maximumValueBy",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":307,
          "endLine":307
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the largest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"maximumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":307,
        "endLine":323
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"memberOf",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns `true` if and only if `m` contains the key `k`."],
      "name":"memberOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":174,
        "endLine":176
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"minimumKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":184,
          "endLine":184
        }
      },
      "ann":["@Experimental"],
      "doc":["Optionally finds `k => v` where `k` is the smallest key according to the `Order` instance of `k`.","","Returns `None` if `m` is empty."],
      "name":"minimumKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":184,
        "endLine":189
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"minimumKeyBy",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":199,
          "endLine":199
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the smallest key according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumKeyBy",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"k -> (k -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":199,
        "endLine":215
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"minimumValue",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":222,
          "endLine":222
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Optionally finds `k => v` where `v` is the smallest value.","","Returns `None` if `m` is empty."],
      "name":"minimumValue",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":222,
        "endLine":223
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"minimumValueBy",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":233,
          "endLine":233
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Optionally finds `k => v` where `k` is the smallest value according to the given comparator `cmp`.","","Returns `None` if `m` is empty.","","Purity reflective: Runs in parallel when given a pure function `cmp`."],
      "name":"minimumValueBy",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"v -> (v -> Comparison & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":233,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"productKeys",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":861,
          "endLine":861
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns the product of all keys in the DelayMap `m`."],
      "name":"productKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":861,
        "endLine":862
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"productValues",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":868,
          "endLine":868
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns the product of all values in the DelayMap `m`."],
      "name":"productValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":868,
        "endLine":869
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"productWith",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":878,
          "endLine":878
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Returns the product of all key-value pairs `k => v` in the DelayMap `m`","according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":878,
        "endLine":893
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"reduceLeft",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":633,
          "endLine":633
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all values in `m` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(v1, v2), v3)..., vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":633,
        "endLine":634
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"reduceLeftWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":644,
          "endLine":644
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all mappings in `m` going from left to right until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(...f(f(k1, v1, k2, v2), k3, v3)..., kn, vn))`","","Returns `None` if `m` is the empty map."],
      "name":"reduceLeftWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":644,
        "endLine":654
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"reduceRight",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":664,
          "endLine":664
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all values in `m` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(v1, ...f(vn-2, f(vn-1, vn))...))`","","Returns `None` if `m` is the empty DelayMap."],
      "name":"reduceRight",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[v]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":664,
        "endLine":665
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"reduceRightWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":675,
          "endLine":675
        }
      },
      "ann":["@Experimental"],
      "doc":["Applies `f` to all mappings in `m` going from right to left until a single mapping `(k, v)` is obtained.  Returns `Some((k, v))`.","","That is, the result is of the form: `Some(f(k1, v1, ...f(kn-2, vn-2, f(kn-1, vn-1, kn, vn))...))`","","Returns `None` if `m` is the empty DelayMap."],
      "name":"reduceRightWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (k -> (v -> (k, v) & ef \\ ef')))"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Option[(k, v)]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":675,
        "endLine":685
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"remove",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":343,
          "endLine":343
        }
      },
      "ann":["@Experimental"],
      "doc":["Removes the mapping `k` from the map `m`."],
      "name":"remove",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":343,
        "endLine":345
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"singleton",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the singleton map where key `k` is mapped to value `v`."],
      "name":"singleton",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"k",
        "tpe":"k"
      },{
        "name":"v",
        "tpe":"v"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":101,
        "endLine":102
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"size",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":108,
          "endLine":108
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the number of keys in `m`."],
      "name":"size",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":108,
        "endLine":110
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"sumKeys",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":823,
          "endLine":823
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns the sum of all values in `m`."],
      "name":"sumKeys",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[Int32, v]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":823,
        "endLine":824
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"sumValues",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":830,
          "endLine":830
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns the sum of all values in `m`."],
      "name":"sumValues",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":830,
        "endLine":831
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"sumWith",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":840,
          "endLine":840
        }
      },
      "ann":["@Experimental","@ParallelWhenPure"],
      "doc":["Returns the sum of all key-value pairs `k => v` in `m`","according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Int32 & ef \\ ef')"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":840,
        "endLine":855
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toDelayList",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":790,
          "endLine":790
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the map `m` as a `DelayList` of key-value pairs."],
      "name":"toDelayList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayList[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":790,
        "endLine":791
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toList",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":760,
          "endLine":760
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the map `m` as a list of key-value pairs."],
      "name":"toList",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"List[(k, v)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":760,
        "endLine":761
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toMap",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":767,
          "endLine":767
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns `m` as a Map, i.e. every value is forced."],
      "name":"toMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":767,
        "endLine":770
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toMutDeque",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":805,
          "endLine":805
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the map `m` as a MutDeque of key-value pairs."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"MutDeque[(k, v), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":805,
        "endLine":807
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toMutMap",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":776,
          "endLine":776
        }
      },
      "ann":["@Experimental","@Parallel"],
      "doc":["Returns `m` as a mutable set."],
      "name":"toMutMap",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"MutMap[k, v, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":776,
        "endLine":777
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toSet",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":783,
          "endLine":783
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the map `m` as a set of key-value pairs."],
      "name":"toSet",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"Set[(k, v)]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":783,
        "endLine":784
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"toString",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":55,
          "endLine":55
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns a string representation of the given `DelayMap` `m`."],
      "name":"toString",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"k"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"v"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":55,
        "endLine":70
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"union",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":503,
          "endLine":503
        }
      },
      "ann":["@Experimental","@Lazy"],
      "doc":["Returns the left-biased union of `m1` and `m2`.","","That is, key collisions are resolved by taking the mapping from `m1`."],
      "name":"union",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m1",
        "tpe":"DelayMap[k, v]"
      },{
        "name":"m2",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":503,
        "endLine":504
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"unionWith",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":512,
          "endLine":512
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the union of `m1` and `m2` where key collisions are resolved with the merge function `f`.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"unionWith",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> (v -> v & ef \\ ef')"
      },{
        "name":"m1",
        "tpe":"DelayMap[k, v]"
      },{
        "name":"m2",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":512,
        "endLine":513
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"unionWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":521,
          "endLine":521
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Returns the union of `m1` and `m2` where key collisions are resolved with the merge function `f`, taking both the key and values.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"unionWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> (v -> v & ef \\ ef'))"
      },{
        "name":"m1",
        "tpe":"DelayMap[k, v]"
      },{
        "name":"m2",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":521,
        "endLine":526
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"update",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":711,
          "endLine":711
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(v) = Some(v1)`. Otherwise, returns `m`.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"update",
      "tparams":[{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"k",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"v -> Option[v] & ef \\ ef'"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":711,
        "endLine":712
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"updateWithKey",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":720,
          "endLine":720
        }
      },
      "ann":["@Experimental","@LazyWhenPure"],
      "doc":["Updates `m` with `k => v1` if `k => v` is in `m` and `f(k, v) = Some(v1)`. Otherwise, returns `m`.","","Purity reflective: Applies `f` lazily if `f` is pure."],
      "name":"updateWithKey",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"k -> (v -> Option[v] & ef \\ ef')"
      },{
        "name":"k",
        "tpe":"k"
      },{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"DelayMap[k, v]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":720,
        "endLine":725
      }
    },{
      "sym":{
        "namespace":["DelayMap"],
        "name":"valuesOf",
        "loc":{
          "name":"DelayMap.flix",
          "beginLine":336,
          "endLine":336
        }
      },
      "ann":["@Experimental"],
      "doc":["Returns the values of `m`."],
      "name":"valuesOf",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"DelayMap[k, v]"
      }],
      "tpe":"List[v]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"DelayMap.flix",
        "beginLine":336,
        "endLine":337
      }
    }],
    "Assert":[{
      "sym":{
        "namespace":["Assert"],
        "name":"eq",
        "loc":{
          "name":"Assert.flix",
          "beginLine":23,
          "endLine":23
        }
      },
      "ann":[],
      "doc":["Asserts that `expected` must equal `actual`.","","Aborts execution if the two values are un-equal."],
      "name":"eq",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"expected",
        "tpe":"a"
      },{
        "name":"actual",
        "tpe":"a"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      },{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Assert.flix",
        "beginLine":23,
        "endLine":34
      }
    }],
    "Nec":[{
      "sym":{
        "namespace":["Nec"],
        "name":"ap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":385,
          "endLine":385
        }
      },
      "ann":[],
      "doc":["Apply every function from `f` to every argument from `x` and return a Nec with all results.","For `f = f1, f2, ...` and `x = x1, x2, ...` the results appear in the order","`f1(x1), f1(x2), ..., f2(x1), f2(x2), ...`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Nec[a -> b & ef \\ ef']"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":385,
        "endLine":390
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"append",
        "loc":{
          "name":"Nec.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Returns a new Nec formed by appending the Necs `c1` and `c2`."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Nec[a]"
      },{
        "name":"c2",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":237,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"cons",
        "loc":{
          "name":"Nec.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Add element `x` to the left end of Nec `c`."],
      "name":"cons",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":190,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"count",
        "loc":{
          "name":"Nec.flix",
          "beginLine":481,
          "endLine":481
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `c` that satisfy the predicate `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":481,
        "endLine":486
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"dropWhileLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":979,
          "endLine":979
        }
      },
      "ann":[],
      "doc":["Returns `c` without the longest prefix that satisfies the predicate `f`."],
      "name":"dropWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":979,
        "endLine":984
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"dropWhileRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":989,
          "endLine":989
        }
      },
      "ann":[],
      "doc":["Returns `c` without the longest sufffix that satisfies the predicate `f`."],
      "name":"dropWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":989,
        "endLine":994
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"enumerator",
        "loc":{
          "name":"Nec.flix",
          "beginLine":821,
          "endLine":821
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `c` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":821,
        "endLine":822
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"equals",
        "loc":{
          "name":"Nec.flix",
          "beginLine":165,
          "endLine":165
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `c1` and `c2` and equal."],
      "name":"equals",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Nec[a]"
      },{
        "name":"c2",
        "tpe":"Nec[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":165,
        "endLine":165
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"exists",
        "loc":{
          "name":"Nec.flix",
          "beginLine":525,
          "endLine":525
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `c` satisfies the predicate `f`.","","Returns `false` if `c` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":525,
        "endLine":528
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"filter",
        "loc":{
          "name":"Nec.flix",
          "beginLine":543,
          "endLine":543
        }
      },
      "ann":[],
      "doc":["Returns a list of every element in `c` that satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":543,
        "endLine":548
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"filterMap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":603,
          "endLine":603
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `c`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":603,
        "endLine":614
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"find",
        "loc":{
          "name":"Nec.flix",
          "beginLine":322,
          "endLine":322
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":322,
        "endLine":322
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"findLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":327,
          "endLine":327
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `c` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":327,
        "endLine":330
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"findMap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":621,
          "endLine":621
        }
      },
      "ann":[],
      "doc":["Returns the first non-None result of applying the partial function `f` to each element of `c`.","","Returns `None` if f(c) for every element of c is `None`."],
      "name":"findMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":621,
        "endLine":627
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"findRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":335,
          "endLine":335
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `c` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":335,
        "endLine":338
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"flatMap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":395,
          "endLine":395
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c` and concatenating the results."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Nec[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":395,
        "endLine":400
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"flatten",
        "loc":{
          "name":"Nec.flix",
          "beginLine":515,
          "endLine":515
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `c`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[Nec[a]]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":515,
        "endLine":518
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"fold",
        "loc":{
          "name":"Nec.flix",
          "beginLine":555,
          "endLine":555
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `l`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":555,
        "endLine":555
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"foldLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":562,
          "endLine":562
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `c` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"acc",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":562,
        "endLine":568
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"foldMap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":597,
          "endLine":597
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":597,
        "endLine":598
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"foldRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":575,
          "endLine":575
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `c` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":575,
        "endLine":581
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Nec.flix",
          "beginLine":589,
          "endLine":589
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `c` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":589,
        "endLine":592
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"forAll",
        "loc":{
          "name":"Nec.flix",
          "beginLine":535,
          "endLine":535
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `c` satisfy the predicate `f`.","","Returns `true` if `c` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":535,
        "endLine":538
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"forEach",
        "loc":{
          "name":"Nec.flix",
          "beginLine":733,
          "endLine":733
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `c`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":733,
        "endLine":736
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"head",
        "loc":{
          "name":"Nec.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Returns the first element of `c`."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":200,
        "endLine":203
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"indexOf",
        "loc":{
          "name":"Nec.flix",
          "beginLine":312,
          "endLine":312
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of `a` in `c`."],
      "name":"indexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":312,
        "endLine":317
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"init",
        "loc":{
          "name":"Nec.flix",
          "beginLine":216,
          "endLine":216
        }
      },
      "ann":[],
      "doc":["Returns the list of elements in `c` without the last element."],
      "name":"init",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":216,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"intersperse",
        "loc":{
          "name":"Nec.flix",
          "beginLine":467,
          "endLine":467
        }
      },
      "ann":[],
      "doc":["Returns `c` with `a` inserted between every two adjacent elements."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":467,
        "endLine":476
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"isSingleton",
        "loc":{
          "name":"Nec.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `c` is a single element Nec."],
      "name":"isSingleton",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":182,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"iterator",
        "loc":{
          "name":"Nec.flix",
          "beginLine":793,
          "endLine":793
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `c`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":793,
        "endLine":794
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"join",
        "loc":{
          "name":"Nec.flix",
          "beginLine":917,
          "endLine":917
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `c` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":917,
        "endLine":918
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"joinWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":924,
          "endLine":924
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `c` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":924,
        "endLine":925
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"last",
        "loc":{
          "name":"Nec.flix",
          "beginLine":208,
          "endLine":208
        }
      },
      "ann":[],
      "doc":["Returns the last element of `c`."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":208,
        "endLine":211
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"length",
        "loc":{
          "name":"Nec.flix",
          "beginLine":232,
          "endLine":232
        }
      },
      "ann":[],
      "doc":["Returns the length of `c`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":232,
        "endLine":232
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"map",
        "loc":{
          "name":"Nec.flix",
          "beginLine":361,
          "endLine":361
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c`.","","That is, the result is of the form: `f(x1) :: f(x2) :: ...`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":361,
        "endLine":366
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"mapAccumLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":700,
          "endLine":700
        }
      },
      "ann":[],
      "doc":["`mapAccumLeft` is a stateful version of `map`. The accumulating parameter `s` is updated at each","step in a left-to-right traversal."],
      "name":"mapAccumLeft",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> (a -> (s, b) & ef \\ ef')"
      },{
        "name":"start",
        "tpe":"s"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"(s, Nec[b])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":700,
        "endLine":711
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"mapAccumRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":717,
          "endLine":717
        }
      },
      "ann":[],
      "doc":["`mapAccumRight` is a stateful version of `map`. The accumulating parameter `s` is updated at each","step in a right-to-left traversal."],
      "name":"mapAccumRight",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> (a -> (s, b) & ef \\ ef')"
      },{
        "name":"start",
        "tpe":"s"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"(s, Nec[b])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":717,
        "endLine":728
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"mapWithIndex",
        "loc":{
          "name":"Nec.flix",
          "beginLine":373,
          "endLine":373
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `c` along with that element's index.","","That is, the result is of the form: `f(x1, 0) :: f(x2, 1) :: ...`."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":373,
        "endLine":378
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"maximum",
        "loc":{
          "name":"Nec.flix",
          "beginLine":300,
          "endLine":300
        }
      },
      "ann":[],
      "doc":["Finds the largest element of `c` according to the `Order` on `a`."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":300,
        "endLine":301
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"maximumBy",
        "loc":{
          "name":"Nec.flix",
          "beginLine":306,
          "endLine":306
        }
      },
      "ann":[],
      "doc":["Finds the largest element of `c` according to the given comparator `cmp`."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":306,
        "endLine":307
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"memberOf",
        "loc":{
          "name":"Nec.flix",
          "beginLine":277,
          "endLine":277
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `c` contains the element `a`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":277,
        "endLine":283
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"minimum",
        "loc":{
          "name":"Nec.flix",
          "beginLine":288,
          "endLine":288
        }
      },
      "ann":[],
      "doc":["Finds the smallest element of `c` according to the `Order` on `a`."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":288,
        "endLine":289
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"minimumBy",
        "loc":{
          "name":"Nec.flix",
          "beginLine":294,
          "endLine":294
        }
      },
      "ann":[],
      "doc":["Finds the smallest element of `c` according to the given comparator `cmp`."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":294,
        "endLine":295
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"permutations",
        "loc":{
          "name":"Nec.flix",
          "beginLine":428,
          "endLine":428
        }
      },
      "ann":[],
      "doc":["Returns all permutations of `c` in lexicographical order by element indices in `c`.","","That is, `c` is the first permutation and `reverse(c)` is the last permutation."],
      "name":"permutations",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":428,
        "endLine":434
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"product",
        "loc":{
          "name":"Nec.flix",
          "beginLine":503,
          "endLine":503
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":503,
        "endLine":504
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"productWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":509,
          "endLine":509
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":509,
        "endLine":510
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"range",
        "loc":{
          "name":"Nec.flix",
          "beginLine":345,
          "endLine":345
        }
      },
      "ann":[],
      "doc":["Returns a list of all integers between `b` (inclusive) and `e` (exclusive) wrapped in `Some`.","","Returns `None` if `b >= e`."],
      "name":"range",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"Option[Nec[Int32]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":345,
        "endLine":354
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reduce",
        "loc":{
          "name":"Nec.flix",
          "beginLine":931,
          "endLine":931
        }
      },
      "ann":[],
      "doc":["Applies `combine` to all elements in `c` until a single value is obtained."],
      "name":"reduce",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"SemiGroup",
          "loc":{
            "name":"SemiGroup.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":931,
        "endLine":934
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reduceLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":941,
          "endLine":941
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `c` going from left to right until a single value `v` is obtained.","","That is, the result is of the form: `f(...f(f(x1, x2), x3)..., xn)`"],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":941,
        "endLine":944
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reduceLeftTo",
        "loc":{
          "name":"Nec.flix",
          "beginLine":961,
          "endLine":961
        }
      },
      "ann":[],
      "doc":["Left-associative reduction of a structure.","Applies `g` to the initial element of `c` and combines it","with the remainder of `c` using `f` going from left to right."],
      "name":"reduceLeftTo",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef1 \\ ef1')"
      },{
        "name":"g",
        "tpe":"a -> b & ef2 \\ ef2'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":961,
        "endLine":964
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reduceRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":951,
          "endLine":951
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `c` going from right to left until a single value `v` is obtained.","","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`"],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":951,
        "endLine":954
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reduceRightTo",
        "loc":{
          "name":"Nec.flix",
          "beginLine":971,
          "endLine":971
        }
      },
      "ann":[],
      "doc":["Right-associative reduction of a structure.","Applies `g` to the initial element of `c` and combines it","with the remainder of `c` using `f` going from right to left."],
      "name":"reduceRightTo",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef1",
        "kind":"Bool"
      },{
        "name":"ef1",
        "kind":"Effect"
      },{
        "name":"ef2",
        "kind":"Bool"
      },{
        "name":"ef2",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef1 \\ ef1')"
      },{
        "name":"g",
        "tpe":"a -> b & ef2 \\ ef2'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"b",
      "eff":"ef1 and ef2",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":971,
        "endLine":974
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"replace",
        "loc":{
          "name":"Nec.flix",
          "beginLine":420,
          "endLine":420
        }
      },
      "ann":[],
      "doc":["Returns `l` with every occurrence of `from` replaced by `to`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"l",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":420,
        "endLine":421
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"reverse",
        "loc":{
          "name":"Nec.flix",
          "beginLine":405,
          "endLine":405
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `c`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":405,
        "endLine":415
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sequence",
        "loc":{
          "name":"Nec.flix",
          "beginLine":895,
          "endLine":895
        }
      },
      "ann":[],
      "doc":["Returns the result of running all the actions in the Nec `c`."],
      "name":"sequence",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[m[a]]"
      }],
      "tpe":"m[Nec[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":895,
        "endLine":900
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"shuffle",
        "loc":{
          "name":"Nec.flix",
          "beginLine":1020,
          "endLine":1020
        }
      },
      "ann":[],
      "doc":["Optionally returns the Nec `c` shuffled using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Option[Nec[a]]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":1020,
        "endLine":1022
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"singleton",
        "loc":{
          "name":"Nec.flix",
          "beginLine":177,
          "endLine":177
        }
      },
      "ann":[],
      "doc":["Return the singleton Nec with element `x`."],
      "name":"singleton",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":177,
        "endLine":177
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"snoc",
        "loc":{
          "name":"Nec.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Add element `x` to the right end of Nec `c`."],
      "name":"snoc",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":195,
        "endLine":195
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sort",
        "loc":{
          "name":"Nec.flix",
          "beginLine":845,
          "endLine":845
        }
      },
      "ann":[],
      "doc":["Sort Nec `c` so that elements are ordered from low to high according to their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":845,
        "endLine":851
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sortBy",
        "loc":{
          "name":"Nec.flix",
          "beginLine":861,
          "endLine":861
        }
      },
      "ann":[],
      "doc":["Sort Nec `c` so that elements are ordered from low to high according to the `Order` instance","for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":861,
        "endLine":867
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sortWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":876,
          "endLine":876
        }
      },
      "ann":[],
      "doc":["Sort Nec `c` so that elements are ordered from low to high according to the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `c`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":876,
        "endLine":882
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"subsequences",
        "loc":{
          "name":"Nec.flix",
          "beginLine":440,
          "endLine":440
        }
      },
      "ann":[],
      "doc":["Returns all subsequences of `l` in lexicographical order by element indices in `l`.","","That is, `l` is the first subsequence and `Nil` is the last subsequence."],
      "name":"subsequences",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":440,
        "endLine":446
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sum",
        "loc":{
          "name":"Nec.flix",
          "beginLine":491,
          "endLine":491
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the Nec `c`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":491,
        "endLine":492
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"sumWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":497,
          "endLine":497
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the Nec `c` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":497,
        "endLine":498
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"tail",
        "loc":{
          "name":"Nec.flix",
          "beginLine":224,
          "endLine":224
        }
      },
      "ann":[],
      "doc":["Returns all elements in `c` without the first element."],
      "name":"tail",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":224,
        "endLine":227
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"takeWhileLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":999,
          "endLine":999
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `c` that satisfies the predicate `f`."],
      "name":"takeWhileLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":999,
        "endLine":1004
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"takeWhileRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":1010,
          "endLine":1010
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `c` that satisfies the predicate `f`."],
      "name":"takeWhileRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":1010,
        "endLine":1015
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toArray",
        "loc":{
          "name":"Nec.flix",
          "beginLine":784,
          "endLine":784
        }
      },
      "ann":[],
      "doc":["Returns the Nec `c` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":784,
        "endLine":788
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toList",
        "loc":{
          "name":"Nec.flix",
          "beginLine":741,
          "endLine":741
        }
      },
      "ann":[],
      "doc":["Returns `c` as a list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":741,
        "endLine":742
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toMap",
        "loc":{
          "name":"Nec.flix",
          "beginLine":770,
          "endLine":770
        }
      },
      "ann":[],
      "doc":["Returns the Nec of pairs `c` that represents an association list as a map.","","If `c` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[(a, b)]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":770,
        "endLine":770
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toMapWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":778,
          "endLine":778
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `l` as keys and `f` applied as values.","","If `l` contains multiple mappings with the same key, `toMapWith` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"l",
        "tpe":"Nec[a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":778,
        "endLine":779
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toMutDeque",
        "loc":{
          "name":"Nec.flix",
          "beginLine":747,
          "endLine":747
        }
      },
      "ann":[],
      "doc":["Returns `c` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":747,
        "endLine":750
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toMutList",
        "loc":{
          "name":"Nec.flix",
          "beginLine":755,
          "endLine":755
        }
      },
      "ann":[],
      "doc":["Returns `c` as a mutable list."],
      "name":"toMutList",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":755,
        "endLine":757
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"toSet",
        "loc":{
          "name":"Nec.flix",
          "beginLine":762,
          "endLine":762
        }
      },
      "ann":[],
      "doc":["Returns the list `c` as a set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":762,
        "endLine":762
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"traverse",
        "loc":{
          "name":"Nec.flix",
          "beginLine":906,
          "endLine":906
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","Nec `c`."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"m[Nec[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":906,
        "endLine":911
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"unzip",
        "loc":{
          "name":"Nec.flix",
          "beginLine":666,
          "endLine":666
        }
      },
      "ann":[],
      "doc":["Returns a pair of Necs, the first containing all first components in `c`","and the second containing all second components in `c`."],
      "name":"unzip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[(a, b)]"
      }],
      "tpe":"(Nec[a], Nec[b])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":666,
        "endLine":671
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"viewLeft",
        "loc":{
          "name":"Nec.flix",
          "beginLine":247,
          "endLine":247
        }
      },
      "ann":[],
      "doc":["Deconstruct a Nec from left-to-right.","","Returns `SomeLeft(x, rs)` if the Nec has at least two elements, where `x` is the leftmost","element of the Nec `c`, and `rs` is the rest of the Nec.","","Returns `OneLeft` if the Nec has a single element."],
      "name":"viewLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"ViewLeft[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":247,
        "endLine":254
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"viewRight",
        "loc":{
          "name":"Nec.flix",
          "beginLine":265,
          "endLine":265
        }
      },
      "ann":[],
      "doc":["Deconstruct a Nec from right-to-left.","","Returns `SomeRight(rs, x)` if the Nec has at least two elements, where `x` is the rightmost","element of the Nec `c`, and `rs` is the front of the Nec.","","Returns `OneRight` if the Nec has a single element."],
      "name":"viewRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"ViewRight[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":265,
        "endLine":272
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"zip",
        "loc":{
          "name":"Nec.flix",
          "beginLine":635,
          "endLine":635
        }
      },
      "ann":[],
      "doc":["Returns a Nec where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `c1` and `b` is the element at index `i` in `c2`.","","If either `c1` or `c2` becomes depleted, then no further elements are added to the resulting Nec."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c1",
        "tpe":"Nec[a]"
      },{
        "name":"c2",
        "tpe":"Nec[b]"
      }],
      "tpe":"Nec[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":635,
        "endLine":642
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"zipWith",
        "loc":{
          "name":"Nec.flix",
          "beginLine":650,
          "endLine":650
        }
      },
      "ann":[],
      "doc":["Returns a Nec where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `c1` and `b` is the element at index `i` in `c2`.","","If either `c1` or `c2` becomes depleted, then no further elements are added to the resulting Nec."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"c1",
        "tpe":"Nec[a]"
      },{
        "name":"c2",
        "tpe":"Nec[b]"
      }],
      "tpe":"Nec[c]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":650,
        "endLine":660
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"zipWithA",
        "loc":{
          "name":"Nec.flix",
          "beginLine":687,
          "endLine":687
        }
      },
      "ann":[],
      "doc":["Generalize `zipWith` to an applicative functor `f`."],
      "name":"zipWithA",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> f[c] & ef \\ ef')"
      },{
        "name":"xs",
        "tpe":"Nec[a]"
      },{
        "name":"ys",
        "tpe":"Nec[b]"
      }],
      "tpe":"f[Nec[c]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"Nec.flix",
        "beginLine":687,
        "endLine":694
      }
    },{
      "sym":{
        "namespace":["Nec"],
        "name":"zipWithIndex",
        "loc":{
          "name":"Nec.flix",
          "beginLine":677,
          "endLine":677
        }
      },
      "ann":[],
      "doc":["Returns a Nec where each element `e` is mapped to `(e, i)` where `i`","is the index of `e`."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"c",
        "tpe":"Nec[a]"
      }],
      "tpe":"Nec[(a, Int32)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Nec.flix",
        "beginLine":677,
        "endLine":682
      }
    }],
    "List":[{
      "sym":{
        "namespace":["List"],
        "name":"ap",
        "loc":{
          "name":"List.flix",
          "beginLine":339,
          "endLine":339
        }
      },
      "ann":[],
      "doc":["Apply every function from `f` to every argument from `x` and return a list with all results.","For `f = f1, f2, ...` and `x = x1, x2, ...` the results appear in the order","`f1(x1), f1(x2), ..., f2(x1), f2(x2), ...`."],
      "name":"ap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"List[a -> b & ef \\ ef']"
      },{
        "name":"x",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":339,
        "endLine":340
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"append",
        "loc":{
          "name":"List.flix",
          "beginLine":179,
          "endLine":179
        }
      },
      "ann":[],
      "doc":["Returns `l2` appended to `l1`.","","The infix operator `:::` is an alias for `append` (`l1 ::: l2 = append(l1, l2)`)."],
      "name":"append",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":179,
        "endLine":180
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"count",
        "loc":{
          "name":"List.flix",
          "beginLine":682,
          "endLine":682
        }
      },
      "ann":[],
      "doc":["Returns the number of elements in `l` that satisfy the predicate `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":682,
        "endLine":683
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"distinct",
        "loc":{
          "name":"List.flix",
          "beginLine":1256,
          "endLine":1256
        }
      },
      "ann":[],
      "doc":["Returns the list `l` with duplicates removed. The first occurence of","an element is kept and except for the removal of subsequent duplicates","the order of `l` is preserved.","","`distinct` uses the Flix's builtin equality test. Use `distinctWith` if you","need a custom equality test."],
      "name":"distinct",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1256,
        "endLine":1265
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"distinctWith",
        "loc":{
          "name":"List.flix",
          "beginLine":1272,
          "endLine":1272
        }
      },
      "ann":[],
      "doc":["Returns the list `l` with duplicates removed using the supplied function","`f` for comparison. The first occurrence of an element is kept and except","for the removal of subsequent duplicates the order of `l` is preserved."],
      "name":"distinctWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> Bool)"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1272,
        "endLine":1281
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"drop",
        "loc":{
          "name":"List.flix",
          "beginLine":810,
          "endLine":810
        }
      },
      "ann":[],
      "doc":["Returns `l` without the first `n` elements.","","Returns `Nil` if `n > length(l)`.","Returns `l` if `n < 0`."],
      "name":"drop",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":810,
        "endLine":814
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"dropWhile",
        "loc":{
          "name":"List.flix",
          "beginLine":819,
          "endLine":819
        }
      },
      "ann":[],
      "doc":["Returns `l` without the longest prefix that satisfies the predicate `f`."],
      "name":"dropWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":819,
        "endLine":822
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"enumerator",
        "loc":{
          "name":"List.flix",
          "beginLine":1315,
          "endLine":1315
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1315,
        "endLine":1316
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"exists",
        "loc":{
          "name":"List.flix",
          "beginLine":712,
          "endLine":712
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in `l` satisfies the predicate `f`.","","Returns `false` if `l` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":712,
        "endLine":715
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"filter",
        "loc":{
          "name":"List.flix",
          "beginLine":730,
          "endLine":730
        }
      },
      "ann":[],
      "doc":["Returns a list of every element in `l` that satisfies the predicate `f`."],
      "name":"filter",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":730,
        "endLine":735
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"filterMap",
        "loc":{
          "name":"List.flix",
          "beginLine":1039,
          "endLine":1039
        }
      },
      "ann":[],
      "doc":["Collects the results of applying the partial function `f` to every element in `l`."],
      "name":"filterMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1039,
        "endLine":1047
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"find",
        "loc":{
          "name":"List.flix",
          "beginLine":235,
          "endLine":235
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":235,
        "endLine":235
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"findLeft",
        "loc":{
          "name":"List.flix",
          "beginLine":240,
          "endLine":240
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from left to right."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":240,
        "endLine":243
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"findMap",
        "loc":{
          "name":"List.flix",
          "beginLine":1054,
          "endLine":1054
        }
      },
      "ann":[],
      "doc":["Returns the first non-None result of applying the partial function `f` to each element of `l`.","","Returns `None` if every element of `l` is `None`."],
      "name":"findMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Option[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1054,
        "endLine":1060
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"findRight",
        "loc":{
          "name":"List.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of `l` that satisfies the predicate `f` when searching from right to left."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":248,
        "endLine":253
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"flatMap",
        "loc":{
          "name":"List.flix",
          "beginLine":389,
          "endLine":389
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l` and concatenating the results."],
      "name":"flatMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> List[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":389,
        "endLine":394
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"flatten",
        "loc":{
          "name":"List.flix",
          "beginLine":700,
          "endLine":700
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `l`."],
      "name":"flatten",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[List[a]]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":700,
        "endLine":705
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"fold",
        "loc":{
          "name":"List.flix",
          "beginLine":614,
          "endLine":614
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `combine` to all the elements in `l`, using `empty` as the initial value."],
      "name":"fold",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"a",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":614,
        "endLine":614
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"fold2",
        "loc":{
          "name":"List.flix",
          "beginLine":1006,
          "endLine":1006
        }
      },
      "ann":[],
      "doc":["Alias for `foldLeft2`."],
      "name":"fold2",
      "tparams":[{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"c -> (a -> (b -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      }],
      "tpe":"c",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1006,
        "endLine":1006
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldLeft",
        "loc":{
          "name":"List.flix",
          "beginLine":621,
          "endLine":621
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from left to right.","","That is, the result is of the form: `f(...f(f(s, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":621,
        "endLine":624
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldLeft2",
        "loc":{
          "name":"List.flix",
          "beginLine":1012,
          "endLine":1012
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `l1` and `l2`","starting with the initial value `c` and going from left to right."],
      "name":"foldLeft2",
      "tparams":[{
        "name":"c",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"c -> (a -> (b -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      }],
      "tpe":"c",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1012,
        "endLine":1015
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldMap",
        "loc":{
          "name":"List.flix",
          "beginLine":1033,
          "endLine":1033
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1033,
        "endLine":1034
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldRight",
        "loc":{
          "name":"List.flix",
          "beginLine":631,
          "endLine":631
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `s` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, s))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":631,
        "endLine":636
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldRight2",
        "loc":{
          "name":"List.flix",
          "beginLine":1021,
          "endLine":1021
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `l1` and `l2`","starting with the initial value `c` and going from right to left."],
      "name":"foldRight2",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> (c -> c & ef \\ ef'))"
      },{
        "name":"c",
        "tpe":"c"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      }],
      "tpe":"c",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1021,
        "endLine":1028
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"List.flix",
          "beginLine":645,
          "endLine":645
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in `l` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":645,
        "endLine":648
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"forAll",
        "loc":{
          "name":"List.flix",
          "beginLine":722,
          "endLine":722
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in `l` satisfy the predicate `f`.","","Returns `true` if `l` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":722,
        "endLine":725
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"forEach",
        "loc":{
          "name":"List.flix",
          "beginLine":1132,
          "endLine":1132
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of `l`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1132,
        "endLine":1135
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"groupBy",
        "loc":{
          "name":"List.flix",
          "beginLine":871,
          "endLine":871
        }
      },
      "ann":[],
      "doc":["Partitions `l` into sublists such that for any two elements `x` and `y` in a sublist, `f(x, y)` is true.","","A sublist is created by iterating through the remaining elements of `l` from left to right and adding an","element to the sublist if and only if doing so creates no conflicts with the elements already in the sublist.","","The function `f` must be pure."],
      "name":"groupBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> Bool)"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":871,
        "endLine":878
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"head",
        "loc":{
          "name":"List.flix",
          "beginLine":148,
          "endLine":148
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the first element of `l`.","","Returns `None` if `l` is empty."],
      "name":"head",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":148,
        "endLine":151
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"indexOf",
        "loc":{
          "name":"List.flix",
          "beginLine":225,
          "endLine":225
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of `x` in `l`."],
      "name":"indexOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":225,
        "endLine":230
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"init",
        "loc":{
          "name":"List.flix",
          "beginLine":741,
          "endLine":741
        }
      },
      "ann":[],
      "doc":["Returns the sublist of `l` without the last element.","Returns `None` if the list `l` is `Nil`."],
      "name":"init",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":741,
        "endLine":747
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"intercalate",
        "loc":{
          "name":"List.flix",
          "beginLine":543,
          "endLine":543
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the elements in `l2` with the elements of `l1` inserted between every two adjacent elements.","","That is, returns `y1 :: x1 ... xn :: y2 :: ... yn-1 :: x1 :: ... :: xn :: yn :: Nil`."],
      "name":"intercalate",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[List[a]]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":543,
        "endLine":549
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"intersperse",
        "loc":{
          "name":"List.flix",
          "beginLine":531,
          "endLine":531
        }
      },
      "ann":[],
      "doc":["Returns `l` with `x` inserted between every two adjacent elements."],
      "name":"intersperse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":531,
        "endLine":536
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"isEmpty",
        "loc":{
          "name":"List.flix",
          "beginLine":138,
          "endLine":138
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `l` is the empty list, i.e. `Nil`."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":138,
        "endLine":141
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"isInfixOf",
        "loc":{
          "name":"List.flix",
          "beginLine":600,
          "endLine":600
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `l1` is an infix of `l2`."],
      "name":"isInfixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":600,
        "endLine":604
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"isPrefixOf",
        "loc":{
          "name":"List.flix",
          "beginLine":591,
          "endLine":591
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `l1` is a prefix of `l2`."],
      "name":"isPrefixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":591,
        "endLine":595
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"isSuffixOf",
        "loc":{
          "name":"List.flix",
          "beginLine":609,
          "endLine":609
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `l1` is a suffix of `l2`."],
      "name":"isSuffixOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":609,
        "endLine":609
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"iterator",
        "loc":{
          "name":"List.flix",
          "beginLine":1298,
          "endLine":1298
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1298,
        "endLine":1310
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"join",
        "loc":{
          "name":"List.flix",
          "beginLine":1066,
          "endLine":1066
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `l` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1066,
        "endLine":1067
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"joinWith",
        "loc":{
          "name":"List.flix",
          "beginLine":1073,
          "endLine":1073
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `l` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1073,
        "endLine":1074
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"last",
        "loc":{
          "name":"List.flix",
          "beginLine":158,
          "endLine":158
        }
      },
      "ann":[],
      "doc":["Returns `Some(x)` if `x` is the last element of `l`.","","Returns `None` if `l` is empty."],
      "name":"last",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":158,
        "endLine":162
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"length",
        "loc":{
          "name":"List.flix",
          "beginLine":167,
          "endLine":167
        }
      },
      "ann":[],
      "doc":["Returns the length of `l`."],
      "name":"length",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":167,
        "endLine":172
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"lift2",
        "loc":{
          "name":"List.flix",
          "beginLine":348,
          "endLine":348
        }
      },
      "ann":[],
      "doc":["Lift a binary function to work on lists of its original arguments, returning a list","of applying all combinations of arguments.","For argument lists `l1 = x1, x2, ...` and `l2 = y1, y2, ...` the results appear in the order","`f(x1,y1), f(x1,y2), ..., f(x2,y1), f(x2,y2), ...`."],
      "name":"lift2",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> r & ef \\ ef')"
      },{
        "name":"l1",
        "tpe":"List[t1]"
      },{
        "name":"l2",
        "tpe":"List[t2]"
      }],
      "tpe":"List[r]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":348,
        "endLine":348
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"lift3",
        "loc":{
          "name":"List.flix",
          "beginLine":362,
          "endLine":362
        }
      },
      "ann":[],
      "doc":["Lift a ternary function to work on lists of its original arguments, returning a list","of applying all combinations of arguments.","For argument lists `l1 = x1, x2, ...`, `l2 = y1, y2, ...` and `l3 = z1, z2, ...` the results appear","in the following order:","","```","f(x1,y1,z1), f(x1,y1,z2), ..., f(x1,y2,z1), f(x1,y2,z2), ...,","f(x2,y1,z1), f(x2,y1,z2), ..., f(x2,y2,z1), f(x2,y2,z2), ...`","...","```"],
      "name":"lift3",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> r & ef \\ ef'))"
      },{
        "name":"l1",
        "tpe":"List[t1]"
      },{
        "name":"l2",
        "tpe":"List[t2]"
      },{
        "name":"l3",
        "tpe":"List[t3]"
      }],
      "tpe":"List[r]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":362,
        "endLine":362
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"lift4",
        "loc":{
          "name":"List.flix",
          "beginLine":366,
          "endLine":366
        }
      },
      "ann":[],
      "doc":["Lift a 4-ary function to work on lists of its original arguments, returning a list","of applying all combinations of arguments. The results appear in the order extending the pattern from `lift3`."],
      "name":"lift4",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> r & ef \\ ef')))"
      },{
        "name":"l1",
        "tpe":"List[t1]"
      },{
        "name":"l2",
        "tpe":"List[t2]"
      },{
        "name":"l3",
        "tpe":"List[t3]"
      },{
        "name":"l4",
        "tpe":"List[t4]"
      }],
      "tpe":"List[r]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":366,
        "endLine":366
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"lift5",
        "loc":{
          "name":"List.flix",
          "beginLine":370,
          "endLine":370
        }
      },
      "ann":[],
      "doc":["Lift a 5-ary function to work on lists of its original arguments, returning a list","of applying all combinations of arguments. The results appear in the order extending the pattern from `lift3`."],
      "name":"lift5",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> r & ef \\ ef'))))"
      },{
        "name":"l1",
        "tpe":"List[t1]"
      },{
        "name":"l2",
        "tpe":"List[t2]"
      },{
        "name":"l3",
        "tpe":"List[t3]"
      },{
        "name":"l4",
        "tpe":"List[t4]"
      },{
        "name":"l5",
        "tpe":"List[t5]"
      }],
      "tpe":"List[r]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":370,
        "endLine":370
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"map",
        "loc":{
          "name":"List.flix",
          "beginLine":319,
          "endLine":319
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l`.","","That is, the result is of the form: `f(x1) :: f(x2) :: ...`."],
      "name":"map",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":319,
        "endLine":327
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"mapWithIndex",
        "loc":{
          "name":"List.flix",
          "beginLine":377,
          "endLine":377
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every element in `l` along with that element's index.","","That is, the result is of the form: `f(x1, 0) :: f(x2, 1) :: ...`."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (a -> b & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":377,
        "endLine":384
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"maximum",
        "loc":{
          "name":"List.flix",
          "beginLine":211,
          "endLine":211
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `l` according to the `Order` on `a`.","","Returns `None` if `l` is empty."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":211,
        "endLine":212
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"maximumBy",
        "loc":{
          "name":"List.flix",
          "beginLine":219,
          "endLine":219
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `l` according to the given comparator `cmp`.","","Returns `None` if `l` is empty."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":219,
        "endLine":220
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"memberOf",
        "loc":{
          "name":"List.flix",
          "beginLine":185,
          "endLine":185
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `l` contains the element `x`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":185,
        "endLine":188
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"merge",
        "loc":{
          "name":"List.flix",
          "beginLine":1364,
          "endLine":1364
        }
      },
      "ann":[],
      "doc":["Merges the two lists `l1` and `l2`. Assuming they are both sorted.","If two elements compare `EqualTo`, then the element of `l1` is first in the result."],
      "name":"merge",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1364,
        "endLine":1375
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"minimum",
        "loc":{
          "name":"List.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `l` according to the `Order` on `a`.","","Returns `None` if `l` is empty."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":195,
        "endLine":196
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"minimumBy",
        "loc":{
          "name":"List.flix",
          "beginLine":203,
          "endLine":203
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `l` according to the given comparator `cmp`.","","Returns `None` if `l` is empty."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":203,
        "endLine":204
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"partition",
        "loc":{
          "name":"List.flix",
          "beginLine":774,
          "endLine":774
        }
      },
      "ann":[],
      "doc":["Returns a pair of lists `(l1, l2)`.","","`l1` contains all elements of `l` that satisfy the predicate `f`.","`l2` contains all elements of `l` that do not satisfy the predicate `f`."],
      "name":"partition",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"(List[a], List[a])",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":774,
        "endLine":783
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"patch",
        "loc":{
          "name":"List.flix",
          "beginLine":455,
          "endLine":455
        }
      },
      "ann":[],
      "doc":["Returns `l2` with the `n` elements starting at index `i` replaced with the elements of `l1`.","","If any of the indices `i, i+1, i+2, ... , i+n-1` are out of range in `l2` then no patching is done at these indices.","If `l1` becomes depleted then no further patching is done.","If patching occurs at index `i+j` in `l2`, then the element at index `j` in `l1` is used."],
      "name":"patch",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":455,
        "endLine":465
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"permutations",
        "loc":{
          "name":"List.flix",
          "beginLine":472,
          "endLine":472
        }
      },
      "ann":[],
      "doc":["Returns all permutations of `l` in lexicographical order by element indices in `l`.","","That is, `l` is the first permutation and `reverse(l)` is the last permutation."],
      "name":"permutations",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":472,
        "endLine":475
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"point",
        "loc":{
          "name":"List.flix",
          "beginLine":332,
          "endLine":332
        }
      },
      "ann":[],
      "doc":["Return the singleton list with element `x`."],
      "name":"point",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"a"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":332,
        "endLine":332
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"product",
        "loc":{
          "name":"List.flix",
          "beginLine":688,
          "endLine":688
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l`."],
      "name":"product",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"List[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":688,
        "endLine":689
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"productWith",
        "loc":{
          "name":"List.flix",
          "beginLine":694,
          "endLine":694
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the list `l` according to the function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":694,
        "endLine":695
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"range",
        "loc":{
          "name":"List.flix",
          "beginLine":260,
          "endLine":260
        }
      },
      "ann":[],
      "doc":["Returns a list of all integers between `b` (inclusive) and `e` (exclusive).","","Returns `Nil` if `b >= e`."],
      "name":"range",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      }],
      "tpe":"List[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":260,
        "endLine":266
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"reduceLeft",
        "loc":{
          "name":"List.flix",
          "beginLine":657,
          "endLine":657
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `l` going from left to right until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(x1, x2), x3)..., xn))`","","Returns `None` if `l` is empty."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":657,
        "endLine":660
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"reduceRight",
        "loc":{
          "name":"List.flix",
          "beginLine":669,
          "endLine":669
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in `l` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`","","Returns `None` if `l` is empty."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":669,
        "endLine":677
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"repeat",
        "loc":{
          "name":"List.flix",
          "beginLine":273,
          "endLine":273
        }
      },
      "ann":[],
      "doc":["Returns a list with the element `x` repeated `n` times.","","Returns `Nil` if `n < 0`."],
      "name":"repeat",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"a"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":273,
        "endLine":279
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"replace",
        "loc":{
          "name":"List.flix",
          "beginLine":446,
          "endLine":446
        }
      },
      "ann":[],
      "doc":["Returns `l` with every occurrence of `from` replaced by `to`."],
      "name":"replace",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":446,
        "endLine":446
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"reverse",
        "loc":{
          "name":"List.flix",
          "beginLine":399,
          "endLine":399
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `l`."],
      "name":"reverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":399,
        "endLine":404
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"rotateLeft",
        "loc":{
          "name":"List.flix",
          "beginLine":412,
          "endLine":412
        }
      },
      "ann":[],
      "doc":["Returns `l` with its elements rotated `n` positions to the left.","","That is, returns a new list where the first `n mod length(l)` elements in `l`","are the last `n mod length(l)` elements of the new list."],
      "name":"rotateLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":412,
        "endLine":420
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"rotateRight",
        "loc":{
          "name":"List.flix",
          "beginLine":428,
          "endLine":428
        }
      },
      "ann":[],
      "doc":["Returns `l` with its elements rotated `n` positions to the right.","","That is, returns a new list where the last `n mod length(l)` elements in `l`","are the first `n mod length(l)` elements of the new list."],
      "name":"rotateRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":428,
        "endLine":428
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"scan",
        "loc":{
          "name":"List.flix",
          "beginLine":284,
          "endLine":284
        }
      },
      "ann":[],
      "doc":["Alias for `scanLeft`."],
      "name":"scan",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":284,
        "endLine":284
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"scanLeft",
        "loc":{
          "name":"List.flix",
          "beginLine":291,
          "endLine":291
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `l` going left to right.","","That is, the result is of the form: `s :: f(s, x1) :: f(f(s, x1), x2)  ...`."],
      "name":"scanLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":291,
        "endLine":298
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"scanRight",
        "loc":{
          "name":"List.flix",
          "beginLine":305,
          "endLine":305
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` to `l` going right to left.","","That is, the result is of the form: `... f(xn-1, f(xn, s)) :: f(xn, s) :: s`."],
      "name":"scanRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[b]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":305,
        "endLine":312
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sequence",
        "loc":{
          "name":"List.flix",
          "beginLine":1342,
          "endLine":1342
        }
      },
      "ann":[],
      "doc":["Returns the result of running all the actions in the list `l` going from left","to right."],
      "name":"sequence",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[m[a]]"
      }],
      "tpe":"m[List[a]]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1342,
        "endLine":1347
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"shuffle",
        "loc":{
          "name":"List.flix",
          "beginLine":1380,
          "endLine":1380
        }
      },
      "ann":[],
      "doc":["Shuffles `l` using the Fisher\u2013Yates shuffle."],
      "name":"shuffle",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"rnd",
        "tpe":"Random"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"false",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1380,
        "endLine":1382
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"slice",
        "loc":{
          "name":"List.flix",
          "beginLine":755,
          "endLine":755
        }
      },
      "ann":[],
      "doc":["Returns the sublist of `l` from index `b` (inclusive) to index `e` (exclusive).","","That is, an element at index `i` in `l` is part of the returned sublist if and only if `i >= b` and `i < e`.","Note: Indices that are out of bounds in `l` are not considered (i.e. slice(b, e, l) = slice(max(0,b), min(length(l),e), l))."],
      "name":"slice",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":755,
        "endLine":766
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sort",
        "loc":{
          "name":"List.flix",
          "beginLine":1175,
          "endLine":1175
        }
      },
      "ann":[],
      "doc":["Sort list `l` so that elements are ordered from low to high according to their `Order` instance.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sort",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1175,
        "endLine":1177
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sortBy",
        "loc":{
          "name":"List.flix",
          "beginLine":1186,
          "endLine":1186
        }
      },
      "ann":[],
      "doc":["Sort list `l` so that elements are ordered from low to high according to the `Order` instance","for the values obtained by applying `f` to each element.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sortBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1186,
        "endLine":1188
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sortWith",
        "loc":{
          "name":"List.flix",
          "beginLine":1197,
          "endLine":1197
        }
      },
      "ann":[],
      "doc":["Sort list `l` so that elements are ordered from low to high according to the comparison function `cmp`.","","The sort is not stable, i.e., equal elements may appear in a different order than in the input `l`.","","The sort implementation is a Quicksort."],
      "name":"sortWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison)"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1197,
        "endLine":1199
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"span",
        "loc":{
          "name":"List.flix",
          "beginLine":793,
          "endLine":793
        }
      },
      "ann":[],
      "doc":["Returns a pair of lists `(l1, l2)`.","","`l1` is the longest prefix of `l` that satisfies the predicate `f`.","`l2` is the remainder of `l`.","","The function `f` must be pure."],
      "name":"span",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"(List[a], List[a])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":793,
        "endLine":802
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"splitAt",
        "loc":{
          "name":"List.flix",
          "beginLine":860,
          "endLine":860
        }
      },
      "ann":[],
      "doc":["Split the list `xs` at the position `n` returning the left and right parts.","Position `n` is included in the right part.","","Example: `splitAt(2, 1::2::3::4::Nil)` returns `(1::2::Nil, 3::4::Nil)`","","Returns `(xs, Nil)` if `n > length(xs)`.","Returns `(Nil, xs)` if `n < 0`."],
      "name":"splitAt",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"xs",
        "tpe":"List[a]"
      }],
      "tpe":"(List[a], List[a])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":860,
        "endLine":861
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"subsequences",
        "loc":{
          "name":"List.flix",
          "beginLine":510,
          "endLine":510
        }
      },
      "ann":[],
      "doc":["Returns all subsequences of `l` in lexicographical order by element indices in `l`.","","That is, `l` is the first subsequence and `Nil` is the last subsequence."],
      "name":"subsequences",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":510,
        "endLine":515
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sum",
        "loc":{
          "name":"List.flix",
          "beginLine":1286,
          "endLine":1286
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the list `l`."],
      "name":"sum",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"List[Int32]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1286,
        "endLine":1287
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"sumWith",
        "loc":{
          "name":"List.flix",
          "beginLine":1292,
          "endLine":1292
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the list `l` according to the function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1292,
        "endLine":1293
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"take",
        "loc":{
          "name":"List.flix",
          "beginLine":830,
          "endLine":830
        }
      },
      "ann":[],
      "doc":["Returns the first `n` elements of `l`.","","Returns `l` if `n > length(l)`.","Returns `Nil` if `n < 0`."],
      "name":"take",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":830,
        "endLine":839
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"takeWhile",
        "loc":{
          "name":"List.flix",
          "beginLine":844,
          "endLine":844
        }
      },
      "ann":[],
      "doc":["Returns the longest prefix of `l` that satisfies the predicate `f`."],
      "name":"takeWhile",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":844,
        "endLine":849
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toArray",
        "loc":{
          "name":"List.flix",
          "beginLine":1140,
          "endLine":1140
        }
      },
      "ann":[],
      "doc":["Returns the list `l` as an array."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Array[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1140,
        "endLine":1146
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toChain",
        "loc":{
          "name":"List.flix",
          "beginLine":1087,
          "endLine":1087
        }
      },
      "ann":[],
      "doc":["Returns the list `l` as a chain."],
      "name":"toChain",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Chain[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1087,
        "endLine":1088
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toDelayList",
        "loc":{
          "name":"List.flix",
          "beginLine":1079,
          "endLine":1079
        }
      },
      "ann":[],
      "doc":["Returns the elements of `l` as a `DelayList`."],
      "name":"toDelayList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"DelayList[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1079,
        "endLine":1082
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toDelayMap",
        "loc":{
          "name":"List.flix",
          "beginLine":1324,
          "endLine":1324
        }
      },
      "ann":[],
      "doc":["Returns the association list `l` as a `DelayMap`.","","If `l` contains multiple mappings with the same key, `toDelayMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toDelayMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[(a, b)]"
      }],
      "tpe":"DelayMap[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1324,
        "endLine":1325
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toMap",
        "loc":{
          "name":"List.flix",
          "beginLine":1117,
          "endLine":1117
        }
      },
      "ann":[],
      "doc":["Returns the association list `l` as a map.","","If `l` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[(a, b)]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1117,
        "endLine":1118
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toMapWith",
        "loc":{
          "name":"List.flix",
          "beginLine":1126,
          "endLine":1126
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `s` as keys and `f` applied as values.","","If `s` contains multiple mappings with the same key, `toMapWith` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1126,
        "endLine":1127
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toMutDeque",
        "loc":{
          "name":"List.flix",
          "beginLine":1093,
          "endLine":1093
        }
      },
      "ann":[],
      "doc":["Returns `l` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"MutDeque[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1093,
        "endLine":1096
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toMutList",
        "loc":{
          "name":"List.flix",
          "beginLine":1101,
          "endLine":1101
        }
      },
      "ann":[],
      "doc":["Returns `l` as a mutable list."],
      "name":"toMutList",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"MutList[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1101,
        "endLine":1103
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toNec",
        "loc":{
          "name":"List.flix",
          "beginLine":1163,
          "endLine":1163
        }
      },
      "ann":[],
      "doc":["Returns the list `l` as `Option[Nec[a]]`.","","If `l` is empty return `None`, otherwise return the Nec wrapped in `Some`."],
      "name":"toNec",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[Nec[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1163,
        "endLine":1166
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toNel",
        "loc":{
          "name":"List.flix",
          "beginLine":1153,
          "endLine":1153
        }
      },
      "ann":[],
      "doc":["Returns the list `l` as `Option[Nel[a]]`.","","If `l` is empty return `None`, otherwise return the Nel wrapped in `Some`."],
      "name":"toNel",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Option[Nel[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1153,
        "endLine":1156
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toSet",
        "loc":{
          "name":"List.flix",
          "beginLine":1108,
          "endLine":1108
        }
      },
      "ann":[],
      "doc":["Returns the list `l` as a set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Set[a]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1108,
        "endLine":1109
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"toString",
        "loc":{
          "name":"List.flix",
          "beginLine":127,
          "endLine":127
        }
      },
      "ann":[],
      "doc":["Renders the list `l` to a String."],
      "name":"toString",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":127,
        "endLine":133
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"transpose",
        "loc":{
          "name":"List.flix",
          "beginLine":556,
          "endLine":556
        }
      },
      "ann":[],
      "doc":["Returns the transpose of `l`.","","Returns `l` if the dimensions of the elements of `l` are mismatched."],
      "name":"transpose",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[List[a]]"
      }],
      "tpe":"List[List[a]]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":556,
        "endLine":561
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"traverse",
        "loc":{
          "name":"List.flix",
          "beginLine":1353,
          "endLine":1353
        }
      },
      "ann":[],
      "doc":["Returns the result of applying the applicative mapping function `f` to all the elements of the","list `l` going from left to right."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> m[b] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"m[List[b]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":1353,
        "endLine":1358
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"unfold",
        "loc":{
          "name":"List.flix",
          "beginLine":1208,
          "endLine":1208
        }
      },
      "ann":[],
      "doc":["Build a list by applying `f` to the seed value `st`.","","`f` should return `Some(a,st1)` to signal a new list element `a` and a new seed value `st1`.","","`f` should return `None` to signal the end of building the list."],
      "name":"unfold",
      "tparams":[{
        "name":"s",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"s -> Option[(a, s)] & ef \\ ef'"
      },{
        "name":"st",
        "tpe":"s"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1208,
        "endLine":1213
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"unfoldWithIter",
        "loc":{
          "name":"List.flix",
          "beginLine":1223,
          "endLine":1223
        }
      },
      "ann":[],
      "doc":["Build a list by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Some(a)` to signal a new list element `a`.","","`next` should return `None` to signal the end of building the list."],
      "name":"unfoldWithIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"next",
        "tpe":"Unit -> Option[a] & ef \\ ef'"
      }],
      "tpe":"List[a]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1223,
        "endLine":1228
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"unfoldWithOkIter",
        "loc":{
          "name":"List.flix",
          "beginLine":1240,
          "endLine":1240
        }
      },
      "ann":[],
      "doc":["Build a list by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Ok(Some(a)` to signal a new list element `Ok(a)`.","","`next` should return `Ok(None)` to signal the end of building the list.","","`next` should return `Err(e)` to signal that an error occurred. The function returns `Err(e)`."],
      "name":"unfoldWithOkIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"next",
        "tpe":"Unit -> Result[Option[a], e] & ef \\ ef'"
      }],
      "tpe":"Result[List[a], e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":1240,
        "endLine":1246
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"unzip",
        "loc":{
          "name":"List.flix",
          "beginLine":958,
          "endLine":958
        }
      },
      "ann":[],
      "doc":["Returns a pair of lists, the first containing all first components in `l`","and the second containing all second components in `l`."],
      "name":"unzip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[(a, b)]"
      }],
      "tpe":"(List[a], List[b])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":958,
        "endLine":963
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"unzip3",
        "loc":{
          "name":"List.flix",
          "beginLine":996,
          "endLine":996
        }
      },
      "ann":[],
      "doc":["Returns a triple of lists, the first containing all first components in `l`","the second containing all second components in `l` and the third containing all","third components in `l`."],
      "name":"unzip3",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[(a, b, c)]"
      }],
      "tpe":"(List[a], List[b], List[c])",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":996,
        "endLine":1001
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"update",
        "loc":{
          "name":"List.flix",
          "beginLine":435,
          "endLine":435
        }
      },
      "ann":[],
      "doc":["Returns `l` with the element at index `i` replaced by `x`.","","Returns `l` if `i < 0` or `i > length(l)-1`."],
      "name":"update",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"a"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[a]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":435,
        "endLine":441
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zip",
        "loc":{
          "name":"List.flix",
          "beginLine":907,
          "endLine":907
        }
      },
      "ann":[],
      "doc":["Returns a list where the element at index `i` is `(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` becomes depleted, then no further elements are added to the resulting list."],
      "name":"zip",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      }],
      "tpe":"List[(a, b)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":907,
        "endLine":912
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zip3",
        "loc":{
          "name":"List.flix",
          "beginLine":972,
          "endLine":972
        }
      },
      "ann":[],
      "doc":["Returns a list where the element at index `i` is `(a, b, c)` where","`a` is the element at index `i` in `l1`, `b` is the element at index `i` in `l2`","and `c` is the element at index `i` in `l3`.","","If any one of `l1`, `l2` or `l3` become depleted, then no further elements are added to the resulting list."],
      "name":"zip3",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      },{
        "name":"l3",
        "tpe":"List[c]"
      }],
      "tpe":"List[(a, b, c)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":972,
        "endLine":973
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zipWith",
        "loc":{
          "name":"List.flix",
          "beginLine":920,
          "endLine":920
        }
      },
      "ann":[],
      "doc":["Returns a list where the element at index `i` is `f(a, b)` where","`a` is the element at index `i` in `l1` and `b` is the element at index `i` in `l2`.","","If either `l1` or `l2` becomes depleted, then no further elements are added to the resulting list."],
      "name":"zipWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> c & ef \\ ef')"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      }],
      "tpe":"List[c]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":920,
        "endLine":927
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zipWith3",
        "loc":{
          "name":"List.flix",
          "beginLine":982,
          "endLine":982
        }
      },
      "ann":[],
      "doc":["Returns a list where the element at index `i` is `f(a, b, c)` where","`a` is the element at index `i` in `l1`, `b` is the element at index `i` in `l2`","and `c` is the element at index `i` in `l3`.","","If any one of `l1`, `l2` or `l3` become depleted, then no further elements are added to the resulting list."],
      "name":"zipWith3",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"c",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"d",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> (c -> d & ef \\ ef'))"
      },{
        "name":"l1",
        "tpe":"List[a]"
      },{
        "name":"l2",
        "tpe":"List[b]"
      },{
        "name":"l3",
        "tpe":"List[c]"
      }],
      "tpe":"List[d]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":982,
        "endLine":989
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zipWithA",
        "loc":{
          "name":"List.flix",
          "beginLine":943,
          "endLine":943
        }
      },
      "ann":[],
      "doc":["Generalize `zipWith` to an applicative functor `f`."],
      "name":"zipWithA",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"f",
        "kind":"Type -> Type"
      },{
        "name":"c",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> f[c] & ef \\ ef')"
      },{
        "name":"xs",
        "tpe":"List[a]"
      },{
        "name":"ys",
        "tpe":"List[b]"
      }],
      "tpe":"f[List[c]]",
      "eff":"ef",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Applicative",
          "loc":{
            "name":"Applicative.flix",
            "beginLine":37,
            "endLine":37
          }
        },
        "tpe":"f"
      }],
      "loc":{
        "name":"List.flix",
        "beginLine":943,
        "endLine":950
      }
    },{
      "sym":{
        "namespace":["List"],
        "name":"zipWithIndex",
        "loc":{
          "name":"List.flix",
          "beginLine":933,
          "endLine":933
        }
      },
      "ann":[],
      "doc":["Returns a list where each element `e` is mapped to `(e, i)` where `i`","is the index of `e`."],
      "name":"zipWithIndex",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"List[(a, Int32)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"List.flix",
        "beginLine":933,
        "endLine":938
      }
    }],
    "StringBuilder":[{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"append!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":42,
          "endLine":42
        }
      },
      "ann":[],
      "doc":["Append `x` to the StringBuilder `sb`."],
      "name":"append!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":42,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLine!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Append the String `s` followed by the system line separator to the StringBuilder `sb`."],
      "name":"appendLine!",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":65,
        "endLine":67
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLineSeparator!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":59,
          "endLine":59
        }
      },
      "ann":[],
      "doc":["Append the system line separator to the StringBuilder `sb`."],
      "name":"appendLineSeparator!",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":59,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLineWith!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":72,
          "endLine":72
        }
      },
      "ann":[],
      "doc":["Appends `f(x)` to the string builder `sb`."],
      "name":"appendLineWith!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"x",
        "tpe":"a"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":72,
        "endLine":74
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLines!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":79,
          "endLine":79
        }
      },
      "ann":[],
      "doc":["Appends each string in the array `a` to the string builder `sb`."],
      "name":"appendLines!",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"Array[String, r1]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r2]"
      }],
      "tpe":"Unit",
      "eff":"r1 and r2",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":79,
        "endLine":80
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLinesWith",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":85,
          "endLine":85
        }
      },
      "ann":[],
      "doc":["Appends `f(x)` for each x in the foldable collection `t` to the string builder `sb`."],
      "name":"appendLinesWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"t",
        "kind":"Type -> Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"t",
        "tpe":"t[a]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":85,
        "endLine":86
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendLinesWith!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":91,
          "endLine":91
        }
      },
      "ann":[],
      "doc":["Appends `f(x)` for each x in array `a` to the string builder `sb`."],
      "name":"appendLinesWith!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"a",
        "tpe":"Array[a, r1]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r2]"
      }],
      "tpe":"Unit",
      "eff":"ef and r1 and r2",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":91,
        "endLine":92
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"appendString!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Append the String `s` to the StringBuilder `sb`."],
      "name":"appendString!",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":50,
        "endLine":54
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"enumerator",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":126,
          "endLine":126
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r2]"
      }],
      "tpe":"Iterator[(Char, Int32), r1 and r2]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":126,
        "endLine":127
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"intercalate!",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":97,
          "endLine":97
        }
      },
      "ann":[],
      "doc":["Append the array of strings `a` separating each pair of string with `sep` to the StringBuilder `sb`."],
      "name":"intercalate!",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"a",
        "tpe":"Array[String, r1]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r2]"
      }],
      "tpe":"Unit",
      "eff":"r1 and r2",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":97,
        "endLine":105
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"iterator",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":110,
          "endLine":110
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `sb`."],
      "name":"iterator",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"sb",
        "tpe":"StringBuilder[r2]"
      }],
      "tpe":"Iterator[Char, r1 and r2]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":110,
        "endLine":121
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"length",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":132,
          "endLine":132
        }
      },
      "ann":[],
      "doc":["Return the length of the StringBuilder `sb`."],
      "name":"length",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":132,
        "endLine":135
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"new",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":35,
          "endLine":35
        }
      },
      "ann":[],
      "doc":["Returns a new mutable StringBuilder."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"_",
        "tpe":"Region[r]"
      }],
      "tpe":"StringBuilder[r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":35,
        "endLine":37
      }
    },{
      "sym":{
        "namespace":["StringBuilder"],
        "name":"toString",
        "loc":{
          "name":"StringBuilder.flix",
          "beginLine":140,
          "endLine":140
        }
      },
      "ann":[],
      "doc":["Convert the StringBuilder `sb` to a string."],
      "name":"toString",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sb",
        "tpe":"StringBuilder[r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"StringBuilder.flix",
        "beginLine":140,
        "endLine":143
      }
    }],
    "Result":[{
      "sym":{
        "namespace":["Result"],
        "name":"ap",
        "loc":{
          "name":"Result.flix",
          "beginLine":329,
          "endLine":329
        }
      },
      "ann":[],
      "doc":["Applies the function in `r1` to the value in `r2`."],
      "name":"ap",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Result[t -> u & ef \\ ef', e]"
      },{
        "name":"r2",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":329,
        "endLine":335
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"count",
        "loc":{
          "name":"Result.flix",
          "beginLine":131,
          "endLine":131
        }
      },
      "ann":[],
      "doc":["Returns `1` if `r` is `Ok(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `0`."],
      "name":"count",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":131,
        "endLine":134
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"enumerator",
        "loc":{
          "name":"Result.flix",
          "beginLine":420,
          "endLine":420
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `r` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"reg",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"reg",
        "tpe":"Region[reg]"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Iterator[(t, Int32), reg]",
      "eff":"reg",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":420,
        "endLine":421
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"exists",
        "loc":{
          "name":"Result.flix",
          "beginLine":81,
          "endLine":81
        }
      },
      "ann":[],
      "doc":["Returns `true` if `r` is `Ok(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `false`."],
      "name":"exists",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":81,
        "endLine":84
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"find",
        "loc":{
          "name":"Result.flix",
          "beginLine":171,
          "endLine":171
        }
      },
      "ann":[],
      "doc":["Returns `Some(v)` if `r` is `Ok(v)` and the predicate `f(v)` evaluates to `true`. Otherwise returns `None`.","","The function `f` must be pure."],
      "name":"find",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Option[t]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":171,
        "endLine":174
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"flatMap",
        "loc":{
          "name":"Result.flix",
          "beginLine":115,
          "endLine":115
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `r` is `Ok(v)`. Returns `Err(w)` if `r` is `Err(w)`."],
      "name":"flatMap",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> Result[t2, e] & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t1, e]"
      }],
      "tpe":"Result[t2, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":115,
        "endLine":118
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"flatten",
        "loc":{
          "name":"Result.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Returns `v` if `r` is `Ok(v)`. Returns `Err(w)` if `r` is `Err(w)`."],
      "name":"flatten",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[Result[t, e], e]"
      }],
      "tpe":"Result[t, e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":123,
        "endLine":126
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"foldLeft",
        "loc":{
          "name":"Result.flix",
          "beginLine":179,
          "endLine":179
        }
      },
      "ann":[],
      "doc":["Returns `f(z, v)` if `r` is `Ok(v)`. Otherwise returns `z`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (t -> a & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"a"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":179,
        "endLine":182
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"foldLeftM",
        "loc":{
          "name":"Result.flix",
          "beginLine":252,
          "endLine":252
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to a start value `s` and the elements in `l`","going from left to right.","","If at any step applying `f` fails (i.e. it produces a `Err(e)` value) the traversal","of `l` is short-circuited and `Err(e)` is returned.","","If `f` is successfully applied to all elements in `l` the result is of the form:","`Ok(f(...f(f(s, x1), x2)..., xn))`."],
      "name":"foldLeftM",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> Result[b, e] & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Result[b, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":252,
        "endLine":258
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"foldRight",
        "loc":{
          "name":"Result.flix",
          "beginLine":187,
          "endLine":187
        }
      },
      "ann":[],
      "doc":["Returns `f(v, z)` if `r` is `Ok(v)`. Otherwise returns `z`."],
      "name":"foldRight",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> (a -> a & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"a"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":187,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"foldRightM",
        "loc":{
          "name":"Result.flix",
          "beginLine":270,
          "endLine":270
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to a start value `s` and the elements in `l`","going from right to left.","","If at any step applying `f` fails (i.e. it produces a `Err(e)` value) the traversal","of `l` is short-circuited and `Err(e)` is returned.","","If `f` is successfully applied to all elements in `l` the result is of the form:","`Ok(f(x1, ...f(xn-1, f(xn, s))...))`."],
      "name":"foldRightM",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> Result[b, e] & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"b"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Result[b, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":270,
        "endLine":278
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"Result.flix",
          "beginLine":197,
          "endLine":197
        }
      },
      "ann":[],
      "doc":["Returns `f(v, z)` if `r` is `Ok(v)`. Otherwise returns `z`.","","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> ((Unit -> a & ef \\ ef') -> a & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"a"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"a",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":197,
        "endLine":200
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"forAll",
        "loc":{
          "name":"Result.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":[],
      "doc":["Returns `true` if `r` is `Ok(v)` and the predicate `f(v)` evaluates to `true` or if `r` is `Err(w)`.","Otherwise returns `false`."],
      "name":"forAll",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Bool & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":90,
        "endLine":93
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"forEach",
        "loc":{
          "name":"Result.flix",
          "beginLine":321,
          "endLine":321
        }
      },
      "ann":[],
      "doc":["Applies `f` to `v` if `r` is `Ok(v)`. Otherwise does nothing."],
      "name":"forEach",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Unit & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Unit",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":321,
        "endLine":324
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"getWithDefault",
        "loc":{
          "name":"Result.flix",
          "beginLine":57,
          "endLine":57
        }
      },
      "ann":[],
      "doc":["Returns `v` if `r` is `Ok(v)`. Otherwise returns `d`."],
      "name":"getWithDefault",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"d",
        "tpe":"t"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"t",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":57,
        "endLine":60
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"isErr",
        "loc":{
          "name":"Result.flix",
          "beginLine":49,
          "endLine":49
        }
      },
      "ann":[],
      "doc":["Returns `true` iff `r` is `Err(w)`."],
      "name":"isErr",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":49,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"isOk",
        "loc":{
          "name":"Result.flix",
          "beginLine":41,
          "endLine":41
        }
      },
      "ann":[],
      "doc":["Returns `true` iff `r` is `Ok(v)`."],
      "name":"isOk",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":41,
        "endLine":44
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"iterator",
        "loc":{
          "name":"Result.flix",
          "beginLine":412,
          "endLine":412
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `r` with 1 element or an empty iterator if `r` is `Err`."],
      "name":"iterator",
      "tparams":[{
        "name":"reg",
        "kind":"Bool"
      },{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"reg",
        "tpe":"Region[reg]"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Iterator[t, reg]",
      "eff":"reg",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":412,
        "endLine":415
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift10",
        "loc":{
          "name":"Result.flix",
          "beginLine":406,
          "endLine":406
        }
      },
      "ann":[],
      "doc":["Applies the 10-ary function `f` to the values in `r1`, `r2`, ... `r10`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r10` are `Err(e)`."],
      "name":"lift10",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"t10",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> (t10 -> u & ef \\ ef')))))))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      },{
        "name":"r6",
        "tpe":"Result[t6, e]"
      },{
        "name":"r7",
        "tpe":"Result[t7, e]"
      },{
        "name":"r8",
        "tpe":"Result[t8, e]"
      },{
        "name":"r9",
        "tpe":"Result[t9, e]"
      },{
        "name":"r10",
        "tpe":"Result[t10, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":406,
        "endLine":407
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift2",
        "loc":{
          "name":"Result.flix",
          "beginLine":342,
          "endLine":342
        }
      },
      "ann":[],
      "doc":["Applies the binary function `f` to the values in `r1` and `r2`.","","Returns the first `Err(e)` value if either of `r1` and `r2` are `Err(e)`."],
      "name":"lift2",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> u & ef \\ ef')"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":342,
        "endLine":343
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift3",
        "loc":{
          "name":"Result.flix",
          "beginLine":350,
          "endLine":350
        }
      },
      "ann":[],
      "doc":["Applies the ternary function `f` to the values in `r1`, `r2` and `r3`.","","Returns the first `Err(e)` value if any of `r1`, `r2` and `r3` are `Err(e)`."],
      "name":"lift3",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> u & ef \\ ef'))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":350,
        "endLine":351
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift4",
        "loc":{
          "name":"Result.flix",
          "beginLine":358,
          "endLine":358
        }
      },
      "ann":[],
      "doc":["Applies the 4-ary function `f` to the values in `r1`, `r2`, `r3` and `r4`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, `r3` and `r4` are `Err(e)`."],
      "name":"lift4",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> u & ef \\ ef')))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":358,
        "endLine":359
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift5",
        "loc":{
          "name":"Result.flix",
          "beginLine":366,
          "endLine":366
        }
      },
      "ann":[],
      "doc":["Applies the 5-ary function `f` to the values in `r1`, `r2`, ... `r5`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r5` are `Err(e)`."],
      "name":"lift5",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> u & ef \\ ef'))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":366,
        "endLine":367
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift6",
        "loc":{
          "name":"Result.flix",
          "beginLine":374,
          "endLine":374
        }
      },
      "ann":[],
      "doc":["Applies the 6-ary function `f` to the values in `r1`, `r2`, ... `r6`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r6` are `Err(e)`."],
      "name":"lift6",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> u & ef \\ ef')))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      },{
        "name":"r6",
        "tpe":"Result[t6, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":374,
        "endLine":375
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift7",
        "loc":{
          "name":"Result.flix",
          "beginLine":382,
          "endLine":382
        }
      },
      "ann":[],
      "doc":["Applies the 7-ary function `f` to the values in `r1`, `r2`, ... `r7`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r7` are `Err(e)`."],
      "name":"lift7",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> u & ef \\ ef'))))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      },{
        "name":"r6",
        "tpe":"Result[t6, e]"
      },{
        "name":"r7",
        "tpe":"Result[t7, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":382,
        "endLine":383
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift8",
        "loc":{
          "name":"Result.flix",
          "beginLine":390,
          "endLine":390
        }
      },
      "ann":[],
      "doc":["Applies the 8-ary function `f` to the values in `r1`, `r2`, ... `r8`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r8` are `Err(e)`."],
      "name":"lift8",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> u & ef \\ ef')))))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      },{
        "name":"r6",
        "tpe":"Result[t6, e]"
      },{
        "name":"r7",
        "tpe":"Result[t7, e]"
      },{
        "name":"r8",
        "tpe":"Result[t8, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":390,
        "endLine":391
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"lift9",
        "loc":{
          "name":"Result.flix",
          "beginLine":398,
          "endLine":398
        }
      },
      "ann":[],
      "doc":["Applies the 9-ary function `f` to the values in `r1`, `r2`, ... `r9`.","","Returns the first `Err(e)` value if any of `r1`, `r2`, ... `r9` are `Err(e)`."],
      "name":"lift9",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"t3",
        "kind":"Type"
      },{
        "name":"t4",
        "kind":"Type"
      },{
        "name":"t5",
        "kind":"Type"
      },{
        "name":"t6",
        "kind":"Type"
      },{
        "name":"t7",
        "kind":"Type"
      },{
        "name":"t8",
        "kind":"Type"
      },{
        "name":"t9",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"u",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> (t2 -> (t3 -> (t4 -> (t5 -> (t6 -> (t7 -> (t8 -> (t9 -> u & ef \\ ef'))))))))"
      },{
        "name":"r1",
        "tpe":"Result[t1, e]"
      },{
        "name":"r2",
        "tpe":"Result[t2, e]"
      },{
        "name":"r3",
        "tpe":"Result[t3, e]"
      },{
        "name":"r4",
        "tpe":"Result[t4, e]"
      },{
        "name":"r5",
        "tpe":"Result[t5, e]"
      },{
        "name":"r6",
        "tpe":"Result[t6, e]"
      },{
        "name":"r7",
        "tpe":"Result[t7, e]"
      },{
        "name":"r8",
        "tpe":"Result[t8, e]"
      },{
        "name":"r9",
        "tpe":"Result[t9, e]"
      }],
      "tpe":"Result[u, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":398,
        "endLine":399
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"map",
        "loc":{
          "name":"Result.flix",
          "beginLine":98,
          "endLine":98
        }
      },
      "ann":[],
      "doc":["Returns `Ok(f(v))` if `r` is `Ok(v)`. Returns `Err(w)` if `r` is `Err(w)`."],
      "name":"map",
      "tparams":[{
        "name":"t1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"t2",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t1 -> t2 & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t1, e]"
      }],
      "tpe":"Result[t2, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":98,
        "endLine":101
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"mapErr",
        "loc":{
          "name":"Result.flix",
          "beginLine":106,
          "endLine":106
        }
      },
      "ann":[],
      "doc":["Returns `Err(f(e))` if `r` is `Err(e)`. Returns `Ok(v)` if `r` is `Ok(v)`."],
      "name":"mapErr",
      "tparams":[{
        "name":"e1",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e2",
        "kind":"Type"
      },{
        "name":"t",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"e1 -> e2 & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e1]"
      }],
      "tpe":"Result[t, e2]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":106,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"product",
        "loc":{
          "name":"Result.flix",
          "beginLine":151,
          "endLine":151
        }
      },
      "ann":[],
      "doc":["Returns `v` if `r` is `Ok(v)` else `0`."],
      "name":"product",
      "tparams":[{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[Int32, e]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":151,
        "endLine":155
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"productWith",
        "loc":{
          "name":"Result.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `r` is `Ok(v)` else `0`."],
      "name":"productWith",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Int32 & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":160,
        "endLine":164
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"replace",
        "loc":{
          "name":"Result.flix",
          "beginLine":73,
          "endLine":73
        }
      },
      "ann":[],
      "doc":["Returns `Ok(to)` if `r` is `Ok(from)`. Otherwise returns `r`."],
      "name":"replace",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = t }"
      },{
        "name":"to",
        "tpe":"{ to = t }"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Result[t, e]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Eq",
          "loc":{
            "name":"Eq.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Result.flix",
        "beginLine":73,
        "endLine":76
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"sequence",
        "loc":{
          "name":"Result.flix",
          "beginLine":206,
          "endLine":206
        }
      },
      "ann":[],
      "doc":["Returns `Ok(v1 :: v2 :: ... :: vn)` if each of `l_i` is `Ok(v_i)`.","Otherwise returns the first `Err` encountered."],
      "name":"sequence",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"l",
        "tpe":"List[Result[a, e]]"
      }],
      "tpe":"Result[List[a], e]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":206,
        "endLine":212
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"sum",
        "loc":{
          "name":"Result.flix",
          "beginLine":139,
          "endLine":139
        }
      },
      "ann":[],
      "doc":["Returns `v` if `r` is `Ok(v)` else `0`."],
      "name":"sum",
      "tparams":[{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[Int32, e]"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":139,
        "endLine":140
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"sumWith",
        "loc":{
          "name":"Result.flix",
          "beginLine":145,
          "endLine":145
        }
      },
      "ann":[],
      "doc":["Returns `f(v)` if `r` is `Ok(v)` else `0`."],
      "name":"sumWith",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"t -> Int32 & ef \\ ef'"
      },{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Int32",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":145,
        "endLine":146
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"toList",
        "loc":{
          "name":"Result.flix",
          "beginLine":283,
          "endLine":283
        }
      },
      "ann":[],
      "doc":["Returns a one-element list of the value `v` if `r` is `Ok(v)`. Otherwise returns the empty list."],
      "name":"toList",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"List[t]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":283,
        "endLine":286
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"toMap",
        "loc":{
          "name":"Result.flix",
          "beginLine":299,
          "endLine":299
        }
      },
      "ann":[],
      "doc":["Returns a singleton map with the mapping `k -> v` if `o` is `Ok((k, v))`. Otherwise returns the empty map."],
      "name":"toMap",
      "tparams":[{
        "name":"k",
        "kind":"Type"
      },{
        "name":"v",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[(k, v), e]"
      }],
      "tpe":"Map[k, v]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"k"
      }],
      "loc":{
        "name":"Result.flix",
        "beginLine":299,
        "endLine":302
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"toMapWith",
        "loc":{
          "name":"Result.flix",
          "beginLine":307,
          "endLine":307
        }
      },
      "ann":[],
      "doc":["Returns a map with elements of `s` as keys and `f` applied as values."],
      "name":"toMapWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b"
      },{
        "name":"s",
        "tpe":"Result[a, a]"
      }],
      "tpe":"Map[a, b]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"Result.flix",
        "beginLine":307,
        "endLine":308
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"toOption",
        "loc":{
          "name":"Result.flix",
          "beginLine":313,
          "endLine":313
        }
      },
      "ann":[],
      "doc":["Returns `Some(v)` if `r` is `Ok(v)`. Otherwise returns `None`."],
      "name":"toOption",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Option[t]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":313,
        "endLine":316
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"toSet",
        "loc":{
          "name":"Result.flix",
          "beginLine":291,
          "endLine":291
        }
      },
      "ann":[],
      "doc":["Returns a one-element set of the value `v` if `r` is `Ok(v)`. Otherwise returns the empty set."],
      "name":"toSet",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Result[t, e]"
      }],
      "tpe":"Set[t]",
      "eff":"true",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"t"
      }],
      "loc":{
        "name":"Result.flix",
        "beginLine":291,
        "endLine":294
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"traverse",
        "loc":{
          "name":"Result.flix",
          "beginLine":218,
          "endLine":218
        }
      },
      "ann":[],
      "doc":["Returns `Some(v1 :: v2 :: ... v :: vn)` if each of `f(l_i)` is `Ok(v_i)`.","Otherwise returns the first `Err` encountered."],
      "name":"traverse",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Result[b, e] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Result[List[b], e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":218,
        "endLine":226
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"traverseX",
        "loc":{
          "name":"Result.flix",
          "beginLine":234,
          "endLine":234
        }
      },
      "ann":[],
      "doc":["Returns `Ok()` if each of `f(l_i)` is `Ok(_)`. Otherwise returns `None`.","","This function is the \"forgetful\" version of `traverse`, use it when the you want the effect","of applying `f` to each element but do not care about collecting the results."],
      "name":"traverseX",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"e",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Result[b, e] & ef \\ ef'"
      },{
        "name":"l",
        "tpe":"List[a]"
      }],
      "tpe":"Result[Unit, e]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":234,
        "endLine":240
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"try",
        "loc":{
          "name":"Result.flix",
          "beginLine":429,
          "endLine":429
        }
      },
      "ann":[],
      "doc":["Returns `Ok(x)` if `f` was invoked without throwing an exception.","","If `f` throws a Java `RuntimeException`, `Err(e)` is returned","where `e` is the error message."],
      "name":"try",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Unit -> a & ef \\ ef'"
      }],
      "tpe":"Result[a, String]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":429,
        "endLine":436
      }
    },{
      "sym":{
        "namespace":["Result"],
        "name":"withDefault",
        "loc":{
          "name":"Result.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Returns `Ok(v)` if `r` is `Ok(v)`. Otherwise returns `default`."],
      "name":"withDefault",
      "tparams":[{
        "name":"t",
        "kind":"Type"
      },{
        "name":"e2",
        "kind":"Type"
      },{
        "name":"e1",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"default",
        "tpe":"{ default = Result[t, e2] }"
      },{
        "name":"r",
        "tpe":"Result[t, e1]"
      }],
      "tpe":"Result[t, e2]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Result.flix",
        "beginLine":65,
        "endLine":68
      }
    }],
    "MutSet":[{
      "sym":{
        "namespace":["MutSet"],
        "name":"add!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":51,
          "endLine":51
        }
      },
      "ann":[],
      "doc":["Adds the element `x` to the mutable set `s`."],
      "name":"add!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":51,
        "endLine":53
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"addAll!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":58,
          "endLine":58
        }
      },
      "ann":[],
      "doc":["Adds all elements in the collection `m` to the mutable set `s`."],
      "name":"addAll!",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"m[a]"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":58,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"clear!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":64,
          "endLine":64
        }
      },
      "ann":[],
      "doc":["Removes all elements from the mutable set `s`."],
      "name":"clear!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":64,
        "endLine":66
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"copy",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":342,
          "endLine":342
        }
      },
      "ann":[],
      "doc":["Returns a shallow copy of the mutable set `s`."],
      "name":"copy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"MutSet[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":342,
        "endLine":344
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"count",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":283,
          "endLine":283
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the number of elements in the mutable set `s` that satisfy the predicate function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"count",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":283,
        "endLine":285
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"enumerator",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":408,
          "endLine":408
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `s`."],
      "name":"enumerator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Iterator[(a, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":408,
        "endLine":409
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"exists",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":326,
          "endLine":326
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one element in the mutable set `s` satisfies the predicate function `f`.","","Returns `false` if `s` is the empty set."],
      "name":"exists",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":326,
        "endLine":328
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"find",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Alias for `findLeft`.","","The function `f` must be pure."],
      "name":"find",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":200,
        "endLine":201
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"findLeft",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":208,
          "endLine":208
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of the mutable set `s` that satisfies the predicate function `f` when searching from left to right.","","The function `f` must be pure."],
      "name":"findLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":208,
        "endLine":210
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"findRight",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":217,
          "endLine":217
        }
      },
      "ann":[],
      "doc":["Optionally returns the first element of the mutable set `s` that satisfies the predicate function `f` when searching from right to left.","","The function `f` must be pure."],
      "name":"findRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":217,
        "endLine":219
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"foldLeft",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":226,
          "endLine":226
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `i` and all elements in the mutable set `s` going from left to right.","","That is, the result is of the form: `f(...f(f(i, x1), x2)..., xn)`."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (a -> b & ef \\ ef')"
      },{
        "name":"i",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":226,
        "endLine":228
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"foldMap",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":252,
          "endLine":252
        }
      },
      "ann":[],
      "doc":["Returns the result of mapping each element and combining the results."],
      "name":"foldMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> b & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Monoid",
          "loc":{
            "name":"Monoid.flix",
            "beginLine":21,
            "endLine":21
          }
        },
        "tpe":"b"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":252,
        "endLine":253
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"foldRight",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":235,
          "endLine":235
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in the mutable set `s` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`."],
      "name":"foldRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (b -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":235,
        "endLine":237
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"foldRightWithCont",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":245,
          "endLine":245
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `z` and all elements in the mutable set `s` going from right to left.","","That is, the result is of the form: `f(x1, ...f(xn-1, f(xn, z))...)`.","A `foldRightWithCont` allows early termination by not calling the continuation."],
      "name":"foldRightWithCont",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> ((Unit -> b & ef \\ ef') -> b & ef \\ ef')"
      },{
        "name":"z",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"b",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":245,
        "endLine":247
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"forAll",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":335,
          "endLine":335
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all elements in the mutable set `s` satisfy the predicate function `f`.","","Returns `true` if `s` is the empty set."],
      "name":"forAll",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Bool",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":335,
        "endLine":337
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"forEach",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":393,
          "endLine":393
        }
      },
      "ann":[],
      "doc":["Applies `f` to every element of the mutable set `s`."],
      "name":"forEach",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Unit & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":393,
        "endLine":395
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"isEmpty",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":119,
          "endLine":119
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `s` is the empty set."],
      "name":"isEmpty",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":119,
        "endLine":121
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"isProperSubsetOf",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":190,
          "endLine":190
        }
      },
      "ann":[],
      "doc":["Returns true if and only if every element in the mutable set `s1` appears in the mutable set `s2` and `s1 != s2`."],
      "name":"isProperSubsetOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"MutSet[a, r1]"
      },{
        "name":"s2",
        "tpe":"MutSet[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":190,
        "endLine":193
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"isSubsetOf",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":182,
          "endLine":182
        }
      },
      "ann":[],
      "doc":["Returns true if and only if every element in the mutable set `s1` appears in the mutable set `s2`."],
      "name":"isSubsetOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s1",
        "tpe":"MutSet[a, r1]"
      },{
        "name":"s2",
        "tpe":"MutSet[a, r2]"
      }],
      "tpe":"Bool",
      "eff":"r1 and r2",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":182,
        "endLine":185
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"iterator",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":400,
          "endLine":400
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `s`."],
      "name":"iterator",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Iterator[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":400,
        "endLine":403
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"join",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":421,
          "endLine":421
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `s` with `sep` inserted between each element."],
      "name":"join",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"String",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"ToString",
          "loc":{
            "name":"ToString.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":421,
        "endLine":423
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"joinWith",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":429,
          "endLine":429
        }
      },
      "ann":[],
      "doc":["Returns the concatenation of the string representation","of each element in `s` according to `f` with `sep` inserted between each element."],
      "name":"joinWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> String & ef \\ ef'"
      },{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"String",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":429,
        "endLine":431
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"maximum",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":156,
          "endLine":156
        }
      },
      "ann":[],
      "doc":["Optionally finds the largest element of `s` according to the `Order` on `a`.","","Returns `None` if `s` is empty."],
      "name":"maximum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":156,
        "endLine":158
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"maximumBy",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":168,
          "endLine":168
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds the largest element of `s` according to the given comparator `cmp`.","","Returns `None` if `s` is empty.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"maximumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":168,
        "endLine":170
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"memberOf",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":126,
          "endLine":126
        }
      },
      "ann":[],
      "doc":["Returns true if and only if `x` is a member of the mutable set `s`."],
      "name":"memberOf",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":126,
        "endLine":128
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"minimum",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":135,
          "endLine":135
        }
      },
      "ann":[],
      "doc":["Optionally finds the smallest element of `s` according to the `Order` on `a`.","","Returns `None` if `s` is empty."],
      "name":"minimum",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":135,
        "endLine":137
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"minimumBy",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":147,
          "endLine":147
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Optionally finds the smallest element of `s` according to the given comparator `cmp`.","","Returns `None` if `s` is empty.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"minimumBy",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"cmp",
        "tpe":"a -> (a -> Comparison & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":147,
        "endLine":149
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"new",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":39,
          "endLine":39
        }
      },
      "ann":[],
      "doc":["Returns a fresh empty set."],
      "name":"new",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      }],
      "tpe":"MutSet[a, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":39,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"partition",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":354,
          "endLine":354
        }
      },
      "ann":[],
      "doc":["`s1` contains all elements of the mutable set `s` that satisfy the predicate function `f`.","`s2` contains all elements of teh mutable set `s` that do not satisfy the predicate function `f`.","","The function `f` must be pure."],
      "name":"partition",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"(MutSet[a, r], MutSet[a, r])",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":354,
        "endLine":357
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"product",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":307,
          "endLine":307
        }
      },
      "ann":[],
      "doc":["Returns the product of all elements in the set `s`."],
      "name":"product",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":307,
        "endLine":309
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"productWith",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":317,
          "endLine":317
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the product of all elements in the set `s` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"productWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":317,
        "endLine":319
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"reduceLeft",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":262,
          "endLine":262
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in the mutable set `s` going from left to right until a single value `v` is obtained. Returns `Some(v)`.","","That is, the result is of the form: `Some(f(...f(f(x1, x2), x3)..., xn))`","","Returns `None` if `s` is the empty set."],
      "name":"reduceLeft",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":262,
        "endLine":264
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"reduceRight",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":273,
          "endLine":273
        }
      },
      "ann":[],
      "doc":["Applies `f` to all elements in the mutable set `s` going from right to left until a single value `v` is obtained.  Returns `Some(v)`.","","That is, the result is of the form: `Some(f(x1, ...f(xn-2, f(xn-1, xn))...))`","","Returns `None` if `s` is the empty set."],
      "name":"reduceRight",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> (a -> a & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Option[a]",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":273,
        "endLine":275
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"refine!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":96,
          "endLine":96
        }
      },
      "ann":[],
      "doc":["Removes all elements from the mutable set `s` that do not satisfy the predicate function `f`.","","The function `f` must be pure."],
      "name":"refine!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Bool"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":96,
        "endLine":98
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"remove!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":71,
          "endLine":71
        }
      },
      "ann":[],
      "doc":["Removes the element `x` from the mutable set `s`."],
      "name":"remove!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"x",
        "tpe":"a"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":71,
        "endLine":73
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"removeAll!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":78,
          "endLine":78
        }
      },
      "ann":[],
      "doc":["Removes all elements in the collection `m` from the mutable set `s`."],
      "name":"removeAll!",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"m[a]"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":78,
        "endLine":81
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"replace!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":105,
          "endLine":105
        }
      },
      "ann":[],
      "doc":["Replaces the element `from` with the element `to` if `from` is in the mutable set `s`.","","The mutable set `s` is unchanged if the element `from` is not in it."],
      "name":"replace!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = a }"
      },{
        "name":"to",
        "tpe":"{ to = a }"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":105,
        "endLine":107
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"retainAll!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":86,
          "endLine":86
        }
      },
      "ann":[],
      "doc":["Removes all elements from the mutable set `s` that are not in collection `m`."],
      "name":"retainAll!",
      "tparams":[{
        "name":"m",
        "kind":"Type -> Type"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"m",
        "tpe":"m[a]"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      },{
        "sym":{
          "namespace":[],
          "name":"Foldable",
          "loc":{
            "name":"Foldable.flix",
            "beginLine":20,
            "endLine":20
          }
        },
        "tpe":"m"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":86,
        "endLine":89
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"sameElements",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":414,
          "endLine":414
        }
      },
      "ann":[],
      "doc":["Returns `true` if MutSets `a` and `b` have the same elements, i.e. are structurally equal."],
      "name":"sameElements",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"a",
        "tpe":"MutSet[a, r]"
      },{
        "name":"b",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Bool",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":414,
        "endLine":415
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"singleton",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the singleton set containing `x`."],
      "name":"singleton",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"x",
        "tpe":"a"
      }],
      "tpe":"MutSet[a, r]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":45,
        "endLine":46
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"size",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":175,
          "endLine":175
        }
      },
      "ann":[],
      "doc":["Returns the size of the mutable set `s`."],
      "name":"size",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":175,
        "endLine":177
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"sum",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":290,
          "endLine":290
        }
      },
      "ann":[],
      "doc":["Returns the sum of all elements in the mutable set `s`."],
      "name":"sum",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[Int32, r]"
      }],
      "tpe":"Int32",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":290,
        "endLine":292
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"sumWith",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":300,
          "endLine":300
        }
      },
      "ann":["@ParallelWhenPure"],
      "doc":["Returns the sum of all elements in the mutable set `s` according to the function `f`.","","Purity reflective: Runs in parallel when given a pure function `f`."],
      "name":"sumWith",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> Int32 & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Int32",
      "eff":"ef and r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":300,
        "endLine":302
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"toList",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":369,
          "endLine":369
        }
      },
      "ann":[],
      "doc":["Returns the mutable set `s` as a list."],
      "name":"toList",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"List[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":369,
        "endLine":371
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"toMap",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":379,
          "endLine":379
        }
      },
      "ann":[],
      "doc":["Returns the association set `s` as a map.","","If `s` contains multiple mappings with the same key, `toMap` does not","make any guarantees about which mapping will be in the resulting map."],
      "name":"toMap",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"b",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[(a, b), r]"
      }],
      "tpe":"Map[a, b]",
      "eff":"r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":379,
        "endLine":381
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"toMutDeque",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":386,
          "endLine":386
        }
      },
      "ann":[],
      "doc":["Returns the mutable set `s` as a MutDeque."],
      "name":"toMutDeque",
      "tparams":[{
        "name":"r1",
        "kind":"Bool"
      },{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r2",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r1",
        "tpe":"Region[r1]"
      },{
        "name":"s",
        "tpe":"MutSet[a, r2]"
      }],
      "tpe":"MutDeque[a, r1]",
      "eff":"r2 and r1",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":386,
        "endLine":388
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"toSet",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":362,
          "endLine":362
        }
      },
      "ann":[],
      "doc":["Returns the mutable set `s` as an immutable set."],
      "name":"toSet",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Set[a]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":362,
        "endLine":364
      }
    },{
      "sym":{
        "namespace":["MutSet"],
        "name":"transform!",
        "loc":{
          "name":"MutSet.flix",
          "beginLine":112,
          "endLine":112
        }
      },
      "ann":[],
      "doc":["Applies the function `f` to every element in the mutable set `s`."],
      "name":"transform!",
      "tparams":[{
        "name":"a",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      },{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"a -> a & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"MutSet[a, r]"
      }],
      "tpe":"Unit",
      "eff":"ef and r and r",
      "tcs":[{
        "sym":{
          "namespace":[],
          "name":"Order",
          "loc":{
            "name":"Order.flix",
            "beginLine":22,
            "endLine":22
          }
        },
        "tpe":"a"
      }],
      "loc":{
        "name":"MutSet.flix",
        "beginLine":112,
        "endLine":114
      }
    }],
    "Hash":[{
      "sym":{
        "namespace":["Hash"],
        "name":"combine",
        "loc":{
          "name":"Hash.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":[],
      "doc":["Combines the two given hash values."],
      "name":"combine",
      "tparams":[],
      "fparams":[{
        "name":"h1",
        "tpe":"Int32"
      },{
        "name":"h2",
        "tpe":"Int32"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Hash.flix",
        "beginLine":174,
        "endLine":176
      }
    },{
      "sym":{
        "namespace":["Hash"],
        "name":"magic",
        "loc":{
          "name":"Hash.flix",
          "beginLine":181,
          "endLine":181
        }
      },
      "ann":[],
      "doc":["Returns a number used for combining hash values."],
      "name":"magic",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"Hash.flix",
        "beginLine":181,
        "endLine":181
      }
    }],
    "String":[{
      "sym":{
        "namespace":["String"],
        "name":"abbreviateLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":996,
          "endLine":996
        }
      },
      "ann":[],
      "doc":["Abbreviate the string `s` if it exceeds the width `w`.","","If the length of `s` exceeds `w` and `w >= 3\" then `s` is truncated and the first","three characters are replaced with ellipses.","","If the length of `s` exceeds `w` and `w < 3\" then the empty string is returned."],
      "name":"abbreviateLeft",
      "tparams":[],
      "fparams":[{
        "name":"w",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":996,
        "endLine":1004
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"abbreviateRight",
        "loc":{
          "name":"String.flix",
          "beginLine":1014,
          "endLine":1014
        }
      },
      "ann":[],
      "doc":["Abbreviate the string `s` if it exceeds the width `w`.","","If the length of `s` exceeds `w` and `w >= 3\" then `s` is truncated and the last","three characters are replaced with ellipses.","","If the length of `s` exceeds `w` and `w < 3\" then the empty string is returned."],
      "name":"abbreviateRight",
      "tparams":[],
      "fparams":[{
        "name":"w",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1014,
        "endLine":1019
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"breakOnLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":1163,
          "endLine":1163
        }
      },
      "ann":[],
      "doc":["Find the first instance of `substr` in string `s`, return a pair of the","prefix of string `s` up to `substr` and the rest of string `s` including `substr`."],
      "name":"breakOnLeft",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"(String, String)",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1163,
        "endLine":1167
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"breakOnRight",
        "loc":{
          "name":"String.flix",
          "beginLine":1173,
          "endLine":1173
        }
      },
      "ann":[],
      "doc":["Find the last instance of `substr` in string `s`, return a pair of the","initial string including `substr` and suffix from `substr`."],
      "name":"breakOnRight",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"(String, String)",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1173,
        "endLine":1178
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"charAt",
        "loc":{
          "name":"String.flix",
          "beginLine":22,
          "endLine":22
        }
      },
      "ann":[],
      "doc":["Returns the character at position `i` in the string `s`."],
      "name":"charAt",
      "tparams":[],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Char",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":22,
        "endLine":24
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"commonPrefix",
        "loc":{
          "name":"String.flix",
          "beginLine":947,
          "endLine":947
        }
      },
      "ann":[],
      "doc":["Return the common prefix of strings `s1` and `s2`.","","Returns the empty string if `s1` and `s2` do not share a common prefix."],
      "name":"commonPrefix",
      "tparams":[],
      "fparams":[{
        "name":"s1",
        "tpe":"String"
      },{
        "name":"s2",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":947,
        "endLine":962
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"commonSuffix",
        "loc":{
          "name":"String.flix",
          "beginLine":969,
          "endLine":969
        }
      },
      "ann":[],
      "doc":["Return the common suffix of strings `s1` and `s2`.","","Returns the empty string if `s1` and `s2` do not share a common suffix."],
      "name":"commonSuffix",
      "tparams":[],
      "fparams":[{
        "name":"s1",
        "tpe":"String"
      },{
        "name":"s2",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":969,
        "endLine":986
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"concat",
        "loc":{
          "name":"String.flix",
          "beginLine":29,
          "endLine":29
        }
      },
      "ann":[],
      "doc":["Returns the string `s1` followed by the string `s2`."],
      "name":"concat",
      "tparams":[],
      "fparams":[{
        "name":"s1",
        "tpe":"String"
      },{
        "name":"s2",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":29,
        "endLine":31
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"contains",
        "loc":{
          "name":"String.flix",
          "beginLine":934,
          "endLine":934
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if `substr` is an infix of `s`."],
      "name":"contains",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":934,
        "endLine":940
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"countSubstring",
        "loc":{
          "name":"String.flix",
          "beginLine":1183,
          "endLine":1183
        }
      },
      "ann":[],
      "doc":["Count the occurrences of `substr` in string `s`."],
      "name":"countSubstring",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1183,
        "endLine":1192
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"drop",
        "loc":{
          "name":"String.flix",
          "beginLine":396,
          "endLine":396
        }
      },
      "ann":[],
      "doc":["Alias for `dropLeft`."],
      "name":"drop",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":396,
        "endLine":396
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":403,
          "endLine":403
        }
      },
      "ann":[],
      "doc":["Drop the first `n` characters of string `s` from the left.","","If `n` extends past the end of string s, return the empty string."],
      "name":"dropLeft",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":403,
        "endLine":407
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropRight",
        "loc":{
          "name":"String.flix",
          "beginLine":414,
          "endLine":414
        }
      },
      "ann":[],
      "doc":["Drop the last `n` characters of string `s` from the right.","","If `n` is greater than the length of string `s`, return the empty string."],
      "name":"dropRight",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":414,
        "endLine":419
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropWhile",
        "loc":{
          "name":"String.flix",
          "beginLine":453,
          "endLine":453
        }
      },
      "ann":[],
      "doc":["Alias for `dropWhileLeft`."],
      "name":"dropWhile",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":453,
        "endLine":453
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropWhileAround",
        "loc":{
          "name":"String.flix",
          "beginLine":485,
          "endLine":485
        }
      },
      "ann":[],
      "doc":["Returns the middle of string `s` after dropping all the characters","from both ends that satisfy the predicate `f`.","","The function `f` must be pure."],
      "name":"dropWhileAround",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":485,
        "endLine":491
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropWhileLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":461,
          "endLine":461
        }
      },
      "ann":[],
      "doc":["Returns the tail of string `s` after dropping all the initial chars","that satisfy the predicate `f`.","","The function `f` must be pure."],
      "name":"dropWhileLeft",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":461,
        "endLine":465
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"dropWhileRight",
        "loc":{
          "name":"String.flix",
          "beginLine":473,
          "endLine":473
        }
      },
      "ann":[],
      "doc":["Returns the front of string `s` after dropping all the characters","from the right end that satisfy the predicate `f`.","","The function `f` must be pure."],
      "name":"dropWhileRight",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":473,
        "endLine":477
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"endsWith",
        "loc":{
          "name":"String.flix",
          "beginLine":57,
          "endLine":57
        }
      },
      "ann":[],
      "doc":["Returns `true` if the string `s` ends with the string `suffix`."],
      "name":"endsWith",
      "tparams":[],
      "fparams":[{
        "name":"suffix",
        "tpe":"{ suffix = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":57,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"enumerator",
        "loc":{
          "name":"String.flix",
          "beginLine":1229,
          "endLine":1229
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `l` zipped with the indices of the elements."],
      "name":"enumerator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Iterator[(Char, Int32), r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1229,
        "endLine":1230
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"exists",
        "loc":{
          "name":"String.flix",
          "beginLine":654,
          "endLine":654
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if at least one char in `s` satisfies the predicate `f`.","","Returns `false` if `a` is empty."],
      "name":"exists",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":654,
        "endLine":657
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"findIndexOfLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":307,
          "endLine":307
        }
      },
      "ann":[],
      "doc":["Optionally returns the position of the first character in `x` satisfying `f`.","","Returns `None` if no character in `s` satisfies `f`."],
      "name":"findIndexOfLeft",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":307,
        "endLine":318
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"findIndexOfRight",
        "loc":{
          "name":"String.flix",
          "beginLine":325,
          "endLine":325
        }
      },
      "ann":[],
      "doc":["Optionally return the position of the first character in `s` satisfying `f`, reading right to left.","","If nothing satisfies `f` return None."],
      "name":"findIndexOfRight",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":325,
        "endLine":336
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"findIndices",
        "loc":{
          "name":"String.flix",
          "beginLine":343,
          "endLine":343
        }
      },
      "ann":[],
      "doc":["Returns the positions of the all the elements in `s` satisfying `f`.","","The function `f` must be pure."],
      "name":"findIndices",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":343,
        "endLine":353
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"flatten",
        "loc":{
          "name":"String.flix",
          "beginLine":139,
          "endLine":139
        }
      },
      "ann":[],
      "doc":["Concatenate a list of strings into a single string."],
      "name":"flatten",
      "tparams":[],
      "fparams":[{
        "name":"xs",
        "tpe":"List[String]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":139,
        "endLine":143
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"foldLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":511,
          "endLine":511
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `x` and all elements in `s` going from left to right."],
      "name":"foldLeft",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (Char -> b & ef \\ ef')"
      },{
        "name":"x",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":511,
        "endLine":520
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"foldLeft2",
        "loc":{
          "name":"String.flix",
          "beginLine":540,
          "endLine":540
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `s` and `t`","starting with the initial value `x` and going from left to right."],
      "name":"foldLeft2",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> (Char -> (Char -> b & ef \\ ef'))"
      },{
        "name":"x",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"String"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":540,
        "endLine":549
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"foldRight",
        "loc":{
          "name":"String.flix",
          "beginLine":525,
          "endLine":525
        }
      },
      "ann":[],
      "doc":["Applies `f` to a start value `x and all elements in `s` going from right to left."],
      "name":"foldRight",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> (b -> b & ef \\ ef')"
      },{
        "name":"x",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":525,
        "endLine":534
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"foldRight2",
        "loc":{
          "name":"String.flix",
          "beginLine":555,
          "endLine":555
        }
      },
      "ann":[],
      "doc":["Accumulates the result of applying `f` pairwise to the elements of `s` and `t`","starting with the initial value `x` and going from right to left."],
      "name":"foldRight2",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> (Char -> (b -> b & ef \\ ef'))"
      },{
        "name":"x",
        "tpe":"b"
      },{
        "name":"s",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"String"
      }],
      "tpe":"b",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":555,
        "endLine":565
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"forAll",
        "loc":{
          "name":"String.flix",
          "beginLine":664,
          "endLine":664
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all chars in `s` satisfy the predicate `f`.","","Returns `true` if `s` is empty."],
      "name":"forAll",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":664,
        "endLine":667
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indent",
        "loc":{
          "name":"String.flix",
          "beginLine":790,
          "endLine":790
        }
      },
      "ann":[],
      "doc":["Indent every line in string `s` by `n` spaces. `n` must be greater than `0`.","","If the string `s` in nonempty, the returned string normalizes line","termination characters and adds a line terminator to the last line","of the string if it does not already end with a newline.","","If the string `s` is empty, then the empty string is returned."],
      "name":"indent",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":790,
        "endLine":794
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indexOf",
        "loc":{
          "name":"String.flix",
          "beginLine":897,
          "endLine":897
        }
      },
      "ann":[],
      "doc":["Alias for `indexOfLeft`."],
      "name":"indexOf",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":897,
        "endLine":897
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indexOfLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":906,
          "endLine":906
        }
      },
      "ann":[],
      "doc":["Return the index of the first occurrence of `substr` in `s` from the left.","","If `substr` is not present in `s` return None.","","If `substr` is the empty string return None."],
      "name":"indexOfLeft",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":906,
        "endLine":913
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indexOfLeftWithOffset",
        "loc":{
          "name":"String.flix",
          "beginLine":1111,
          "endLine":1111
        }
      },
      "ann":[],
      "doc":["This is `indexOfLeft` with a start offset.","","Returns `None` if `substr` is the empty string."],
      "name":"indexOfLeftWithOffset",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"offset",
        "tpe":"{ offset = Int32 }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1111,
        "endLine":1118
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indexOfRight",
        "loc":{
          "name":"String.flix",
          "beginLine":922,
          "endLine":922
        }
      },
      "ann":[],
      "doc":["Return the index of the first occurrence of `substr` in `s` from the right.","","If `substr` is not present in `s` return None.","","If `substr` is the empty string return None."],
      "name":"indexOfRight",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":922,
        "endLine":929
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indexOfRightWithOffset",
        "loc":{
          "name":"String.flix",
          "beginLine":1125,
          "endLine":1125
        }
      },
      "ann":[],
      "doc":["This is `indexOfRight` with a start offset.","","Returns `None` if `substr` is the empty string."],
      "name":"indexOfRightWithOffset",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"offset",
        "tpe":"{ offset = Int32 }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1125,
        "endLine":1132
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"indices",
        "loc":{
          "name":"String.flix",
          "beginLine":360,
          "endLine":360
        }
      },
      "ann":[],
      "doc":["Returns the positions of the all the occurrences of `substr` in `s`.","","Returns `Nil` if `substr` is the empty string."],
      "name":"indices",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":360,
        "endLine":367
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"init",
        "loc":{
          "name":"String.flix",
          "beginLine":114,
          "endLine":114
        }
      },
      "ann":[],
      "doc":["Build a string of length `len` by applying `f` to the successive indices."],
      "name":"init",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> Char & ef \\ ef'"
      },{
        "name":"len",
        "tpe":"Int32"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":114,
        "endLine":115
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"intercalate",
        "loc":{
          "name":"String.flix",
          "beginLine":149,
          "endLine":149
        }
      },
      "ann":[],
      "doc":["Concatenate a list of strings into a single string, inserting the separator `sep` between","each pair of strings."],
      "name":"intercalate",
      "tparams":[],
      "fparams":[{
        "name":"sep",
        "tpe":"String"
      },{
        "name":"xs",
        "tpe":"List[String]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":149,
        "endLine":154
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"intercalateChar",
        "loc":{
          "name":"String.flix",
          "beginLine":160,
          "endLine":160
        }
      },
      "ann":[],
      "doc":["Concatenate a list of strings into a single string, inserting the separator `sep` between","each pair of strings."],
      "name":"intercalateChar",
      "tparams":[],
      "fparams":[{
        "name":"sep",
        "tpe":"Char"
      },{
        "name":"xs",
        "tpe":"List[String]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":160,
        "endLine":169
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"isAscii",
        "loc":{
          "name":"String.flix",
          "beginLine":674,
          "endLine":674
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all chars in `s` are ascii characters.","","Returns `true` if `s` is empty."],
      "name":"isAscii",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":674,
        "endLine":675
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"isEmpty",
        "loc":{
          "name":"String.flix",
          "beginLine":36,
          "endLine":36
        }
      },
      "ann":[],
      "doc":["Returns `true` if the string `s` is the empty string."],
      "name":"isEmpty",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":36,
        "endLine":38
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"isMatch",
        "loc":{
          "name":"String.flix",
          "beginLine":237,
          "endLine":237
        }
      },
      "ann":[],
      "doc":["Returns `true` if the entire string `s` is matched by the regular expression `regex`.","","Note - use `isSubmatch` to search for a substring."],
      "name":"isMatch",
      "tparams":[],
      "fparams":[{
        "name":"regex",
        "tpe":"{ regex = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":237,
        "endLine":243
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"isSubmatch",
        "loc":{
          "name":"String.flix",
          "beginLine":248,
          "endLine":248
        }
      },
      "ann":[],
      "doc":["Returns `true` if the string `s` is matched by the regular expression `regex` at any point."],
      "name":"isSubmatch",
      "tparams":[],
      "fparams":[{
        "name":"regex",
        "tpe":"{ regex = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":248,
        "endLine":249
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"isWhiteSpace",
        "loc":{
          "name":"String.flix",
          "beginLine":682,
          "endLine":682
        }
      },
      "ann":[],
      "doc":["Returns `true` if and only if all chars in `s` are white space characters.","","Returns `true` if `s` is empty."],
      "name":"isWhiteSpace",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":682,
        "endLine":683
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"iterator",
        "loc":{
          "name":"String.flix",
          "beginLine":1215,
          "endLine":1215
        }
      },
      "ann":[],
      "doc":["Returns an iterator over `s`."],
      "name":"iterator",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Iterator[Char, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1215,
        "endLine":1224
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"length",
        "loc":{
          "name":"String.flix",
          "beginLine":43,
          "endLine":43
        }
      },
      "ann":[],
      "doc":["Returns the length of the string `s`."],
      "name":"length",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":43,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"levenshteinDistance",
        "loc":{
          "name":"String.flix",
          "beginLine":1027,
          "endLine":1027
        }
      },
      "ann":[],
      "doc":["Calculate the Levenshtein distance between the strings `s` and `t`.","","The answer is the number deletions, insertions or substitutions needed to turn","string `s` into string `t`."],
      "name":"levenshteinDistance",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      },{
        "name":"t",
        "tpe":"String"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1027,
        "endLine":1045
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"lineSeparator",
        "loc":{
          "name":"String.flix",
          "beginLine":101,
          "endLine":101
        }
      },
      "ann":[],
      "doc":["Get the system line separator."],
      "name":"lineSeparator",
      "tparams":[],
      "fparams":[{
        "name":"_unit",
        "tpe":"Unit"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":101,
        "endLine":103
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"lines",
        "loc":{
          "name":"String.flix",
          "beginLine":854,
          "endLine":854
        }
      },
      "ann":[],
      "doc":["Split the string `s` into an array of lines, breaking on newline.","","Newline is recognized as any Unicode linebreak sequence including","Windows (carriage return, line feed) or Unix (line feed)."],
      "name":"lines",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":854,
        "endLine":858
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"map",
        "loc":{
          "name":"String.flix",
          "beginLine":174,
          "endLine":174
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every character in `s`."],
      "name":"map",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Char & ef \\ ef'"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":174,
        "endLine":176
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"mapWithIndex",
        "loc":{
          "name":"String.flix",
          "beginLine":181,
          "endLine":181
        }
      },
      "ann":[],
      "doc":["Returns the result of applying `f` to every character in `s` along with that character's index."],
      "name":"mapWithIndex",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Int32 -> (Char -> Char & ef \\ ef')"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":181,
        "endLine":183
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"padLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":710,
          "endLine":710
        }
      },
      "ann":[],
      "doc":["Pad the string `s` at the left with the supplied char `c` to fit the width `w`."],
      "name":"padLeft",
      "tparams":[],
      "fparams":[{
        "name":"w",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Char"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":710,
        "endLine":715
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"padRight",
        "loc":{
          "name":"String.flix",
          "beginLine":720,
          "endLine":720
        }
      },
      "ann":[],
      "doc":["Pad the string `s` at the right with the supplied char `c` to fit the width `w`."],
      "name":"padRight",
      "tparams":[],
      "fparams":[{
        "name":"w",
        "tpe":"Int32"
      },{
        "name":"c",
        "tpe":"Char"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":720,
        "endLine":725
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"patch",
        "loc":{
          "name":"String.flix",
          "beginLine":771,
          "endLine":771
        }
      },
      "ann":[],
      "doc":["Returns `s` with the `n` elements starting at index `i` replaced with the elements of `sub`.","","If any of the indices `i, i+1, i+2, ... , i+n-1` are out of range in `s` then no patching is done at these indices.","If `s` becomes depleted then no further patching is done.","If patching occurs at index `i+j` in `s`, then the element at index `j` in `sub` is used."],
      "name":"patch",
      "tparams":[],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"sub",
        "tpe":"String"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":771,
        "endLine":778
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"repeat",
        "loc":{
          "name":"String.flix",
          "beginLine":700,
          "endLine":700
        }
      },
      "ann":[],
      "doc":["Returns a string with the string `s` repeated `n` times.","","Returns the empty string if `n < 0`."],
      "name":"repeat",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":700,
        "endLine":705
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"replace",
        "loc":{
          "name":"String.flix",
          "beginLine":730,
          "endLine":730
        }
      },
      "ann":[],
      "doc":["Returns `s` with every match of the substring `from` replaced by the string `to`."],
      "name":"replace",
      "tparams":[],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = String }"
      },{
        "name":"to",
        "tpe":"{ to = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":730,
        "endLine":732
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"replaceChar",
        "loc":{
          "name":"String.flix",
          "beginLine":737,
          "endLine":737
        }
      },
      "ann":[],
      "doc":["Returns `s` with every match of the character `target` replaced by the character `rep`."],
      "name":"replaceChar",
      "tparams":[],
      "fparams":[{
        "name":"from",
        "tpe":"{ from = Char }"
      },{
        "name":"to",
        "tpe":"{ to = Char }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":737,
        "endLine":739
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"replaceFirstMatch",
        "loc":{
          "name":"String.flix",
          "beginLine":751,
          "endLine":751
        }
      },
      "ann":[],
      "doc":["Returns `s` with the first match of the regular expression `regex` replaced by the string `to`."],
      "name":"replaceFirstMatch",
      "tparams":[],
      "fparams":[{
        "name":"regex",
        "tpe":"{ regex = String }"
      },{
        "name":"to",
        "tpe":"{ to = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":751,
        "endLine":753
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"replaceMatches",
        "loc":{
          "name":"String.flix",
          "beginLine":744,
          "endLine":744
        }
      },
      "ann":[],
      "doc":["Returns `s` with every match of the regular expression `regex` replaced by the string `to`."],
      "name":"replaceMatches",
      "tparams":[],
      "fparams":[{
        "name":"regex",
        "tpe":"{ regex = String }"
      },{
        "name":"to",
        "tpe":"{ to = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":744,
        "endLine":746
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"reverse",
        "loc":{
          "name":"String.flix",
          "beginLine":188,
          "endLine":188
        }
      },
      "ann":[],
      "doc":["Returns the reverse of `s`."],
      "name":"reverse",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":188,
        "endLine":190
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"rotateLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":195,
          "endLine":195
        }
      },
      "ann":[],
      "doc":["Rotate the contents of string `s` by `n` steps to the left."],
      "name":"rotateLeft",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":195,
        "endLine":201
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"rotateRight",
        "loc":{
          "name":"String.flix",
          "beginLine":214,
          "endLine":214
        }
      },
      "ann":[],
      "doc":["Rotate the contents of string `s` by `n` steps to the right."],
      "name":"rotateRight",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":214,
        "endLine":220
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"slice",
        "loc":{
          "name":"String.flix",
          "beginLine":273,
          "endLine":273
        }
      },
      "ann":[],
      "doc":["Returns the substring of `s` from index `b` (inclusive) to index `e` (exclusive).","","If `b` or `e` are out-of-bounds, return the empty string."],
      "name":"slice",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"e",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":273,
        "endLine":278
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"sliceLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":285,
          "endLine":285
        }
      },
      "ann":[],
      "doc":["Get the substring of `s` to the left of index `e` (exclusive).","","`sliceLeft == slice(0 , e, s)`"],
      "name":"sliceLeft",
      "tparams":[],
      "fparams":[{
        "name":"e",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":285,
        "endLine":289
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"sliceRight",
        "loc":{
          "name":"String.flix",
          "beginLine":296,
          "endLine":296
        }
      },
      "ann":[],
      "doc":["Get the substring of `s` to the right starting at index `b` (inclusive).","","`sliceRight == slice(b , length(s), s)`"],
      "name":"sliceRight",
      "tparams":[],
      "fparams":[{
        "name":"b",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":296,
        "endLine":300
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"split",
        "loc":{
          "name":"String.flix",
          "beginLine":64,
          "endLine":64
        }
      },
      "ann":[],
      "doc":["Splits the string `s` around matches of the regular expression `regex`."],
      "name":"split",
      "tparams":[],
      "fparams":[{
        "name":"regex",
        "tpe":"{ regex = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":64,
        "endLine":68
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"splitAt",
        "loc":{
          "name":"String.flix",
          "beginLine":500,
          "endLine":500
        }
      },
      "ann":[],
      "doc":["Split the string `s` at the position `n` returning the left and","right parts.","","If `n` exceeds the length of string `s`, return the whole string","paired with the empty string."],
      "name":"splitAt",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"(String, String)",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":500,
        "endLine":505
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"splitOn",
        "loc":{
          "name":"String.flix",
          "beginLine":1084,
          "endLine":1084
        }
      },
      "ann":[],
      "doc":["Split the string `s` on matches of `substr`."],
      "name":"splitOn",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1084,
        "endLine":1104
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"startsWith",
        "loc":{
          "name":"String.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns `true` if the string `s` starts with the string `prefix`."],
      "name":"startsWith",
      "tparams":[],
      "fparams":[{
        "name":"prefix",
        "tpe":"{ prefix = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":50,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"stripIndent",
        "loc":{
          "name":"String.flix",
          "beginLine":820,
          "endLine":820
        }
      },
      "ann":[],
      "doc":["Strip every indented line in string `s` by `n` spaces. `n` must be greater than `0`.","Note, tabs are counted as a single space.","","If the string `s` in nonempty, the returned string normalizes line","termination characters and adds a line terminator to the last line","of the string if it does not already end with a newline.","","If the string `s` is empty, then the empty string is returned."],
      "name":"stripIndent",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":820,
        "endLine":824
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"stripPrefix",
        "loc":{
          "name":"String.flix",
          "beginLine":1197,
          "endLine":1197
        }
      },
      "ann":[],
      "doc":["Returns `Some(suffix)` of string `s` if its prefix matches `substr`."],
      "name":"stripPrefix",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1197,
        "endLine":1201
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"stripSuffix",
        "loc":{
          "name":"String.flix",
          "beginLine":1206,
          "endLine":1206
        }
      },
      "ann":[],
      "doc":["Returns `Some(prefix)` of string `s` if its suffix matches `substr`."],
      "name":"stripSuffix",
      "tparams":[],
      "fparams":[{
        "name":"substr",
        "tpe":"{ substr = String }"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1206,
        "endLine":1210
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"take",
        "loc":{
          "name":"String.flix",
          "beginLine":372,
          "endLine":372
        }
      },
      "ann":[],
      "doc":["Alias for `takeLeft`."],
      "name":"take",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":372,
        "endLine":372
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"takeLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":380,
          "endLine":380
        }
      },
      "ann":[],
      "doc":["Take the first `n` characters of string `s` from the left.","","If `n` extends past the end of string `s`, return all the characters","of `s`."],
      "name":"takeLeft",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":380,
        "endLine":381
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"takeRight",
        "loc":{
          "name":"String.flix",
          "beginLine":389,
          "endLine":389
        }
      },
      "ann":[],
      "doc":["Take the last `n` characters of string `s` from the right.","","If `n` is greater than the length of string `s`, return all the characters","of `s`."],
      "name":"takeRight",
      "tparams":[],
      "fparams":[{
        "name":"n",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":389,
        "endLine":391
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"takeWhile",
        "loc":{
          "name":"String.flix",
          "beginLine":424,
          "endLine":424
        }
      },
      "ann":[],
      "doc":["Alias for `takeWileLeft`."],
      "name":"takeWhile",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":424,
        "endLine":424
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"takeWhileLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":432,
          "endLine":432
        }
      },
      "ann":[],
      "doc":["Returns the initial prefix of string `s` where all the chars satisfy","the predicate `f`.","","The function `f` must be pure."],
      "name":"takeWhileLeft",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":432,
        "endLine":436
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"takeWhileRight",
        "loc":{
          "name":"String.flix",
          "beginLine":444,
          "endLine":444
        }
      },
      "ann":[],
      "doc":["Returns the suffix of string `s` where all the characters satisfy","the predicate `f`.","","The function `f` must be pure."],
      "name":"takeWhileRight",
      "tparams":[],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> Bool"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":444,
        "endLine":448
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"toArray",
        "loc":{
          "name":"String.flix",
          "beginLine":108,
          "endLine":108
        }
      },
      "ann":[],
      "doc":["Returns the given string `s` as an array of characters."],
      "name":"toArray",
      "tparams":[{
        "name":"r",
        "kind":"Bool"
      }],
      "fparams":[{
        "name":"r",
        "tpe":"Region[r]"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Array[Char, r]",
      "eff":"r",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":108,
        "endLine":109
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"toChunks",
        "loc":{
          "name":"String.flix",
          "beginLine":1139,
          "endLine":1139
        }
      },
      "ann":[],
      "doc":["Split the string `s` into chunks of length `k`, the last chunk may be smaller than `k`.","","`k` should be greater than 0."],
      "name":"toChunks",
      "tparams":[],
      "fparams":[{
        "name":"k",
        "tpe":"Int32"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1139,
        "endLine":1143
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"toList",
        "loc":{
          "name":"String.flix",
          "beginLine":87,
          "endLine":87
        }
      },
      "ann":[],
      "doc":["Returns the given string `s` as a list of characters."],
      "name":"toList",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[Char]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":87,
        "endLine":87
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"toLowerCase",
        "loc":{
          "name":"String.flix",
          "beginLine":73,
          "endLine":73
        }
      },
      "ann":[],
      "doc":["Returns the lower case version of the string `s`."],
      "name":"toLowerCase",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":73,
        "endLine":75
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"toUpperCase",
        "loc":{
          "name":"String.flix",
          "beginLine":80,
          "endLine":80
        }
      },
      "ann":[],
      "doc":["Returns the upper case version of the string `s`."],
      "name":"toUpperCase",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":80,
        "endLine":82
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"trim",
        "loc":{
          "name":"String.flix",
          "beginLine":94,
          "endLine":94
        }
      },
      "ann":[],
      "doc":["Returns a copy of the string `s` without trailing and leading whitespaces.","","Returns a new empty string if there is no characters in `s`."],
      "name":"trim",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":94,
        "endLine":96
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"trimLeft",
        "loc":{
          "name":"String.flix",
          "beginLine":688,
          "endLine":688
        }
      },
      "ann":[],
      "doc":["Returns string `s` with all leading space characters removed."],
      "name":"trimLeft",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":688,
        "endLine":688
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"trimRight",
        "loc":{
          "name":"String.flix",
          "beginLine":693,
          "endLine":693
        }
      },
      "ann":[],
      "doc":["Returns string `s` with all trailing space characters removed."],
      "name":"trimRight",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":693,
        "endLine":693
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unfold",
        "loc":{
          "name":"String.flix",
          "beginLine":570,
          "endLine":570
        }
      },
      "ann":[],
      "doc":["Build a string from the seed value `x` applying the function `f` until `f` returns `None`."],
      "name":"unfold",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> Option[(Char, b)] & ef \\ ef'"
      },{
        "name":"x",
        "tpe":"b"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":570,
        "endLine":583
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unfoldString",
        "loc":{
          "name":"String.flix",
          "beginLine":612,
          "endLine":612
        }
      },
      "ann":[],
      "doc":["Build a string from the seed value `x` applying the function `f` until `f` returns `None`.","","This is a version of `unfold` where `f` generates substrings rather than chars."],
      "name":"unfoldString",
      "tparams":[{
        "name":"b",
        "kind":"Type"
      },{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"b -> Option[(String, b)] & ef \\ ef'"
      },{
        "name":"x",
        "tpe":"b"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":612,
        "endLine":625
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unfoldStringWithIter",
        "loc":{
          "name":"String.flix",
          "beginLine":635,
          "endLine":635
        }
      },
      "ann":[],
      "doc":["Build a string by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Some(s)` to signal a new substring `s`.","","`next` should return `None` to signal the end of building the string."],
      "name":"unfoldStringWithIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Unit -> Option[String] & ef \\ ef'"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":635,
        "endLine":647
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unfoldWithIter",
        "loc":{
          "name":"String.flix",
          "beginLine":593,
          "endLine":593
        }
      },
      "ann":[],
      "doc":["Build a string by applying the function `next` to `()`. `next` is expected to encapsulate","a stateful resource such as a file handle that can be iterated.","","`next` should return `Some(c)` to signal a new char `c`.","","`next` should return `None` to signal the end of building the string."],
      "name":"unfoldWithIter",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Unit -> Option[Char] & ef \\ ef'"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":593,
        "endLine":605
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unlines",
        "loc":{
          "name":"String.flix",
          "beginLine":864,
          "endLine":864
        }
      },
      "ann":[],
      "doc":["Join the list of strings `a` separating each pair of strings and","ending the result string with the system dependent line separator."],
      "name":"unlines",
      "tparams":[],
      "fparams":[{
        "name":"a",
        "tpe":"List[String]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":864,
        "endLine":868
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"unwords",
        "loc":{
          "name":"String.flix",
          "beginLine":883,
          "endLine":883
        }
      },
      "ann":[],
      "doc":["Join the array of strings `l` separating each pair of strings with a","single space character."],
      "name":"unwords",
      "tparams":[],
      "fparams":[{
        "name":"l",
        "tpe":"List[String]"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":883,
        "endLine":892
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"update",
        "loc":{
          "name":"String.flix",
          "beginLine":760,
          "endLine":760
        }
      },
      "ann":[],
      "doc":["Returns `s` with the element at index `i` replaced by `a`.","","Returns `s` if `i < 0` or `i > length(xs)-1`."],
      "name":"update",
      "tparams":[],
      "fparams":[{
        "name":"i",
        "tpe":"Int32"
      },{
        "name":"a",
        "tpe":"Char"
      },{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":760,
        "endLine":762
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"words",
        "loc":{
          "name":"String.flix",
          "beginLine":874,
          "endLine":874
        }
      },
      "ann":[],
      "doc":["Split the string `s` into an list of words, dividing on one or more white space characters.","Leading and trailing spaces are trimmed."],
      "name":"words",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"List[String]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":874,
        "endLine":877
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"zip",
        "loc":{
          "name":"String.flix",
          "beginLine":1067,
          "endLine":1067
        }
      },
      "ann":[],
      "doc":["Returns an array where the element at index `i` is `(x, y)` where","`x` is the element at index `i` in `a` and `y` is the element at index `i` in `b`.","","If either `a` or `b` becomes depleted, then no further elements are added to the resulting array."],
      "name":"zip",
      "tparams":[],
      "fparams":[{
        "name":"a",
        "tpe":"String"
      },{
        "name":"b",
        "tpe":"String"
      }],
      "tpe":"List[(Char, Char)]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1067,
        "endLine":1069
      }
    },{
      "sym":{
        "namespace":["String"],
        "name":"zipWith",
        "loc":{
          "name":"String.flix",
          "beginLine":1077,
          "endLine":1077
        }
      },
      "ann":[],
      "doc":["Returns a string where the element at index `i` is `f(x, y)` where","`x` is the element at index `i` in `a` and `y` is the element at index `i` in `b`.","","If either `a` or `b` becomes depleted, then no further elements are added to the resulting array."],
      "name":"zipWith",
      "tparams":[{
        "name":"ef",
        "kind":"Bool"
      },{
        "name":"ef",
        "kind":"Effect"
      }],
      "fparams":[{
        "name":"f",
        "tpe":"Char -> (Char -> Char & ef \\ ef')"
      },{
        "name":"a",
        "tpe":"String"
      },{
        "name":"b",
        "tpe":"String"
      }],
      "tpe":"String",
      "eff":"ef",
      "tcs":[],
      "loc":{
        "name":"String.flix",
        "beginLine":1077,
        "endLine":1079
      }
    }],
    "BigDecimal":[{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"abs",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":38,
          "endLine":38
        }
      },
      "ann":[],
      "doc":["Returns the absolute value of `x`."],
      "name":"abs",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":38,
        "endLine":40
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"ceil",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":104,
          "endLine":104
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded up to a BigDecimal representing the nearest larger integer value."],
      "name":"ceil",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":104,
        "endLine":107
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"compare",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":50,
          "endLine":50
        }
      },
      "ann":[],
      "doc":["Returns `1` if `x > y`, `-1` if `x < y`, and `0` if `x = y`."],
      "name":"compare",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      },{
        "name":"y",
        "tpe":"BigDecimal"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":50,
        "endLine":52
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"dist",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":45,
          "endLine":45
        }
      },
      "ann":[],
      "doc":["Returns the distance between `x` and `y`."],
      "name":"dist",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      },{
        "name":"y",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":45,
        "endLine":45
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"floor",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":112,
          "endLine":112
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded down to a BigDecimal representing the nearest smaller integer value."],
      "name":"floor",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":112,
        "endLine":115
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"fromString",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":65,
          "endLine":65
        }
      },
      "ann":[],
      "doc":["Parse the string `s` as an BigDecimal, leading or trailing whitespace is trimmed.","A successful parse is wrapped with `Some(x)`, a parse failure is indicated by `None`."],
      "name":"fromString",
      "tparams":[],
      "fparams":[{
        "name":"s",
        "tpe":"String"
      }],
      "tpe":"Option[BigDecimal]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":65,
        "endLine":71
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"max",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":33,
          "endLine":33
        }
      },
      "ann":[],
      "doc":["Returns the larger of `x` and `y`."],
      "name":"max",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      },{
        "name":"y",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":33,
        "endLine":33
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"min",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":28,
          "endLine":28
        }
      },
      "ann":[],
      "doc":["Returns the smaller of `x` and `y`."],
      "name":"min",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      },{
        "name":"y",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":28,
        "endLine":28
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"numericEquals",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":83,
          "endLine":83
        }
      },
      "ann":[],
      "doc":["Compare `x` and `y` for equality normalizing any difference in scale."],
      "name":"numericEquals",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      },{
        "name":"y",
        "tpe":"BigDecimal"
      }],
      "tpe":"Bool",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":83,
        "endLine":85
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"precision",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":97,
          "endLine":97
        }
      },
      "ann":[],
      "doc":["Returns the precision of `x`."],
      "name":"precision",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":97,
        "endLine":99
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"round",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":123,
          "endLine":123
        }
      },
      "ann":[],
      "doc":["Returns `x` rounded to a BigDecimal representing the nearest integer value.","","The rounding may be upwards or downwards. If the rounding up and rounding down are equally","close, `x` will be rounded to an even value (i.e. `round(0.5ff64) == 0.0ff64`)."],
      "name":"round",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigDecimal",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":123,
        "endLine":126
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"scale",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":90,
          "endLine":90
        }
      },
      "ann":[],
      "doc":["Returns the scale of `x`."],
      "name":"scale",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":90,
        "endLine":92
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"signum",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":57,
          "endLine":57
        }
      },
      "ann":[],
      "doc":["Returns `1` if `x > 0`, `-1` if `x < 0`, and `0` if `x = 0`."],
      "name":"signum",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Int32",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":57,
        "endLine":59
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"toBigInt",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":187,
          "endLine":187
        }
      },
      "ann":[],
      "doc":["Convert `x` to a `BigInt`."],
      "name":"toBigInt",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"BigInt",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":187,
        "endLine":189
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"toPlainString",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":76,
          "endLine":76
        }
      },
      "ann":[],
      "doc":["Returns `x` as a \"plain string\" without an exponent field."],
      "name":"toPlainString",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"String",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":76,
        "endLine":78
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToFloat32",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":200,
          "endLine":200
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Float32]`.","","Returns `Some(x as Float32)` if the numeric value of `x` is within the range","of Float32, loss of precision may occur.","","Returns `None` if the numeric value of `x` is outside the range of Float32","(i.e. 1.4E-45 to 3.4028235E38)."],
      "name":"tryToFloat32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Float32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":200,
        "endLine":206
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToFloat64",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":217,
          "endLine":217
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Float64]`.","","Returns `Some(x as Float64)` if the numeric value of `x` is within the range","of Float64, loss of precision may occur.","","Returns `None` if the numeric value of `x` is outside the range of Float64","(i.e 4.9E-324 to 1.7976931348623157E308)."],
      "name":"tryToFloat64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Float64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":217,
        "endLine":223
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToInt16",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":149,
          "endLine":149
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int16]`.","","Returns `Some(x as Int16)` if the numeric value of `x` is within the range","of Int16, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int16","(i.e. -32768 to 32767)."],
      "name":"tryToInt16",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Int16]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":149,
        "endLine":150
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToInt32",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":161,
          "endLine":161
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int32]`.","","Returns `Some(x as Int32)` if the numeric value of `x` is within the range","of Int32, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int32","(i.e. -2147483648 to 2147483647)."],
      "name":"tryToInt32",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Int32]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":161,
        "endLine":166
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToInt64",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":177,
          "endLine":177
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int64]`.","","Returns `Some(x as Int64)` if the numeric value of `x` is within the range","of Int64, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int64","(i.e. -9223372036854775808 to 9223372036854775807)."],
      "name":"tryToInt64",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Int64]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":177,
        "endLine":182
      }
    },{
      "sym":{
        "namespace":["BigDecimal"],
        "name":"tryToInt8",
        "loc":{
          "name":"BigDecimal.flix",
          "beginLine":137,
          "endLine":137
        }
      },
      "ann":[],
      "doc":["Convert `x` to an `Option[Int8]`.","","Returns `Some(x as Int8)` if the numeric value of `x` is within the range","of Int8, rounding `x` towards 0`.","","Returns `None` if the numeric value of `x` is outside the range of Int8","(i.e. -128 to 127)."],
      "name":"tryToInt8",
      "tparams":[],
      "fparams":[{
        "name":"x",
        "tpe":"BigDecimal"
      }],
      "tpe":"Option[Int8]",
      "eff":"true",
      "tcs":[],
      "loc":{
        "name":"BigDecimal.flix",
        "beginLine":137,
        "endLine":138
      }
    }]
  }
}